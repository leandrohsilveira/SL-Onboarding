{
    "pipes": [],
    "interfaces": [
        {
            "name": "Actions",
            "id": "interface-Actions-6b08080a0316dbdba90501a2933fcc84",
            "file": "src/app/domain/disciplina/routes/disciplina-form-route/disciplina-form-route.component.ts",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\r\nimport { BaseComponent } from 'app/shared/base/base.component';\r\nimport { DisciplinaService } from '../../disciplina.service';\r\nimport {\r\n  PoNotificationService,\r\n  PoModalComponent,\r\n  PoModalAction,\r\n  PoLookupFilter,\r\n} from '@po-ui/ng-components';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { DisciplinaFormComponent } from '../../disciplina-form/disciplina-form.component';\r\nimport { Disciplina } from '../../disciplina';\r\nimport { filter, map, switchMap, tap, catchError, delay } from 'rxjs/operators';\r\nimport { ProfessorService } from 'app/domain/pessoa/professor/professor.service';\r\nimport { ProfessorEvent } from 'app/domain/pessoa/professor/professor';\r\nimport { Pageable } from 'app/shared/util/service.util';\r\nimport { of, throwError } from 'rxjs';\r\nimport { EventService } from 'app/shared/event/event.service';\r\n\r\ninterface Actions {\r\n  salvar: PoModalAction;\r\n  cancelar: PoModalAction;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-disciplina-form-route',\r\n  templateUrl: './disciplina-form-route.component.html',\r\n})\r\nexport class DisciplinaFormRouteComponent\r\n  extends BaseComponent\r\n  implements OnInit, OnDestroy {\r\n  constructor(\r\n    private disciplinaService: DisciplinaService,\r\n    private professorService: ProfessorService,\r\n    private notificationService: PoNotificationService,\r\n    private router: Router,\r\n    private activatedRoute: ActivatedRoute,\r\n    private eventService: EventService\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  @ViewChild(PoModalComponent, { static: true })\r\n  modalRef: PoModalComponent;\r\n\r\n  @ViewChild('formRef', { static: true })\r\n  formRef: DisciplinaFormComponent;\r\n\r\n  processando = false;\r\n\r\n  disciplina = new Disciplina();\r\n\r\n  podeCancelar = true;\r\n\r\n  loading = false;\r\n\r\n  service: PoLookupFilter = {\r\n    getFilteredItems: ({ filter: query, page, pageSize }) =>\r\n      this.professorService.filtrar(new Pageable(page, pageSize), query),\r\n    getObjectByValue: (query) => {\r\n      if (this.disciplina.professorRef === query)\r\n        of(this.disciplina.professor).pipe(\r\n          tap(() => (this.loading = false)),\r\n          delay(20)\r\n        );\r\n      this.loading = true;\r\n      return this.professorService.lookup(query).pipe(\r\n        tap(() => (this.loading = false)),\r\n        catchError((error) => {\r\n          this.loading = false;\r\n          return throwError(error);\r\n        })\r\n      );\r\n    },\r\n  };\r\n\r\n  get nomeProfessor(): string {\r\n    return this.disciplina?.professor?.nome || '';\r\n  }\r\n\r\n  get actions(): Actions {\r\n    return {\r\n      salvar: {\r\n        label: $localize`:Texto do botão \"Salvar\" da modal (janela) de formulário de disciplina:Salvar`,\r\n        action: () => this.salvar(),\r\n        loading: this.loading || this.processando,\r\n        disabled: !this.formRef.canSubmit,\r\n      },\r\n      cancelar: {\r\n        label: $localize`:Texto do botão \"Cancelar\" da modal (janela) de formulário de disciplina:Cancelar`,\r\n        action: () => this.cancelar(),\r\n        disabled: !this.podeCancelar,\r\n      },\r\n    };\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    super.ngOnInit();\r\n    this.activatedRoute.data\r\n      .pipe(\r\n        this.takeWhileMounted(),\r\n        filter((data) => data.loadFromParam),\r\n        map((data) => data.loadFromParam),\r\n        tap(() => (this.loading = true)),\r\n        switchMap((param) =>\r\n          this.activatedRoute.params.pipe(\r\n            filter((params) => params[param]),\r\n            map((params) => params[param])\r\n          )\r\n        ),\r\n        switchMap((id) => this.disciplinaService.recuperarPorId(id))\r\n      )\r\n      .subscribe((disciplina) => {\r\n        this.disciplina = disciplina;\r\n        if (!disciplina.professor) this.loading = false;\r\n      });\r\n    this.eventService.bus$\r\n      .pipe(\r\n        this.takeWhileMounted(),\r\n        filter((evt) => evt instanceof ProfessorEvent),\r\n        map((evt) => evt as ProfessorEvent),\r\n        filter((evt) => evt.source === 'client' && evt.type === 'cadastrado')\r\n      )\r\n      .subscribe(({ entidade: { id } }) =>\r\n        this.formRef.form.patchValue({ professorRef: id })\r\n      );\r\n\r\n    this.modalRef.open();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    super.ngOnDestroy();\r\n    this.modalRef.close();\r\n  }\r\n\r\n  cancelar(): void {\r\n    this.retornar();\r\n  }\r\n\r\n  salvar(): void {\r\n    this.processando = true;\r\n    this.podeCancelar = false;\r\n    this.disciplinaService\r\n      .salvar(this.disciplina)\r\n      .pipe(this.takeWhileMounted())\r\n      .subscribe(\r\n        () => {\r\n          this.notificationService.success(this.mensagemSucesso);\r\n          this.retornar();\r\n        },\r\n        (error) => {\r\n          this.processando = false;\r\n          this.podeCancelar = true;\r\n          console.error(error);\r\n        }\r\n      );\r\n  }\r\n\r\n  handleNovoProfessorClick(): void {\r\n    this.router.navigate(['professor', 'new'], {\r\n      relativeTo: this.activatedRoute,\r\n    });\r\n  }\r\n\r\n  private retornar(): void {\r\n    this.router.navigate(this.urlRetorno);\r\n  }\r\n\r\n  private get urlRetorno(): string[] {\r\n    return this.activatedRoute.snapshot.data.urlRetorno(this.activatedRoute);\r\n  }\r\n\r\n  private get mensagemSucesso(): string {\r\n    return this.activatedRoute.snapshot.data.mensagemSucesso();\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "cancelar",
                    "type": "PoModalAction",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "salvar",
                    "type": "PoModalAction",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Actions",
            "id": "interface-Actions-defae180310b861a37e6b4bfb528c1a3-1",
            "file": "src/app/domain/pessoa/aluno/routes/aluno-form-route/aluno-form-route.component.ts",
            "type": "interface",
            "sourceCode": "import { Component, ViewChild, OnInit, OnDestroy } from '@angular/core';\r\nimport { Aluno } from '../../aluno';\r\nimport {\r\n  PoModalComponent,\r\n  PoModalAction,\r\n  PoNotificationService,\r\n} from '@po-ui/ng-components';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { BaseComponent } from 'app/shared/base/base.component';\r\nimport { AlunoService } from '../../aluno.service';\r\nimport { map, filter, tap, switchMap } from 'rxjs/operators';\r\nimport { AlunoFormComponent } from '../../aluno-form/aluno-form.component';\r\nimport { Observable } from 'rxjs';\r\n\r\ninterface Actions {\r\n  salvar: PoModalAction;\r\n  cancelar: PoModalAction;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-aluno-form-route',\r\n  templateUrl: './aluno-form-route.component.html',\r\n})\r\nexport class AlunoFormRouteComponent\r\n  extends BaseComponent\r\n  implements OnInit, OnDestroy {\r\n  constructor(\r\n    private alunoService: AlunoService,\r\n    private notificationService: PoNotificationService,\r\n    private router: Router,\r\n    private activatedRoute: ActivatedRoute\r\n  ) {\r\n    super();\r\n    this.cpfNotTaken = this.cpfNotTaken.bind(this);\r\n    this.emailNotTaken = this.emailNotTaken.bind(this);\r\n  }\r\n\r\n  @ViewChild(PoModalComponent, { static: true })\r\n  modalRef: PoModalComponent;\r\n\r\n  @ViewChild('formRef', { static: true })\r\n  formRef: AlunoFormComponent;\r\n\r\n  get actions(): Actions {\r\n    return {\r\n      salvar: {\r\n        label: $localize`:Texto do botão \"Salvar\" da modal (janela) de formulário de aluno:Salvar`,\r\n        action: () => this.salvar(),\r\n        loading: this.loading || this.processando,\r\n        disabled: !this.formRef.canSubmit,\r\n      },\r\n      cancelar: {\r\n        label: $localize`:Texto do botão \"Cancelar\" da modal (janela) de formulário de aluno:Cancelar`,\r\n        action: () => this.cancelar(),\r\n        disabled: !this.podeCancelar,\r\n      },\r\n    };\r\n  }\r\n\r\n  processando = false;\r\n\r\n  aluno: Aluno = new Aluno();\r\n\r\n  podeCancelar = true;\r\n\r\n  loading = false;\r\n\r\n  ngOnInit(): void {\r\n    super.ngOnInit();\r\n    this.activatedRoute.data\r\n      .pipe(\r\n        this.takeWhileMounted(),\r\n        filter((data) => data.loadFromParam),\r\n        map((data) => data.loadFromParam),\r\n        tap(() => (this.loading = true)),\r\n        switchMap((param) =>\r\n          this.activatedRoute.params.pipe(\r\n            filter((params) => params[param]),\r\n            map((params) => params[param])\r\n          )\r\n        ),\r\n        switchMap((id) => this.alunoService.recuperarPorId(id))\r\n      )\r\n      .subscribe((aluno) => {\r\n        this.loading = false;\r\n        this.aluno = aluno;\r\n      });\r\n\r\n    this.modalRef.open();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    super.ngOnDestroy();\r\n    this.modalRef.close();\r\n  }\r\n\r\n  cancelar(): void {\r\n    this.retornar();\r\n  }\r\n\r\n  cpfNotTaken(cpf: string): Observable<boolean> {\r\n    return this.alunoService.cpfNotTaken({\r\n      cpf: cpf?.replace(/(\\.|\\-)/g, ''),\r\n      id: this.aluno.id ?? '',\r\n    });\r\n  }\r\n\r\n  emailNotTaken(email: string): Observable<boolean> {\r\n    return this.alunoService.emailNotTaken({\r\n      email,\r\n      id: this.aluno.id ?? '',\r\n    });\r\n  }\r\n\r\n  salvar(): void {\r\n    this.processando = true;\r\n    this.podeCancelar = false;\r\n    this.alunoService\r\n      .salvar(this.aluno)\r\n      .pipe(this.takeWhileMounted())\r\n      .subscribe(\r\n        () => {\r\n          this.notificationService.success(this.mensagemSucesso);\r\n          this.retornar();\r\n        },\r\n        (error) => {\r\n          this.processando = false;\r\n          this.podeCancelar = true;\r\n          console.error(error);\r\n        }\r\n      );\r\n  }\r\n\r\n  private retornar(): void {\r\n    this.router.navigate(this.urlRetorno);\r\n  }\r\n\r\n  private get urlRetorno(): string[] {\r\n    return this.activatedRoute.snapshot.data.urlRetorno(this.activatedRoute);\r\n  }\r\n\r\n  private get mensagemSucesso(): string {\r\n    return this.activatedRoute.snapshot.data.mensagemSucesso();\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "cancelar",
                    "type": "PoModalAction",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "salvar",
                    "type": "PoModalAction",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Actions-1"
        },
        {
            "name": "Actions",
            "id": "interface-Actions-5605942eb5974d8f8bbdab07a059424c-2",
            "file": "src/app/domain/pessoa/professor/routes/professor-form-route/professor-form-route.component.ts",
            "type": "interface",
            "sourceCode": "import { Component, ViewChild, OnInit, OnDestroy } from '@angular/core';\r\nimport {\r\n  PoModalComponent,\r\n  PoNotificationService,\r\n  PoModalAction,\r\n} from '@po-ui/ng-components';\r\nimport { BaseComponent } from 'app/shared/base/base.component';\r\nimport { ProfessorService } from '../../professor.service';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { ProfessorFormComponent } from '../../professor-form/professor-form.component';\r\nimport { Professor } from '../../professor';\r\nimport { filter, map, tap, switchMap } from 'rxjs/operators';\r\nimport { Observable } from 'rxjs';\r\n\r\ninterface Actions {\r\n  salvar: PoModalAction;\r\n  cancelar: PoModalAction;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-professor-form-route',\r\n  templateUrl: './professor-form-route.component.html',\r\n})\r\nexport class ProfessorFormRouteComponent\r\n  extends BaseComponent\r\n  implements OnInit, OnDestroy {\r\n  constructor(\r\n    private professorService: ProfessorService,\r\n    private notificationService: PoNotificationService,\r\n    private router: Router,\r\n    private activatedRoute: ActivatedRoute\r\n  ) {\r\n    super();\r\n    this.cpfNotTaken = this.cpfNotTaken.bind(this);\r\n    this.emailNotTaken = this.emailNotTaken.bind(this);\r\n  }\r\n\r\n  @ViewChild(PoModalComponent, { static: true })\r\n  modalRef: PoModalComponent;\r\n\r\n  @ViewChild('formRef', { static: true })\r\n  formRef: ProfessorFormComponent;\r\n\r\n  get actions(): Actions {\r\n    return {\r\n      salvar: {\r\n        label: $localize`:Texto do botão \"Salvar\" da modal (janela) de formulário de professor:Salvar`,\r\n        action: () => this.salvar(),\r\n        loading: this.loading || this.processando,\r\n        disabled: !this.formRef.canSubmit,\r\n      },\r\n      cancelar: {\r\n        label: $localize`:Texto do botão \"Cancelar\" da modal (janela) de formulário de professor:Cancelar`,\r\n        action: () => this.cancelar(),\r\n        disabled: !this.podeCancelar,\r\n      },\r\n    };\r\n  }\r\n\r\n  processando = false;\r\n\r\n  professor = new Professor();\r\n\r\n  podeCancelar = true;\r\n\r\n  loading = false;\r\n\r\n  ngOnInit(): void {\r\n    super.ngOnInit();\r\n    this.activatedRoute.data\r\n      .pipe(\r\n        this.takeWhileMounted(),\r\n        filter((data) => data.loadFromParam),\r\n        map((data) => data.loadFromParam),\r\n        tap(() => (this.loading = true)),\r\n        switchMap((param) =>\r\n          this.activatedRoute.params.pipe(\r\n            filter((params) => params[param]),\r\n            map((params) => params[param])\r\n          )\r\n        ),\r\n        switchMap((id) => this.professorService.recuperarPorId(id))\r\n      )\r\n      .subscribe((professor) => {\r\n        this.loading = false;\r\n        this.professor = professor;\r\n      });\r\n\r\n    this.modalRef.open();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    super.ngOnDestroy();\r\n    this.modalRef.close();\r\n  }\r\n\r\n  cpfNotTaken(cpf: string): Observable<boolean> {\r\n    return this.professorService.cpfNotTaken({\r\n      cpf: cpf?.replace(/(\\.|\\-)/g, ''),\r\n      id: this.professor.id ?? '',\r\n    });\r\n  }\r\n\r\n  emailNotTaken(email: string): Observable<boolean> {\r\n    return this.professorService.emailNotTaken({\r\n      email,\r\n      id: this.professor.id ?? '',\r\n    });\r\n  }\r\n\r\n  cancelar(): void {\r\n    this.retornar();\r\n  }\r\n\r\n  salvar(): void {\r\n    this.processando = true;\r\n    this.podeCancelar = false;\r\n    this.professorService\r\n      .salvar(this.professor)\r\n      .pipe(this.takeWhileMounted())\r\n      .subscribe(\r\n        () => {\r\n          this.notificationService.success(this.mensagemSucesso);\r\n          this.retornar();\r\n        },\r\n        (error) => {\r\n          this.processando = false;\r\n          this.podeCancelar = true;\r\n          console.error(error);\r\n        }\r\n      );\r\n  }\r\n\r\n  private retornar(): void {\r\n    this.router.navigate(this.urlRetorno);\r\n  }\r\n\r\n  private get urlRetorno(): string[] {\r\n    return this.activatedRoute.snapshot.data.urlRetorno(this.activatedRoute);\r\n  }\r\n\r\n  private get mensagemSucesso(): string {\r\n    return this.activatedRoute.snapshot.data.mensagemSucesso();\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "cancelar",
                    "type": "PoModalAction",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "salvar",
                    "type": "PoModalAction",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "Actions-2"
        },
        {
            "name": "AlunoJson",
            "id": "interface-AlunoJson-db9dca0428b751757f20c16602fa34a1",
            "file": "src/app/domain/pessoa/aluno/aluno.ts",
            "type": "interface",
            "sourceCode": "import { AbstractControl, Validators } from '@angular/forms';\r\nimport { Id, EntidadeEvent } from 'app/domain/entidade';\r\nimport { NotTakenService } from 'app/shared/validators';\r\nimport { Pessoa, PessoaSortFields, PessoaJson } from '../pessoa';\r\n\r\nexport interface AlunoJson extends PessoaJson {\r\n  matricula: number;\r\n  formaIngresso: string;\r\n}\r\n\r\nexport class AlunoEvent extends EntidadeEvent<Aluno> {}\r\n\r\nexport enum FormaIngresso {\r\n  ENADE = 'ENADE',\r\n  VESTIBULAR = 'Vestibular',\r\n}\r\n\r\nexport type AlunoSortFields = PessoaSortFields | 'formaIngresso' | 'matricula';\r\n\r\nexport class Aluno extends Pessoa {\r\n  public static fromJson({\r\n    id,\r\n    nome,\r\n    email,\r\n    cpf,\r\n    formaIngresso,\r\n    matricula,\r\n  }: any): Aluno {\r\n    return new Aluno(id, nome, email, cpf, formaIngresso, +matricula);\r\n  }\r\n\r\n  constructor(\r\n    id: Id = null,\r\n    nome = '',\r\n    email = '',\r\n    cpf = '',\r\n    public formaIngresso: FormaIngresso | '' = '',\r\n    public matricula?: number\r\n  ) {\r\n    super(id, nome, email, cpf);\r\n  }\r\n\r\n  protected onChanges({ formaIngresso, ...pessoa }: any): void {\r\n    super.onChanges(pessoa);\r\n    this.formaIngresso = formaIngresso;\r\n  }\r\n\r\n  protected getFormControls(\r\n    emailNotTaken: NotTakenService,\r\n    cpfNotTaken: NotTakenService\r\n  ): any {\r\n    return {\r\n      ...super.getFormControls(emailNotTaken, cpfNotTaken),\r\n      formaIngresso: [\r\n        this.formaIngresso,\r\n        [Validators.required, this.formaIngressoValidator],\r\n      ],\r\n    };\r\n  }\r\n\r\n  private formaIngressoValidator(\r\n    control: AbstractControl\r\n  ): { formaIngresso: boolean } | null {\r\n    if (control.value)\r\n      switch (control.value) {\r\n        case FormaIngresso.ENADE:\r\n        case FormaIngresso.VESTIBULAR:\r\n          break;\r\n        default:\r\n          return { formaIngresso: true };\r\n      }\r\n    return null;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "formaIngresso",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "matricula",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "PessoaJson"
        },
        {
            "name": "AlunosMock",
            "id": "interface-AlunosMock-31b7f3387990d4ca14d2925fca6a643b",
            "file": "src/app/domain/pessoa/aluno/aluno.mock.ts",
            "type": "interface",
            "sourceCode": "import { InjectionToken } from '@angular/core';\r\nimport data from 'backend/domain/pessoa/aluno/aluno.mock.json';\r\n\r\nconst alunosMock = [...data];\r\n\r\nexport const injectionToken = new InjectionToken<AlunosMock>('app.mocks.aluno');\r\n\r\nexport interface AlunosMock {\r\n  values: any[];\r\n}\r\n\r\nexport default alunosMock;\r\n",
            "properties": [
                {
                    "name": "values",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CpfNotTakenJson",
            "id": "interface-CpfNotTakenJson-fc1034571985a333dde3fe511edeb92d",
            "file": "src/app/domain/pessoa/pessoa.ts",
            "type": "interface",
            "sourceCode": "import { Validators, FormBuilder, FormGroup } from '@angular/forms';\r\nimport { Entidade, Id, EntidadeJson } from '../entidade';\r\nimport { CustomValidators, NotTakenService } from 'app/shared/validators';\r\nimport { of } from 'rxjs';\r\nimport { format as formatCpf } from '@fnando/cpf';\r\nimport { Predicate } from '@angular/core';\r\n\r\nconst DEFAULT_NOT_TAKEN_SERVICE: NotTakenService = () => of(true);\r\n\r\nexport type PessoaSortFields = 'nome' | 'email' | 'cpf';\r\n\r\nexport interface CpfNotTakenJson {\r\n  id: Id;\r\n  cpf: string;\r\n}\r\n\r\nexport interface EmailNotTakenJson {\r\n  id: Id;\r\n  email: string;\r\n}\r\n\r\nexport interface PessoaJson extends EntidadeJson {\r\n  nome: string;\r\n  email: string;\r\n  cpf: string;\r\n}\r\n\r\nexport abstract class Pessoa extends Entidade {\r\n  public static nomeOuCpfPredicate<R extends Pessoa>(\r\n    query: string\r\n  ): Predicate<R> {\r\n    return ({ nome, cpf }) =>\r\n      nome === query || cpf === query.replace(/(\\.|\\-)/g, '');\r\n  }\r\n\r\n  constructor(id: Id, public nome = '', public email = '', public cpf = '') {\r\n    super(id);\r\n  }\r\n\r\n  get cpfFormatado(): string {\r\n    return formatCpf(this.cpf);\r\n  }\r\n\r\n  protected onChanges({ nome, email, cpf }: any): void {\r\n    this.nome = nome;\r\n    this.email = email;\r\n    this.cpf = cpf;\r\n  }\r\n\r\n  protected getFormControls(\r\n    emailNotTaken: NotTakenService,\r\n    cpfNotTaken: NotTakenService\r\n  ): any {\r\n    return {\r\n      nome: [this.nome, [Validators.required, Validators.maxLength(255)]],\r\n      email: [\r\n        this.email,\r\n        [\r\n          Validators.required,\r\n          Validators.maxLength(255),\r\n          CustomValidators.email,\r\n        ],\r\n        CustomValidators.notTakenValidator(emailNotTaken, 'emailTaken'),\r\n      ],\r\n      cpf: [\r\n        this.cpf,\r\n        [\r\n          Validators.required,\r\n          Validators.minLength(11),\r\n          Validators.maxLength(11),\r\n          CustomValidators.cpf,\r\n        ],\r\n        CustomValidators.notTakenValidator(cpfNotTaken, 'cpfTaken'),\r\n      ],\r\n    };\r\n  }\r\n\r\n  public criarForm(\r\n    builder: FormBuilder,\r\n    emailNotTaken = DEFAULT_NOT_TAKEN_SERVICE,\r\n    cpfNotTaken = DEFAULT_NOT_TAKEN_SERVICE\r\n  ): FormGroup {\r\n    return builder.group(this.getFormControls(emailNotTaken, cpfNotTaken));\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "cpf",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "id",
                    "type": "Id",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DisciplinaJson",
            "id": "interface-DisciplinaJson-8a10fe4e614b94c0b74d55c93012df10",
            "file": "src/app/domain/disciplina/disciplina.ts",
            "type": "interface",
            "sourceCode": "import { FormGroup, Validators, FormBuilder } from '@angular/forms';\r\nimport { CustomValidators } from 'app/shared/validators';\r\nimport { Entidade, Id, EntidadeJson, EntidadeEvent } from '../entidade';\r\nimport { Professor, ProfessorJson } from '../pessoa/professor/professor';\r\n\r\nexport class DisciplinaEvent extends EntidadeEvent<Disciplina> {}\r\n\r\nexport type DisciplinaSortFields = 'descricao' | 'sigla' | 'cargaHoraria';\r\n\r\nexport interface DisciplinaJson extends EntidadeJson {\r\n  descricao: string;\r\n  sigla: string;\r\n  cargaHoraria: number;\r\n  professorRef?: Id;\r\n  professor?: ProfessorJson;\r\n}\r\n\r\nexport class Disciplina extends Entidade {\r\n  public static fromJson({\r\n    id,\r\n    descricao,\r\n    sigla,\r\n    cargaHoraria,\r\n    professor: professorJson,\r\n  }: DisciplinaJson): Disciplina {\r\n    const professor = professorJson\r\n      ? Professor.fromJson(professorJson)\r\n      : undefined;\r\n    return new Disciplina(id, descricao, sigla, +cargaHoraria, professor);\r\n  }\r\n\r\n  constructor(\r\n    id: Id = null,\r\n    public descricao = '',\r\n    public sigla = '',\r\n    public cargaHoraria?: number,\r\n    public professor?: Professor\r\n  ) {\r\n    super(id);\r\n  }\r\n\r\n  public get professorRef(): Id {\r\n    return this.professor?.id;\r\n  }\r\n\r\n  public toJson(): DisciplinaJson {\r\n    return {\r\n      id: this.id,\r\n      descricao: this.descricao,\r\n      sigla: this.sigla,\r\n      cargaHoraria: this.cargaHoraria,\r\n      professorRef: this.professorRef,\r\n    };\r\n  }\r\n\r\n  public fromForm(form: FormGroup): void {\r\n    this.descricao = form.get('descricao').value;\r\n    this.sigla = form.get('sigla').value;\r\n    this.cargaHoraria = +form.get('cargaHoraria').value;\r\n    const professorRef = form.get('professorRef').value;\r\n    if (professorRef) {\r\n      if (professorRef !== this.professorRef)\r\n        this.professor = new Professor(professorRef);\r\n    } else this.professor = null;\r\n  }\r\n\r\n  protected onChanges({\r\n    descricao,\r\n    sigla,\r\n    cargaHoraria,\r\n    professorRef,\r\n  }: any): void {\r\n    this.descricao = descricao;\r\n    this.sigla = sigla;\r\n    this.cargaHoraria = +cargaHoraria;\r\n    if (professorRef && professorRef !== this.professorRef)\r\n      this.professor = new Professor(professorRef);\r\n  }\r\n\r\n  public criarForm(formBuilder: FormBuilder): FormGroup {\r\n    return formBuilder.group({\r\n      descricao: [\r\n        this.descricao,\r\n        [Validators.required, Validators.maxLength(255)],\r\n      ],\r\n      sigla: [this.sigla, [Validators.required, Validators.maxLength(10)]],\r\n      cargaHoraria: [\r\n        this.cargaHoraria ?? '',\r\n        [Validators.required, CustomValidators.number],\r\n      ],\r\n      professorRef: [this.professorRef ?? '', [Validators.required]],\r\n    });\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "cargaHoraria",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "descricao",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "professor",
                    "type": "ProfessorJson",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "professorRef",
                    "type": "Id",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "sigla",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "EntidadeJson"
        },
        {
            "name": "EmailNotTakenJson",
            "id": "interface-EmailNotTakenJson-fc1034571985a333dde3fe511edeb92d",
            "file": "src/app/domain/pessoa/pessoa.ts",
            "type": "interface",
            "sourceCode": "import { Validators, FormBuilder, FormGroup } from '@angular/forms';\r\nimport { Entidade, Id, EntidadeJson } from '../entidade';\r\nimport { CustomValidators, NotTakenService } from 'app/shared/validators';\r\nimport { of } from 'rxjs';\r\nimport { format as formatCpf } from '@fnando/cpf';\r\nimport { Predicate } from '@angular/core';\r\n\r\nconst DEFAULT_NOT_TAKEN_SERVICE: NotTakenService = () => of(true);\r\n\r\nexport type PessoaSortFields = 'nome' | 'email' | 'cpf';\r\n\r\nexport interface CpfNotTakenJson {\r\n  id: Id;\r\n  cpf: string;\r\n}\r\n\r\nexport interface EmailNotTakenJson {\r\n  id: Id;\r\n  email: string;\r\n}\r\n\r\nexport interface PessoaJson extends EntidadeJson {\r\n  nome: string;\r\n  email: string;\r\n  cpf: string;\r\n}\r\n\r\nexport abstract class Pessoa extends Entidade {\r\n  public static nomeOuCpfPredicate<R extends Pessoa>(\r\n    query: string\r\n  ): Predicate<R> {\r\n    return ({ nome, cpf }) =>\r\n      nome === query || cpf === query.replace(/(\\.|\\-)/g, '');\r\n  }\r\n\r\n  constructor(id: Id, public nome = '', public email = '', public cpf = '') {\r\n    super(id);\r\n  }\r\n\r\n  get cpfFormatado(): string {\r\n    return formatCpf(this.cpf);\r\n  }\r\n\r\n  protected onChanges({ nome, email, cpf }: any): void {\r\n    this.nome = nome;\r\n    this.email = email;\r\n    this.cpf = cpf;\r\n  }\r\n\r\n  protected getFormControls(\r\n    emailNotTaken: NotTakenService,\r\n    cpfNotTaken: NotTakenService\r\n  ): any {\r\n    return {\r\n      nome: [this.nome, [Validators.required, Validators.maxLength(255)]],\r\n      email: [\r\n        this.email,\r\n        [\r\n          Validators.required,\r\n          Validators.maxLength(255),\r\n          CustomValidators.email,\r\n        ],\r\n        CustomValidators.notTakenValidator(emailNotTaken, 'emailTaken'),\r\n      ],\r\n      cpf: [\r\n        this.cpf,\r\n        [\r\n          Validators.required,\r\n          Validators.minLength(11),\r\n          Validators.maxLength(11),\r\n          CustomValidators.cpf,\r\n        ],\r\n        CustomValidators.notTakenValidator(cpfNotTaken, 'cpfTaken'),\r\n      ],\r\n    };\r\n  }\r\n\r\n  public criarForm(\r\n    builder: FormBuilder,\r\n    emailNotTaken = DEFAULT_NOT_TAKEN_SERVICE,\r\n    cpfNotTaken = DEFAULT_NOT_TAKEN_SERVICE\r\n  ): FormGroup {\r\n    return builder.group(this.getFormControls(emailNotTaken, cpfNotTaken));\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "id",
                    "type": "Id",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Endpoints",
            "id": "interface-Endpoints-b113e1a07cae75bd89c049d0d95670e2",
            "file": "src/app/domain/entidade.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {\r\n  Entidade,\r\n  EntidadeJson,\r\n  Id,\r\n  EntidadeEventType,\r\n  EntidadeEvent,\r\n} from './entidade';\r\nimport { Observable } from 'rxjs';\r\nimport { Endpoint } from 'app/shared/endpoints';\r\nimport { EventService } from 'app/shared/event/event.service';\r\nimport { map, mapTo, tap, mergeMap } from 'rxjs/operators';\r\nimport {\r\n  simularDelay,\r\n  Pageable,\r\n  Sort,\r\n  Page,\r\n} from 'app/shared/util/service.util';\r\n\r\nexport interface Endpoints {\r\n  core: Endpoint;\r\n  query: Endpoint;\r\n}\r\n\r\n@Injectable()\r\nexport abstract class EntidadeService<\r\n  E extends Entidade,\r\n  J extends EntidadeJson,\r\n  SF = string\r\n> {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected eventService: EventService\r\n  ) {}\r\n\r\n  protected abstract endpoints: Endpoints;\r\n\r\n  protected abstract fromJson(json: J): E;\r\n\r\n  protected abstract createEvent(\r\n    entidade: E,\r\n    eventType: EntidadeEventType\r\n  ): EntidadeEvent<E>;\r\n\r\n  protected toJson(entidade: E): J {\r\n    return JSON.parse(JSON.stringify(entidade));\r\n  }\r\n\r\n  recuperarPorId(id: Id): Observable<E> {\r\n    return this.http\r\n      .get(`${this.endpoints.query.urlCompleta}/${id}`)\r\n      .pipe(map(this.fromJson), mergeMap(simularDelay));\r\n  }\r\n\r\n  filtrar(\r\n    { page, pageSize }: Pageable,\r\n    filtro = '',\r\n    sort?: Sort<SF>\r\n  ): Observable<Page<E>> {\r\n    return this.http\r\n      .get(this.endpoints.query.urlCompleta, {\r\n        params: {\r\n          page: String(page),\r\n          pageSize: String(pageSize),\r\n          ...(filtro ? { searchTerm: filtro } : {}),\r\n          ...(sort ? { order: sort.expression } : {}),\r\n        },\r\n      })\r\n      .pipe(\r\n        map(({ items, hasNext }: Page<J>) => ({\r\n          items: items.map(this.fromJson),\r\n          hasNext,\r\n        })),\r\n        mergeMap(simularDelay)\r\n      );\r\n  }\r\n\r\n  salvar(entidade: E): Observable<E> {\r\n    let result: Observable<E>;\r\n    let eventType: EntidadeEventType;\r\n    if (entidade.id) {\r\n      result = this.http\r\n        .put<J>(\r\n          `${this.endpoints.core.urlCompleta}/${entidade.id}`,\r\n          this.toJson(entidade)\r\n        )\r\n        .pipe(mapTo(entidade));\r\n      eventType = 'atualizado';\r\n    } else {\r\n      result = this.http\r\n        .post<J>(this.endpoints.core.urlCompleta, this.toJson(entidade))\r\n        .pipe(map(this.fromJson));\r\n      eventType = 'cadastrado';\r\n    }\r\n    return result.pipe(\r\n      mergeMap(simularDelay),\r\n      tap((ent) => this.eventService.publish(this.createEvent(ent, eventType)))\r\n    );\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "core",
                    "type": "Endpoint",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "query",
                    "type": "Endpoint",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "EntidadeJson",
            "id": "interface-EntidadeJson-6c5ab6424e2a23e78d63d070f1a628f4",
            "file": "src/app/domain/entidade.ts",
            "type": "interface",
            "sourceCode": "import { FormGroup } from '@angular/forms';\r\nimport { takeWhile } from 'rxjs/operators';\r\nimport { MonoTypeOperatorFunction, Subscription } from 'rxjs';\r\nimport { AbstractEvent } from 'app/shared/event/event.service';\r\n\r\nexport type Id = string | null;\r\n\r\nexport interface EntidadeJson {\r\n  id: Id;\r\n}\r\n\r\nexport abstract class Entidade {\r\n  constructor(public id: Id) {}\r\n\r\n  protected abstract onChanges(changes: any): void;\r\n\r\n  public fromForm(form: FormGroup): void {\r\n    this.onChanges(form.getRawValue());\r\n  }\r\n\r\n  public subscribeFormChanges(\r\n    form: FormGroup,\r\n    shouldContinue: MonoTypeOperatorFunction<any> = takeWhile(() => true),\r\n    onChange?: (value: this) => void\r\n  ): Subscription {\r\n    return form.valueChanges.pipe(shouldContinue).subscribe((changes) => {\r\n      this.onChanges(changes);\r\n      if (onChange) onChange(this);\r\n    });\r\n  }\r\n}\r\n\r\nexport type EntidadeEventType = 'cadastrado' | 'atualizado' | 'removido';\r\n\r\nexport type EntidadeEventSource = 'client' | 'server';\r\n\r\nexport class EntidadeEvent<E extends Entidade> extends AbstractEvent<\r\n  EntidadeEventType\r\n> {\r\n  constructor(\r\n    public entidade: E,\r\n    public source: EntidadeEventSource,\r\n    type: EntidadeEventType\r\n  ) {\r\n    super(type);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "type": "Id",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "LookupErrorsMessages",
            "id": "interface-LookupErrorsMessages-e01289057576875b1c8b8b163c02eb08",
            "file": "src/app/shared/util/service.util.ts",
            "type": "interface",
            "sourceCode": "import {\r\n  Observable,\r\n  of,\r\n  isObservable,\r\n  BehaviorSubject,\r\n  combineLatest,\r\n  MonoTypeOperatorFunction,\r\n  Subscription,\r\n  throwError,\r\n  OperatorFunction,\r\n} from 'rxjs';\r\nimport { delay, take, map, withLatestFrom, mergeMap } from 'rxjs/operators';\r\nimport { environment } from 'environments/environment';\r\nimport { PoTableColumn, PoTableColumnSortType } from '@po-ui/ng-components';\r\n\r\nexport interface Page<T> {\r\n  items: T[];\r\n  hasNext: boolean;\r\n}\r\n\r\nexport class Pageable {\r\n  constructor(public page = 1, public pageSize = 20) {}\r\n\r\n  get offset(): number {\r\n    return this.page * this.pageSize - this.pageSize;\r\n  }\r\n\r\n  get endOffset(): number {\r\n    return this.offset + this.pageSize;\r\n  }\r\n\r\n  next(): Pageable {\r\n    return new Pageable(this.page + 1, this.pageSize);\r\n  }\r\n\r\n  apply<T = any>(items: T[]): T[] {\r\n    return items.slice(this.offset, this.endOffset);\r\n  }\r\n}\r\n\r\ninterface PoTableColumnSort {\r\n  column: PoTableColumn;\r\n  type: PoTableColumnSortType;\r\n}\r\n\r\ninterface SortFieldsOverride<Fields = string> {\r\n  [key: string]: Fields;\r\n}\r\n\r\nexport type SortFieldsExtractor = {\r\n  [field: string]: (item: any) => string;\r\n};\r\n\r\nexport class Sort<Fields = string> {\r\n  static fromOrderChange<F = string>(\r\n    { column, type }: PoTableColumnSort,\r\n    override: SortFieldsOverride<F> = {},\r\n    extractors: SortFieldsExtractor = {}\r\n  ): Sort<F> {\r\n    const prop = column.property as any;\r\n    return new Sort<F>(\r\n      override[prop] ?? prop,\r\n      type === PoTableColumnSortType.Ascending ? 'asc' : 'desc',\r\n      extractors\r\n    );\r\n  }\r\n\r\n  static fromExpression<F = string>(\r\n    expr: string,\r\n    extractors: SortFieldsExtractor = {}\r\n  ): Sort<F> {\r\n    const field = expr.replace(/^(\\+|\\-)/, '') as any;\r\n    return new Sort<F>(field, expr[0] === '+' ? 'asc' : 'desc', extractors);\r\n  }\r\n\r\n  constructor(\r\n    public field: Fields,\r\n    public direction: 'asc' | 'desc',\r\n    private extractors: SortFieldsExtractor = {}\r\n  ) {}\r\n\r\n  get expression(): string {\r\n    return `${this.direction === 'asc' ? '+' : '-'}${this.field}`;\r\n  }\r\n\r\n  get ascending(): boolean {\r\n    return this.direction === 'asc';\r\n  }\r\n\r\n  apply<T = any>(items: T[]): T[] {\r\n    return items.sort((a, b) => {\r\n      const f = this.field as any;\r\n      const va = this.extractors[f] ? this.extractors[f](a) : a[f];\r\n      const vb = this.extractors[f] ? this.extractors[f](b) : b[f];\r\n      if (va === vb) return 0;\r\n      else {\r\n        if (va > vb) return this.direction === 'asc' ? 1 : -1;\r\n        else return this.direction === 'asc' ? -1 : 1;\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function searchString(value?: string, filter = ''): boolean {\r\n  return (\r\n    filter === '' || value?.toUpperCase().indexOf(filter.toUpperCase()) >= 0\r\n  );\r\n}\r\n\r\nexport function searchOneOf(filter = '', values: string[]): boolean {\r\n  return !!values.find((value) => searchString(value, filter));\r\n}\r\n\r\nexport function simularDelay<T>(result: T | Observable<T>): Observable<T> {\r\n  const observable = isObservable(result) ? result : of(result);\r\n  if (environment.delaySimulado?.length === 2) {\r\n    const [min, max] = environment.delaySimulado;\r\n    return observable.pipe(\r\n      delay(Math.round(Math.random() * (max - min) + min))\r\n    );\r\n  }\r\n  return observable;\r\n}\r\n\r\nexport function filtrar<R = any, SortFields = any>(\r\n  values: any[],\r\n  page: Pageable,\r\n  sort: Sort<SortFields> | undefined,\r\n  predicate: (val: any) => boolean,\r\n  deserializer: (val: any) => R\r\n): Page<R> {\r\n  let filtrado = values.filter(predicate);\r\n  if (sort) filtrado = sort.apply(filtrado);\r\n  const items = page.apply(filtrado).map(deserializer);\r\n  return {\r\n    items,\r\n    hasNext: filtrado.length > page.offset + items.length,\r\n  };\r\n}\r\n\r\nexport interface PageState<T, F = string> {\r\n  items: T[];\r\n  hasNext: boolean;\r\n  loading: boolean;\r\n  sort?: Sort<F>;\r\n}\r\n\r\nexport class PageStateSubject<T, F = string> {\r\n  constructor(\r\n    private service: (\r\n      pageable: Pageable,\r\n      filter: string,\r\n      sort: Sort<F>\r\n    ) => Observable<Page<T>>,\r\n    private takeWhile: <R = any>() => MonoTypeOperatorFunction<R>\r\n  ) {\r\n    this.resultSubject.pipe(this.takeWhile()).subscribe(\r\n      () => this.loadingSubject.next(false),\r\n      () => this.loadingSubject.next(false)\r\n    );\r\n  }\r\n\r\n  private resultSubject = new BehaviorSubject<Page<T>>({\r\n    items: [],\r\n    hasNext: false,\r\n  });\r\n\r\n  private loadingSubject = new BehaviorSubject<boolean>(false);\r\n\r\n  private page = 1;\r\n  private pageSize = 20;\r\n  private filter = '';\r\n  private sort: Sort<F>;\r\n\r\n  setSort(sort: Sort<F>): void {\r\n    this.page = 1;\r\n    this.sort = sort;\r\n    this.load(true);\r\n  }\r\n\r\n  setFilter(filter: string): void {\r\n    this.page = 1;\r\n    this.filter = filter;\r\n    this.load(true);\r\n  }\r\n\r\n  nextPage(): void {\r\n    this.page++;\r\n    this.load();\r\n  }\r\n\r\n  load(reset = false): void {\r\n    this.loadingSubject.next(true);\r\n    this.service(new Pageable(this.page, this.pageSize), this.filter, this.sort)\r\n      .pipe(this.takeWhile(), take(1), withLatestFrom(this.resultSubject))\r\n      .subscribe(\r\n        ([result, current]) => {\r\n          this.resultSubject.next({\r\n            hasNext: result.hasNext,\r\n            items: reset ? result.items : [...current.items, ...result.items],\r\n          });\r\n        },\r\n        (error) => this.resultSubject.error(error)\r\n      );\r\n  }\r\n\r\n  asObservable(): Observable<PageState<T, F>> {\r\n    return combineLatest([this.resultSubject, this.loadingSubject]).pipe(\r\n      this.takeWhile(),\r\n      map(([result, loading]) => ({\r\n        ...result,\r\n        sort: this.sort,\r\n        loading,\r\n      }))\r\n    );\r\n  }\r\n\r\n  subscribe(\r\n    next: (state: PageState<T, F>) => void,\r\n    error?: (err: any) => void\r\n  ): Subscription {\r\n    return this.asObservable().subscribe(next, error);\r\n  }\r\n}\r\n\r\nexport interface LookupErrorsMessages {\r\n  notFound: string;\r\n  multipleFound: (length: number) => string;\r\n}\r\n\r\nexport function tryMapToUniqueResult<T = any>(\r\n  errors: LookupErrorsMessages,\r\n  predicate: (item: T) => boolean\r\n): OperatorFunction<T[], T> {\r\n  return mergeMap((res: T[]) => {\r\n    if (res.length === 1) return of(res[0]);\r\n    const prof = res.find(predicate);\r\n    if (prof) return of(prof);\r\n    return throwError(\r\n      new Error(\r\n        res.length === 0 ? errors.notFound : errors.multipleFound(res.length)\r\n      )\r\n    );\r\n  });\r\n}\r\n",
            "properties": [
                {
                    "name": "multipleFound",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 228
                },
                {
                    "name": "notFound",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 227
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Page",
            "id": "interface-Page-e01289057576875b1c8b8b163c02eb08",
            "file": "src/app/shared/util/service.util.ts",
            "type": "interface",
            "sourceCode": "import {\r\n  Observable,\r\n  of,\r\n  isObservable,\r\n  BehaviorSubject,\r\n  combineLatest,\r\n  MonoTypeOperatorFunction,\r\n  Subscription,\r\n  throwError,\r\n  OperatorFunction,\r\n} from 'rxjs';\r\nimport { delay, take, map, withLatestFrom, mergeMap } from 'rxjs/operators';\r\nimport { environment } from 'environments/environment';\r\nimport { PoTableColumn, PoTableColumnSortType } from '@po-ui/ng-components';\r\n\r\nexport interface Page<T> {\r\n  items: T[];\r\n  hasNext: boolean;\r\n}\r\n\r\nexport class Pageable {\r\n  constructor(public page = 1, public pageSize = 20) {}\r\n\r\n  get offset(): number {\r\n    return this.page * this.pageSize - this.pageSize;\r\n  }\r\n\r\n  get endOffset(): number {\r\n    return this.offset + this.pageSize;\r\n  }\r\n\r\n  next(): Pageable {\r\n    return new Pageable(this.page + 1, this.pageSize);\r\n  }\r\n\r\n  apply<T = any>(items: T[]): T[] {\r\n    return items.slice(this.offset, this.endOffset);\r\n  }\r\n}\r\n\r\ninterface PoTableColumnSort {\r\n  column: PoTableColumn;\r\n  type: PoTableColumnSortType;\r\n}\r\n\r\ninterface SortFieldsOverride<Fields = string> {\r\n  [key: string]: Fields;\r\n}\r\n\r\nexport type SortFieldsExtractor = {\r\n  [field: string]: (item: any) => string;\r\n};\r\n\r\nexport class Sort<Fields = string> {\r\n  static fromOrderChange<F = string>(\r\n    { column, type }: PoTableColumnSort,\r\n    override: SortFieldsOverride<F> = {},\r\n    extractors: SortFieldsExtractor = {}\r\n  ): Sort<F> {\r\n    const prop = column.property as any;\r\n    return new Sort<F>(\r\n      override[prop] ?? prop,\r\n      type === PoTableColumnSortType.Ascending ? 'asc' : 'desc',\r\n      extractors\r\n    );\r\n  }\r\n\r\n  static fromExpression<F = string>(\r\n    expr: string,\r\n    extractors: SortFieldsExtractor = {}\r\n  ): Sort<F> {\r\n    const field = expr.replace(/^(\\+|\\-)/, '') as any;\r\n    return new Sort<F>(field, expr[0] === '+' ? 'asc' : 'desc', extractors);\r\n  }\r\n\r\n  constructor(\r\n    public field: Fields,\r\n    public direction: 'asc' | 'desc',\r\n    private extractors: SortFieldsExtractor = {}\r\n  ) {}\r\n\r\n  get expression(): string {\r\n    return `${this.direction === 'asc' ? '+' : '-'}${this.field}`;\r\n  }\r\n\r\n  get ascending(): boolean {\r\n    return this.direction === 'asc';\r\n  }\r\n\r\n  apply<T = any>(items: T[]): T[] {\r\n    return items.sort((a, b) => {\r\n      const f = this.field as any;\r\n      const va = this.extractors[f] ? this.extractors[f](a) : a[f];\r\n      const vb = this.extractors[f] ? this.extractors[f](b) : b[f];\r\n      if (va === vb) return 0;\r\n      else {\r\n        if (va > vb) return this.direction === 'asc' ? 1 : -1;\r\n        else return this.direction === 'asc' ? -1 : 1;\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function searchString(value?: string, filter = ''): boolean {\r\n  return (\r\n    filter === '' || value?.toUpperCase().indexOf(filter.toUpperCase()) >= 0\r\n  );\r\n}\r\n\r\nexport function searchOneOf(filter = '', values: string[]): boolean {\r\n  return !!values.find((value) => searchString(value, filter));\r\n}\r\n\r\nexport function simularDelay<T>(result: T | Observable<T>): Observable<T> {\r\n  const observable = isObservable(result) ? result : of(result);\r\n  if (environment.delaySimulado?.length === 2) {\r\n    const [min, max] = environment.delaySimulado;\r\n    return observable.pipe(\r\n      delay(Math.round(Math.random() * (max - min) + min))\r\n    );\r\n  }\r\n  return observable;\r\n}\r\n\r\nexport function filtrar<R = any, SortFields = any>(\r\n  values: any[],\r\n  page: Pageable,\r\n  sort: Sort<SortFields> | undefined,\r\n  predicate: (val: any) => boolean,\r\n  deserializer: (val: any) => R\r\n): Page<R> {\r\n  let filtrado = values.filter(predicate);\r\n  if (sort) filtrado = sort.apply(filtrado);\r\n  const items = page.apply(filtrado).map(deserializer);\r\n  return {\r\n    items,\r\n    hasNext: filtrado.length > page.offset + items.length,\r\n  };\r\n}\r\n\r\nexport interface PageState<T, F = string> {\r\n  items: T[];\r\n  hasNext: boolean;\r\n  loading: boolean;\r\n  sort?: Sort<F>;\r\n}\r\n\r\nexport class PageStateSubject<T, F = string> {\r\n  constructor(\r\n    private service: (\r\n      pageable: Pageable,\r\n      filter: string,\r\n      sort: Sort<F>\r\n    ) => Observable<Page<T>>,\r\n    private takeWhile: <R = any>() => MonoTypeOperatorFunction<R>\r\n  ) {\r\n    this.resultSubject.pipe(this.takeWhile()).subscribe(\r\n      () => this.loadingSubject.next(false),\r\n      () => this.loadingSubject.next(false)\r\n    );\r\n  }\r\n\r\n  private resultSubject = new BehaviorSubject<Page<T>>({\r\n    items: [],\r\n    hasNext: false,\r\n  });\r\n\r\n  private loadingSubject = new BehaviorSubject<boolean>(false);\r\n\r\n  private page = 1;\r\n  private pageSize = 20;\r\n  private filter = '';\r\n  private sort: Sort<F>;\r\n\r\n  setSort(sort: Sort<F>): void {\r\n    this.page = 1;\r\n    this.sort = sort;\r\n    this.load(true);\r\n  }\r\n\r\n  setFilter(filter: string): void {\r\n    this.page = 1;\r\n    this.filter = filter;\r\n    this.load(true);\r\n  }\r\n\r\n  nextPage(): void {\r\n    this.page++;\r\n    this.load();\r\n  }\r\n\r\n  load(reset = false): void {\r\n    this.loadingSubject.next(true);\r\n    this.service(new Pageable(this.page, this.pageSize), this.filter, this.sort)\r\n      .pipe(this.takeWhile(), take(1), withLatestFrom(this.resultSubject))\r\n      .subscribe(\r\n        ([result, current]) => {\r\n          this.resultSubject.next({\r\n            hasNext: result.hasNext,\r\n            items: reset ? result.items : [...current.items, ...result.items],\r\n          });\r\n        },\r\n        (error) => this.resultSubject.error(error)\r\n      );\r\n  }\r\n\r\n  asObservable(): Observable<PageState<T, F>> {\r\n    return combineLatest([this.resultSubject, this.loadingSubject]).pipe(\r\n      this.takeWhile(),\r\n      map(([result, loading]) => ({\r\n        ...result,\r\n        sort: this.sort,\r\n        loading,\r\n      }))\r\n    );\r\n  }\r\n\r\n  subscribe(\r\n    next: (state: PageState<T, F>) => void,\r\n    error?: (err: any) => void\r\n  ): Subscription {\r\n    return this.asObservable().subscribe(next, error);\r\n  }\r\n}\r\n\r\nexport interface LookupErrorsMessages {\r\n  notFound: string;\r\n  multipleFound: (length: number) => string;\r\n}\r\n\r\nexport function tryMapToUniqueResult<T = any>(\r\n  errors: LookupErrorsMessages,\r\n  predicate: (item: T) => boolean\r\n): OperatorFunction<T[], T> {\r\n  return mergeMap((res: T[]) => {\r\n    if (res.length === 1) return of(res[0]);\r\n    const prof = res.find(predicate);\r\n    if (prof) return of(prof);\r\n    return throwError(\r\n      new Error(\r\n        res.length === 0 ? errors.notFound : errors.multipleFound(res.length)\r\n      )\r\n    );\r\n  });\r\n}\r\n",
            "properties": [
                {
                    "name": "hasNext",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "items",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "PageState",
            "id": "interface-PageState-e01289057576875b1c8b8b163c02eb08",
            "file": "src/app/shared/util/service.util.ts",
            "type": "interface",
            "sourceCode": "import {\r\n  Observable,\r\n  of,\r\n  isObservable,\r\n  BehaviorSubject,\r\n  combineLatest,\r\n  MonoTypeOperatorFunction,\r\n  Subscription,\r\n  throwError,\r\n  OperatorFunction,\r\n} from 'rxjs';\r\nimport { delay, take, map, withLatestFrom, mergeMap } from 'rxjs/operators';\r\nimport { environment } from 'environments/environment';\r\nimport { PoTableColumn, PoTableColumnSortType } from '@po-ui/ng-components';\r\n\r\nexport interface Page<T> {\r\n  items: T[];\r\n  hasNext: boolean;\r\n}\r\n\r\nexport class Pageable {\r\n  constructor(public page = 1, public pageSize = 20) {}\r\n\r\n  get offset(): number {\r\n    return this.page * this.pageSize - this.pageSize;\r\n  }\r\n\r\n  get endOffset(): number {\r\n    return this.offset + this.pageSize;\r\n  }\r\n\r\n  next(): Pageable {\r\n    return new Pageable(this.page + 1, this.pageSize);\r\n  }\r\n\r\n  apply<T = any>(items: T[]): T[] {\r\n    return items.slice(this.offset, this.endOffset);\r\n  }\r\n}\r\n\r\ninterface PoTableColumnSort {\r\n  column: PoTableColumn;\r\n  type: PoTableColumnSortType;\r\n}\r\n\r\ninterface SortFieldsOverride<Fields = string> {\r\n  [key: string]: Fields;\r\n}\r\n\r\nexport type SortFieldsExtractor = {\r\n  [field: string]: (item: any) => string;\r\n};\r\n\r\nexport class Sort<Fields = string> {\r\n  static fromOrderChange<F = string>(\r\n    { column, type }: PoTableColumnSort,\r\n    override: SortFieldsOverride<F> = {},\r\n    extractors: SortFieldsExtractor = {}\r\n  ): Sort<F> {\r\n    const prop = column.property as any;\r\n    return new Sort<F>(\r\n      override[prop] ?? prop,\r\n      type === PoTableColumnSortType.Ascending ? 'asc' : 'desc',\r\n      extractors\r\n    );\r\n  }\r\n\r\n  static fromExpression<F = string>(\r\n    expr: string,\r\n    extractors: SortFieldsExtractor = {}\r\n  ): Sort<F> {\r\n    const field = expr.replace(/^(\\+|\\-)/, '') as any;\r\n    return new Sort<F>(field, expr[0] === '+' ? 'asc' : 'desc', extractors);\r\n  }\r\n\r\n  constructor(\r\n    public field: Fields,\r\n    public direction: 'asc' | 'desc',\r\n    private extractors: SortFieldsExtractor = {}\r\n  ) {}\r\n\r\n  get expression(): string {\r\n    return `${this.direction === 'asc' ? '+' : '-'}${this.field}`;\r\n  }\r\n\r\n  get ascending(): boolean {\r\n    return this.direction === 'asc';\r\n  }\r\n\r\n  apply<T = any>(items: T[]): T[] {\r\n    return items.sort((a, b) => {\r\n      const f = this.field as any;\r\n      const va = this.extractors[f] ? this.extractors[f](a) : a[f];\r\n      const vb = this.extractors[f] ? this.extractors[f](b) : b[f];\r\n      if (va === vb) return 0;\r\n      else {\r\n        if (va > vb) return this.direction === 'asc' ? 1 : -1;\r\n        else return this.direction === 'asc' ? -1 : 1;\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function searchString(value?: string, filter = ''): boolean {\r\n  return (\r\n    filter === '' || value?.toUpperCase().indexOf(filter.toUpperCase()) >= 0\r\n  );\r\n}\r\n\r\nexport function searchOneOf(filter = '', values: string[]): boolean {\r\n  return !!values.find((value) => searchString(value, filter));\r\n}\r\n\r\nexport function simularDelay<T>(result: T | Observable<T>): Observable<T> {\r\n  const observable = isObservable(result) ? result : of(result);\r\n  if (environment.delaySimulado?.length === 2) {\r\n    const [min, max] = environment.delaySimulado;\r\n    return observable.pipe(\r\n      delay(Math.round(Math.random() * (max - min) + min))\r\n    );\r\n  }\r\n  return observable;\r\n}\r\n\r\nexport function filtrar<R = any, SortFields = any>(\r\n  values: any[],\r\n  page: Pageable,\r\n  sort: Sort<SortFields> | undefined,\r\n  predicate: (val: any) => boolean,\r\n  deserializer: (val: any) => R\r\n): Page<R> {\r\n  let filtrado = values.filter(predicate);\r\n  if (sort) filtrado = sort.apply(filtrado);\r\n  const items = page.apply(filtrado).map(deserializer);\r\n  return {\r\n    items,\r\n    hasNext: filtrado.length > page.offset + items.length,\r\n  };\r\n}\r\n\r\nexport interface PageState<T, F = string> {\r\n  items: T[];\r\n  hasNext: boolean;\r\n  loading: boolean;\r\n  sort?: Sort<F>;\r\n}\r\n\r\nexport class PageStateSubject<T, F = string> {\r\n  constructor(\r\n    private service: (\r\n      pageable: Pageable,\r\n      filter: string,\r\n      sort: Sort<F>\r\n    ) => Observable<Page<T>>,\r\n    private takeWhile: <R = any>() => MonoTypeOperatorFunction<R>\r\n  ) {\r\n    this.resultSubject.pipe(this.takeWhile()).subscribe(\r\n      () => this.loadingSubject.next(false),\r\n      () => this.loadingSubject.next(false)\r\n    );\r\n  }\r\n\r\n  private resultSubject = new BehaviorSubject<Page<T>>({\r\n    items: [],\r\n    hasNext: false,\r\n  });\r\n\r\n  private loadingSubject = new BehaviorSubject<boolean>(false);\r\n\r\n  private page = 1;\r\n  private pageSize = 20;\r\n  private filter = '';\r\n  private sort: Sort<F>;\r\n\r\n  setSort(sort: Sort<F>): void {\r\n    this.page = 1;\r\n    this.sort = sort;\r\n    this.load(true);\r\n  }\r\n\r\n  setFilter(filter: string): void {\r\n    this.page = 1;\r\n    this.filter = filter;\r\n    this.load(true);\r\n  }\r\n\r\n  nextPage(): void {\r\n    this.page++;\r\n    this.load();\r\n  }\r\n\r\n  load(reset = false): void {\r\n    this.loadingSubject.next(true);\r\n    this.service(new Pageable(this.page, this.pageSize), this.filter, this.sort)\r\n      .pipe(this.takeWhile(), take(1), withLatestFrom(this.resultSubject))\r\n      .subscribe(\r\n        ([result, current]) => {\r\n          this.resultSubject.next({\r\n            hasNext: result.hasNext,\r\n            items: reset ? result.items : [...current.items, ...result.items],\r\n          });\r\n        },\r\n        (error) => this.resultSubject.error(error)\r\n      );\r\n  }\r\n\r\n  asObservable(): Observable<PageState<T, F>> {\r\n    return combineLatest([this.resultSubject, this.loadingSubject]).pipe(\r\n      this.takeWhile(),\r\n      map(([result, loading]) => ({\r\n        ...result,\r\n        sort: this.sort,\r\n        loading,\r\n      }))\r\n    );\r\n  }\r\n\r\n  subscribe(\r\n    next: (state: PageState<T, F>) => void,\r\n    error?: (err: any) => void\r\n  ): Subscription {\r\n    return this.asObservable().subscribe(next, error);\r\n  }\r\n}\r\n\r\nexport interface LookupErrorsMessages {\r\n  notFound: string;\r\n  multipleFound: (length: number) => string;\r\n}\r\n\r\nexport function tryMapToUniqueResult<T = any>(\r\n  errors: LookupErrorsMessages,\r\n  predicate: (item: T) => boolean\r\n): OperatorFunction<T[], T> {\r\n  return mergeMap((res: T[]) => {\r\n    if (res.length === 1) return of(res[0]);\r\n    const prof = res.find(predicate);\r\n    if (prof) return of(prof);\r\n    return throwError(\r\n      new Error(\r\n        res.length === 0 ? errors.notFound : errors.multipleFound(res.length)\r\n      )\r\n    );\r\n  });\r\n}\r\n",
            "properties": [
                {
                    "name": "hasNext",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 143
                },
                {
                    "name": "items",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 142
                },
                {
                    "name": "loading",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 144
                },
                {
                    "name": "sort",
                    "type": "Sort<F>",
                    "optional": true,
                    "description": "",
                    "line": 145
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "PessoaJson",
            "id": "interface-PessoaJson-fc1034571985a333dde3fe511edeb92d",
            "file": "src/app/domain/pessoa/pessoa.ts",
            "type": "interface",
            "sourceCode": "import { Validators, FormBuilder, FormGroup } from '@angular/forms';\r\nimport { Entidade, Id, EntidadeJson } from '../entidade';\r\nimport { CustomValidators, NotTakenService } from 'app/shared/validators';\r\nimport { of } from 'rxjs';\r\nimport { format as formatCpf } from '@fnando/cpf';\r\nimport { Predicate } from '@angular/core';\r\n\r\nconst DEFAULT_NOT_TAKEN_SERVICE: NotTakenService = () => of(true);\r\n\r\nexport type PessoaSortFields = 'nome' | 'email' | 'cpf';\r\n\r\nexport interface CpfNotTakenJson {\r\n  id: Id;\r\n  cpf: string;\r\n}\r\n\r\nexport interface EmailNotTakenJson {\r\n  id: Id;\r\n  email: string;\r\n}\r\n\r\nexport interface PessoaJson extends EntidadeJson {\r\n  nome: string;\r\n  email: string;\r\n  cpf: string;\r\n}\r\n\r\nexport abstract class Pessoa extends Entidade {\r\n  public static nomeOuCpfPredicate<R extends Pessoa>(\r\n    query: string\r\n  ): Predicate<R> {\r\n    return ({ nome, cpf }) =>\r\n      nome === query || cpf === query.replace(/(\\.|\\-)/g, '');\r\n  }\r\n\r\n  constructor(id: Id, public nome = '', public email = '', public cpf = '') {\r\n    super(id);\r\n  }\r\n\r\n  get cpfFormatado(): string {\r\n    return formatCpf(this.cpf);\r\n  }\r\n\r\n  protected onChanges({ nome, email, cpf }: any): void {\r\n    this.nome = nome;\r\n    this.email = email;\r\n    this.cpf = cpf;\r\n  }\r\n\r\n  protected getFormControls(\r\n    emailNotTaken: NotTakenService,\r\n    cpfNotTaken: NotTakenService\r\n  ): any {\r\n    return {\r\n      nome: [this.nome, [Validators.required, Validators.maxLength(255)]],\r\n      email: [\r\n        this.email,\r\n        [\r\n          Validators.required,\r\n          Validators.maxLength(255),\r\n          CustomValidators.email,\r\n        ],\r\n        CustomValidators.notTakenValidator(emailNotTaken, 'emailTaken'),\r\n      ],\r\n      cpf: [\r\n        this.cpf,\r\n        [\r\n          Validators.required,\r\n          Validators.minLength(11),\r\n          Validators.maxLength(11),\r\n          CustomValidators.cpf,\r\n        ],\r\n        CustomValidators.notTakenValidator(cpfNotTaken, 'cpfTaken'),\r\n      ],\r\n    };\r\n  }\r\n\r\n  public criarForm(\r\n    builder: FormBuilder,\r\n    emailNotTaken = DEFAULT_NOT_TAKEN_SERVICE,\r\n    cpfNotTaken = DEFAULT_NOT_TAKEN_SERVICE\r\n  ): FormGroup {\r\n    return builder.group(this.getFormControls(emailNotTaken, cpfNotTaken));\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "cpf",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "nome",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "EntidadeJson"
        },
        {
            "name": "PoTableColumnSort",
            "id": "interface-PoTableColumnSort-e01289057576875b1c8b8b163c02eb08",
            "file": "src/app/shared/util/service.util.ts",
            "type": "interface",
            "sourceCode": "import {\r\n  Observable,\r\n  of,\r\n  isObservable,\r\n  BehaviorSubject,\r\n  combineLatest,\r\n  MonoTypeOperatorFunction,\r\n  Subscription,\r\n  throwError,\r\n  OperatorFunction,\r\n} from 'rxjs';\r\nimport { delay, take, map, withLatestFrom, mergeMap } from 'rxjs/operators';\r\nimport { environment } from 'environments/environment';\r\nimport { PoTableColumn, PoTableColumnSortType } from '@po-ui/ng-components';\r\n\r\nexport interface Page<T> {\r\n  items: T[];\r\n  hasNext: boolean;\r\n}\r\n\r\nexport class Pageable {\r\n  constructor(public page = 1, public pageSize = 20) {}\r\n\r\n  get offset(): number {\r\n    return this.page * this.pageSize - this.pageSize;\r\n  }\r\n\r\n  get endOffset(): number {\r\n    return this.offset + this.pageSize;\r\n  }\r\n\r\n  next(): Pageable {\r\n    return new Pageable(this.page + 1, this.pageSize);\r\n  }\r\n\r\n  apply<T = any>(items: T[]): T[] {\r\n    return items.slice(this.offset, this.endOffset);\r\n  }\r\n}\r\n\r\ninterface PoTableColumnSort {\r\n  column: PoTableColumn;\r\n  type: PoTableColumnSortType;\r\n}\r\n\r\ninterface SortFieldsOverride<Fields = string> {\r\n  [key: string]: Fields;\r\n}\r\n\r\nexport type SortFieldsExtractor = {\r\n  [field: string]: (item: any) => string;\r\n};\r\n\r\nexport class Sort<Fields = string> {\r\n  static fromOrderChange<F = string>(\r\n    { column, type }: PoTableColumnSort,\r\n    override: SortFieldsOverride<F> = {},\r\n    extractors: SortFieldsExtractor = {}\r\n  ): Sort<F> {\r\n    const prop = column.property as any;\r\n    return new Sort<F>(\r\n      override[prop] ?? prop,\r\n      type === PoTableColumnSortType.Ascending ? 'asc' : 'desc',\r\n      extractors\r\n    );\r\n  }\r\n\r\n  static fromExpression<F = string>(\r\n    expr: string,\r\n    extractors: SortFieldsExtractor = {}\r\n  ): Sort<F> {\r\n    const field = expr.replace(/^(\\+|\\-)/, '') as any;\r\n    return new Sort<F>(field, expr[0] === '+' ? 'asc' : 'desc', extractors);\r\n  }\r\n\r\n  constructor(\r\n    public field: Fields,\r\n    public direction: 'asc' | 'desc',\r\n    private extractors: SortFieldsExtractor = {}\r\n  ) {}\r\n\r\n  get expression(): string {\r\n    return `${this.direction === 'asc' ? '+' : '-'}${this.field}`;\r\n  }\r\n\r\n  get ascending(): boolean {\r\n    return this.direction === 'asc';\r\n  }\r\n\r\n  apply<T = any>(items: T[]): T[] {\r\n    return items.sort((a, b) => {\r\n      const f = this.field as any;\r\n      const va = this.extractors[f] ? this.extractors[f](a) : a[f];\r\n      const vb = this.extractors[f] ? this.extractors[f](b) : b[f];\r\n      if (va === vb) return 0;\r\n      else {\r\n        if (va > vb) return this.direction === 'asc' ? 1 : -1;\r\n        else return this.direction === 'asc' ? -1 : 1;\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function searchString(value?: string, filter = ''): boolean {\r\n  return (\r\n    filter === '' || value?.toUpperCase().indexOf(filter.toUpperCase()) >= 0\r\n  );\r\n}\r\n\r\nexport function searchOneOf(filter = '', values: string[]): boolean {\r\n  return !!values.find((value) => searchString(value, filter));\r\n}\r\n\r\nexport function simularDelay<T>(result: T | Observable<T>): Observable<T> {\r\n  const observable = isObservable(result) ? result : of(result);\r\n  if (environment.delaySimulado?.length === 2) {\r\n    const [min, max] = environment.delaySimulado;\r\n    return observable.pipe(\r\n      delay(Math.round(Math.random() * (max - min) + min))\r\n    );\r\n  }\r\n  return observable;\r\n}\r\n\r\nexport function filtrar<R = any, SortFields = any>(\r\n  values: any[],\r\n  page: Pageable,\r\n  sort: Sort<SortFields> | undefined,\r\n  predicate: (val: any) => boolean,\r\n  deserializer: (val: any) => R\r\n): Page<R> {\r\n  let filtrado = values.filter(predicate);\r\n  if (sort) filtrado = sort.apply(filtrado);\r\n  const items = page.apply(filtrado).map(deserializer);\r\n  return {\r\n    items,\r\n    hasNext: filtrado.length > page.offset + items.length,\r\n  };\r\n}\r\n\r\nexport interface PageState<T, F = string> {\r\n  items: T[];\r\n  hasNext: boolean;\r\n  loading: boolean;\r\n  sort?: Sort<F>;\r\n}\r\n\r\nexport class PageStateSubject<T, F = string> {\r\n  constructor(\r\n    private service: (\r\n      pageable: Pageable,\r\n      filter: string,\r\n      sort: Sort<F>\r\n    ) => Observable<Page<T>>,\r\n    private takeWhile: <R = any>() => MonoTypeOperatorFunction<R>\r\n  ) {\r\n    this.resultSubject.pipe(this.takeWhile()).subscribe(\r\n      () => this.loadingSubject.next(false),\r\n      () => this.loadingSubject.next(false)\r\n    );\r\n  }\r\n\r\n  private resultSubject = new BehaviorSubject<Page<T>>({\r\n    items: [],\r\n    hasNext: false,\r\n  });\r\n\r\n  private loadingSubject = new BehaviorSubject<boolean>(false);\r\n\r\n  private page = 1;\r\n  private pageSize = 20;\r\n  private filter = '';\r\n  private sort: Sort<F>;\r\n\r\n  setSort(sort: Sort<F>): void {\r\n    this.page = 1;\r\n    this.sort = sort;\r\n    this.load(true);\r\n  }\r\n\r\n  setFilter(filter: string): void {\r\n    this.page = 1;\r\n    this.filter = filter;\r\n    this.load(true);\r\n  }\r\n\r\n  nextPage(): void {\r\n    this.page++;\r\n    this.load();\r\n  }\r\n\r\n  load(reset = false): void {\r\n    this.loadingSubject.next(true);\r\n    this.service(new Pageable(this.page, this.pageSize), this.filter, this.sort)\r\n      .pipe(this.takeWhile(), take(1), withLatestFrom(this.resultSubject))\r\n      .subscribe(\r\n        ([result, current]) => {\r\n          this.resultSubject.next({\r\n            hasNext: result.hasNext,\r\n            items: reset ? result.items : [...current.items, ...result.items],\r\n          });\r\n        },\r\n        (error) => this.resultSubject.error(error)\r\n      );\r\n  }\r\n\r\n  asObservable(): Observable<PageState<T, F>> {\r\n    return combineLatest([this.resultSubject, this.loadingSubject]).pipe(\r\n      this.takeWhile(),\r\n      map(([result, loading]) => ({\r\n        ...result,\r\n        sort: this.sort,\r\n        loading,\r\n      }))\r\n    );\r\n  }\r\n\r\n  subscribe(\r\n    next: (state: PageState<T, F>) => void,\r\n    error?: (err: any) => void\r\n  ): Subscription {\r\n    return this.asObservable().subscribe(next, error);\r\n  }\r\n}\r\n\r\nexport interface LookupErrorsMessages {\r\n  notFound: string;\r\n  multipleFound: (length: number) => string;\r\n}\r\n\r\nexport function tryMapToUniqueResult<T = any>(\r\n  errors: LookupErrorsMessages,\r\n  predicate: (item: T) => boolean\r\n): OperatorFunction<T[], T> {\r\n  return mergeMap((res: T[]) => {\r\n    if (res.length === 1) return of(res[0]);\r\n    const prof = res.find(predicate);\r\n    if (prof) return of(prof);\r\n    return throwError(\r\n      new Error(\r\n        res.length === 0 ? errors.notFound : errors.multipleFound(res.length)\r\n      )\r\n    );\r\n  });\r\n}\r\n",
            "properties": [
                {
                    "name": "column",
                    "type": "PoTableColumn",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "type",
                    "type": "PoTableColumnSortType",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ProfessorJson",
            "id": "interface-ProfessorJson-4184c5fe945ca1aca77db9a1834fb220",
            "file": "src/app/domain/pessoa/professor/professor.ts",
            "type": "interface",
            "sourceCode": "import { AbstractControl, Validators } from '@angular/forms';\r\nimport { Id, EntidadeEvent } from 'app/domain/entidade';\r\nimport { Pessoa, PessoaJson, PessoaSortFields } from '../pessoa';\r\nimport { NotTakenService } from 'app/shared/validators';\r\nimport { Predicate } from '@angular/core';\r\n\r\nexport class ProfessorEvent extends EntidadeEvent<Professor> {}\r\n\r\nexport interface ProfessorJson extends PessoaJson {\r\n  titulacao: string;\r\n}\r\n\r\nexport type ProfessorSortFields = PessoaSortFields | 'titulacao';\r\n\r\nexport enum Titulacao {\r\n  MESTRE = 'Mestre',\r\n  DOUTOR = 'Doutor',\r\n  PHD = 'PHD',\r\n}\r\n\r\nexport class Professor extends Pessoa {\r\n  public static fromJson({ id, nome, email, cpf, titulacao }: any): Professor {\r\n    return new Professor(id, nome, email, cpf, titulacao);\r\n  }\r\n\r\n  constructor(\r\n    id: Id = null,\r\n    nome = '',\r\n    email = '',\r\n    cpf = '',\r\n    public titulacao: Titulacao | '' = ''\r\n  ) {\r\n    super(id, nome, email, cpf);\r\n  }\r\n\r\n  protected onChanges({ titulacao, ...pessoa }: any): void {\r\n    super.onChanges(pessoa);\r\n    this.titulacao = titulacao;\r\n  }\r\n\r\n  protected getFormControls(\r\n    emailNotTaken: NotTakenService,\r\n    cpfNotTaken: NotTakenService\r\n  ): any {\r\n    return {\r\n      ...super.getFormControls(emailNotTaken, cpfNotTaken),\r\n      titulacao: [\r\n        this.titulacao,\r\n        [Validators.required, this.titulacaoValidator],\r\n      ],\r\n    };\r\n  }\r\n\r\n  private titulacaoValidator(\r\n    control: AbstractControl\r\n  ): { titulacao: boolean } | null {\r\n    const value: string = control.value;\r\n\r\n    if (value)\r\n      switch (value) {\r\n        case Titulacao.DOUTOR:\r\n        case Titulacao.MESTRE:\r\n        case Titulacao.PHD:\r\n          break;\r\n        default:\r\n          return { titulacao: true };\r\n      }\r\n    return null;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "titulacao",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "PessoaJson"
        },
        {
            "name": "SortFieldsOverride",
            "id": "interface-SortFieldsOverride-e01289057576875b1c8b8b163c02eb08",
            "file": "src/app/shared/util/service.util.ts",
            "type": "interface",
            "sourceCode": "import {\r\n  Observable,\r\n  of,\r\n  isObservable,\r\n  BehaviorSubject,\r\n  combineLatest,\r\n  MonoTypeOperatorFunction,\r\n  Subscription,\r\n  throwError,\r\n  OperatorFunction,\r\n} from 'rxjs';\r\nimport { delay, take, map, withLatestFrom, mergeMap } from 'rxjs/operators';\r\nimport { environment } from 'environments/environment';\r\nimport { PoTableColumn, PoTableColumnSortType } from '@po-ui/ng-components';\r\n\r\nexport interface Page<T> {\r\n  items: T[];\r\n  hasNext: boolean;\r\n}\r\n\r\nexport class Pageable {\r\n  constructor(public page = 1, public pageSize = 20) {}\r\n\r\n  get offset(): number {\r\n    return this.page * this.pageSize - this.pageSize;\r\n  }\r\n\r\n  get endOffset(): number {\r\n    return this.offset + this.pageSize;\r\n  }\r\n\r\n  next(): Pageable {\r\n    return new Pageable(this.page + 1, this.pageSize);\r\n  }\r\n\r\n  apply<T = any>(items: T[]): T[] {\r\n    return items.slice(this.offset, this.endOffset);\r\n  }\r\n}\r\n\r\ninterface PoTableColumnSort {\r\n  column: PoTableColumn;\r\n  type: PoTableColumnSortType;\r\n}\r\n\r\ninterface SortFieldsOverride<Fields = string> {\r\n  [key: string]: Fields;\r\n}\r\n\r\nexport type SortFieldsExtractor = {\r\n  [field: string]: (item: any) => string;\r\n};\r\n\r\nexport class Sort<Fields = string> {\r\n  static fromOrderChange<F = string>(\r\n    { column, type }: PoTableColumnSort,\r\n    override: SortFieldsOverride<F> = {},\r\n    extractors: SortFieldsExtractor = {}\r\n  ): Sort<F> {\r\n    const prop = column.property as any;\r\n    return new Sort<F>(\r\n      override[prop] ?? prop,\r\n      type === PoTableColumnSortType.Ascending ? 'asc' : 'desc',\r\n      extractors\r\n    );\r\n  }\r\n\r\n  static fromExpression<F = string>(\r\n    expr: string,\r\n    extractors: SortFieldsExtractor = {}\r\n  ): Sort<F> {\r\n    const field = expr.replace(/^(\\+|\\-)/, '') as any;\r\n    return new Sort<F>(field, expr[0] === '+' ? 'asc' : 'desc', extractors);\r\n  }\r\n\r\n  constructor(\r\n    public field: Fields,\r\n    public direction: 'asc' | 'desc',\r\n    private extractors: SortFieldsExtractor = {}\r\n  ) {}\r\n\r\n  get expression(): string {\r\n    return `${this.direction === 'asc' ? '+' : '-'}${this.field}`;\r\n  }\r\n\r\n  get ascending(): boolean {\r\n    return this.direction === 'asc';\r\n  }\r\n\r\n  apply<T = any>(items: T[]): T[] {\r\n    return items.sort((a, b) => {\r\n      const f = this.field as any;\r\n      const va = this.extractors[f] ? this.extractors[f](a) : a[f];\r\n      const vb = this.extractors[f] ? this.extractors[f](b) : b[f];\r\n      if (va === vb) return 0;\r\n      else {\r\n        if (va > vb) return this.direction === 'asc' ? 1 : -1;\r\n        else return this.direction === 'asc' ? -1 : 1;\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function searchString(value?: string, filter = ''): boolean {\r\n  return (\r\n    filter === '' || value?.toUpperCase().indexOf(filter.toUpperCase()) >= 0\r\n  );\r\n}\r\n\r\nexport function searchOneOf(filter = '', values: string[]): boolean {\r\n  return !!values.find((value) => searchString(value, filter));\r\n}\r\n\r\nexport function simularDelay<T>(result: T | Observable<T>): Observable<T> {\r\n  const observable = isObservable(result) ? result : of(result);\r\n  if (environment.delaySimulado?.length === 2) {\r\n    const [min, max] = environment.delaySimulado;\r\n    return observable.pipe(\r\n      delay(Math.round(Math.random() * (max - min) + min))\r\n    );\r\n  }\r\n  return observable;\r\n}\r\n\r\nexport function filtrar<R = any, SortFields = any>(\r\n  values: any[],\r\n  page: Pageable,\r\n  sort: Sort<SortFields> | undefined,\r\n  predicate: (val: any) => boolean,\r\n  deserializer: (val: any) => R\r\n): Page<R> {\r\n  let filtrado = values.filter(predicate);\r\n  if (sort) filtrado = sort.apply(filtrado);\r\n  const items = page.apply(filtrado).map(deserializer);\r\n  return {\r\n    items,\r\n    hasNext: filtrado.length > page.offset + items.length,\r\n  };\r\n}\r\n\r\nexport interface PageState<T, F = string> {\r\n  items: T[];\r\n  hasNext: boolean;\r\n  loading: boolean;\r\n  sort?: Sort<F>;\r\n}\r\n\r\nexport class PageStateSubject<T, F = string> {\r\n  constructor(\r\n    private service: (\r\n      pageable: Pageable,\r\n      filter: string,\r\n      sort: Sort<F>\r\n    ) => Observable<Page<T>>,\r\n    private takeWhile: <R = any>() => MonoTypeOperatorFunction<R>\r\n  ) {\r\n    this.resultSubject.pipe(this.takeWhile()).subscribe(\r\n      () => this.loadingSubject.next(false),\r\n      () => this.loadingSubject.next(false)\r\n    );\r\n  }\r\n\r\n  private resultSubject = new BehaviorSubject<Page<T>>({\r\n    items: [],\r\n    hasNext: false,\r\n  });\r\n\r\n  private loadingSubject = new BehaviorSubject<boolean>(false);\r\n\r\n  private page = 1;\r\n  private pageSize = 20;\r\n  private filter = '';\r\n  private sort: Sort<F>;\r\n\r\n  setSort(sort: Sort<F>): void {\r\n    this.page = 1;\r\n    this.sort = sort;\r\n    this.load(true);\r\n  }\r\n\r\n  setFilter(filter: string): void {\r\n    this.page = 1;\r\n    this.filter = filter;\r\n    this.load(true);\r\n  }\r\n\r\n  nextPage(): void {\r\n    this.page++;\r\n    this.load();\r\n  }\r\n\r\n  load(reset = false): void {\r\n    this.loadingSubject.next(true);\r\n    this.service(new Pageable(this.page, this.pageSize), this.filter, this.sort)\r\n      .pipe(this.takeWhile(), take(1), withLatestFrom(this.resultSubject))\r\n      .subscribe(\r\n        ([result, current]) => {\r\n          this.resultSubject.next({\r\n            hasNext: result.hasNext,\r\n            items: reset ? result.items : [...current.items, ...result.items],\r\n          });\r\n        },\r\n        (error) => this.resultSubject.error(error)\r\n      );\r\n  }\r\n\r\n  asObservable(): Observable<PageState<T, F>> {\r\n    return combineLatest([this.resultSubject, this.loadingSubject]).pipe(\r\n      this.takeWhile(),\r\n      map(([result, loading]) => ({\r\n        ...result,\r\n        sort: this.sort,\r\n        loading,\r\n      }))\r\n    );\r\n  }\r\n\r\n  subscribe(\r\n    next: (state: PageState<T, F>) => void,\r\n    error?: (err: any) => void\r\n  ): Subscription {\r\n    return this.asObservable().subscribe(next, error);\r\n  }\r\n}\r\n\r\nexport interface LookupErrorsMessages {\r\n  notFound: string;\r\n  multipleFound: (length: number) => string;\r\n}\r\n\r\nexport function tryMapToUniqueResult<T = any>(\r\n  errors: LookupErrorsMessages,\r\n  predicate: (item: T) => boolean\r\n): OperatorFunction<T[], T> {\r\n  return mergeMap((res: T[]) => {\r\n    if (res.length === 1) return of(res[0]);\r\n    const prof = res.find(predicate);\r\n    if (prof) return of(prof);\r\n    return throwError(\r\n      new Error(\r\n        res.length === 0 ? errors.notFound : errors.multipleFound(res.length)\r\n      )\r\n    );\r\n  });\r\n}\r\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-e01289057576875b1c8b8b163c02eb08",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "returnType": "Fields",
                    "line": 46
                }
            ],
            "kind": 159,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AlunoService",
            "id": "injectable-AlunoService-5d8b870ea2e59b5973b69836668c5586",
            "file": "src/app/domain/pessoa/aluno/aluno.service.ts",
            "properties": [
                {
                    "name": "endpoints",
                    "defaultValue": "{\r\n    core: endpoints.core.v1.alunos,\r\n    query: endpoints.query.v1.alunos,\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "fromJson",
                    "defaultValue": "Aluno.fromJson",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "lookupErrors",
                    "type": "LookupErrorsMessages",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "inheritance": {
                        "file": "PessoaService"
                    }
                },
                {
                    "name": "endpoints",
                    "type": "Endpoints",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "inheritance": {
                        "file": "PessoaService"
                    }
                },
                {
                    "name": "endpoints",
                    "type": "Endpoints",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "inheritance": {
                        "file": "EntidadeService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "createEvent",
                    "args": [
                        {
                            "name": "aluno",
                            "type": ""
                        },
                        {
                            "name": "tipo",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "AlunoEvent",
                    "typeParameters": [],
                    "line": 28,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "aluno",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tipo",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "cpfNotTaken",
                    "args": [
                        {
                            "name": "data",
                            "type": "CpfNotTakenJson"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "CpfNotTakenJson",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PessoaService"
                    }
                },
                {
                    "name": "emailNotTaken",
                    "args": [
                        {
                            "name": "data",
                            "type": "EmailNotTakenJson"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "EmailNotTakenJson",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PessoaService"
                    }
                },
                {
                    "name": "lookup",
                    "args": [
                        {
                            "name": "query",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PessoaService"
                    }
                },
                {
                    "name": "createEvent",
                    "args": [
                        {
                            "name": "entidade",
                            "type": "E"
                        },
                        {
                            "name": "eventType",
                            "type": "EntidadeEventType"
                        }
                    ],
                    "optional": false,
                    "returnType": "EntidadeEvent<E>",
                    "typeParameters": [],
                    "line": 41,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "entidade",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "eventType",
                            "type": "EntidadeEventType",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PessoaService"
                    }
                },
                {
                    "name": "filtrar",
                    "args": [
                        {
                            "type": "Pageable"
                        },
                        {
                            "name": "filtro",
                            "type": "string",
                            "defaultValue": "''"
                        },
                        {
                            "name": "sort",
                            "type": "Sort<SF>",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Page<E>>",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "type": "Pageable",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filtro",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sort",
                            "type": "Sort<SF>",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PessoaService"
                    }
                },
                {
                    "name": "fromJson",
                    "args": [
                        {
                            "name": "json",
                            "type": "J"
                        }
                    ],
                    "optional": false,
                    "returnType": "E",
                    "typeParameters": [],
                    "line": 39,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "json",
                            "type": "J",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PessoaService"
                    }
                },
                {
                    "name": "recuperarPorId",
                    "args": [
                        {
                            "name": "id",
                            "type": "Id"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<E>",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "Id",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PessoaService"
                    }
                },
                {
                    "name": "salvar",
                    "args": [
                        {
                            "name": "entidade",
                            "type": "E"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<E>",
                    "typeParameters": [],
                    "line": 79,
                    "jsdoctags": [
                        {
                            "name": "entidade",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PessoaService"
                    }
                },
                {
                    "name": "toJson",
                    "args": [
                        {
                            "name": "entidade",
                            "type": "E"
                        }
                    ],
                    "optional": false,
                    "returnType": "J",
                    "typeParameters": [],
                    "line": 46,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "entidade",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PessoaService"
                    }
                },
                {
                    "name": "createEvent",
                    "args": [
                        {
                            "name": "entidade",
                            "type": "E"
                        },
                        {
                            "name": "eventType",
                            "type": "EntidadeEventType"
                        }
                    ],
                    "optional": false,
                    "returnType": "EntidadeEvent<E>",
                    "typeParameters": [],
                    "line": 41,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "entidade",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "eventType",
                            "type": "EntidadeEventType",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "EntidadeService"
                    }
                },
                {
                    "name": "filtrar",
                    "args": [
                        {
                            "type": "Pageable"
                        },
                        {
                            "name": "filtro",
                            "type": "string",
                            "defaultValue": "''"
                        },
                        {
                            "name": "sort",
                            "type": "Sort<SF>",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Page<E>>",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "type": "Pageable",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filtro",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sort",
                            "type": "Sort<SF>",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "EntidadeService"
                    }
                },
                {
                    "name": "fromJson",
                    "args": [
                        {
                            "name": "json",
                            "type": "J"
                        }
                    ],
                    "optional": false,
                    "returnType": "E",
                    "typeParameters": [],
                    "line": 39,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "json",
                            "type": "J",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "EntidadeService"
                    }
                },
                {
                    "name": "recuperarPorId",
                    "args": [
                        {
                            "name": "id",
                            "type": "Id"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<E>",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "Id",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "EntidadeService"
                    }
                },
                {
                    "name": "salvar",
                    "args": [
                        {
                            "name": "entidade",
                            "type": "E"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<E>",
                    "typeParameters": [],
                    "line": 79,
                    "jsdoctags": [
                        {
                            "name": "entidade",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "EntidadeService"
                    }
                },
                {
                    "name": "toJson",
                    "args": [
                        {
                            "name": "entidade",
                            "type": "E"
                        }
                    ],
                    "optional": false,
                    "returnType": "J",
                    "typeParameters": [],
                    "line": 46,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "entidade",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "EntidadeService"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { AlunoSortFields, Aluno, AlunoEvent, AlunoJson } from './aluno';\r\nimport { endpoints } from 'app/shared/endpoints';\r\nimport { PessoaService } from '../pessoa.service';\r\nimport { LookupErrorsMessages } from 'app/shared/util/service.util';\r\n\r\n@Injectable()\r\nexport class AlunoService extends PessoaService<\r\n  Aluno,\r\n  AlunoJson,\r\n  AlunoSortFields\r\n> {\r\n  protected endpoints = {\r\n    core: endpoints.core.v1.alunos,\r\n    query: endpoints.query.v1.alunos,\r\n  };\r\n\r\n  protected get lookupErrors(): LookupErrorsMessages {\r\n    return {\r\n      notFound: $localize`Nenhum aluno encontrado`,\r\n      multipleFound: (length) =>\r\n        $localize`${length} alunos parecidos encontrados, tente informar o CPF completo ou utilize a busca manual`,\r\n    };\r\n  }\r\n\r\n  protected fromJson = Aluno.fromJson;\r\n\r\n  protected createEvent(aluno, tipo): AlunoEvent {\r\n    return new AlunoEvent(aluno, 'client', tipo);\r\n  }\r\n}\r\n",
            "accessors": {
                "lookupErrors": {
                    "name": "lookupErrors",
                    "getSignature": {
                        "name": "lookupErrors",
                        "type": "",
                        "returnType": "LookupErrorsMessages",
                        "line": 18
                    }
                }
            },
            "extends": "PessoaService",
            "type": "injectable"
        },
        {
            "name": "DisciplinaService",
            "id": "injectable-DisciplinaService-161edfae4e4877eadd025df1fcc57584",
            "file": "src/app/domain/disciplina/disciplina.service.ts",
            "properties": [
                {
                    "name": "endpoints",
                    "defaultValue": "{\r\n    core: endpoints.core.v1.disciplinas,\r\n    query: endpoints.query.v1.disciplinas,\r\n  }",
                    "type": "Endpoints",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "fromJson",
                    "defaultValue": "Disciplina.fromJson",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "endpoints",
                    "type": "Endpoints",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "inheritance": {
                        "file": "EntidadeService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "createEvent",
                    "args": [
                        {
                            "name": "disciplina",
                            "type": "Disciplina"
                        },
                        {
                            "name": "tipo",
                            "type": "EntidadeEventType"
                        }
                    ],
                    "optional": false,
                    "returnType": "DisciplinaEvent",
                    "typeParameters": [],
                    "line": 29,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "disciplina",
                            "type": "Disciplina",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tipo",
                            "type": "EntidadeEventType",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toJson",
                    "args": [
                        {
                            "name": "disciplina",
                            "type": "Disciplina"
                        }
                    ],
                    "optional": false,
                    "returnType": "DisciplinaJson",
                    "typeParameters": [],
                    "line": 25,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "disciplina",
                            "type": "Disciplina",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createEvent",
                    "args": [
                        {
                            "name": "entidade",
                            "type": "E"
                        },
                        {
                            "name": "eventType",
                            "type": "EntidadeEventType"
                        }
                    ],
                    "optional": false,
                    "returnType": "EntidadeEvent<E>",
                    "typeParameters": [],
                    "line": 41,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "entidade",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "eventType",
                            "type": "EntidadeEventType",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "EntidadeService"
                    }
                },
                {
                    "name": "filtrar",
                    "args": [
                        {
                            "type": "Pageable"
                        },
                        {
                            "name": "filtro",
                            "type": "string",
                            "defaultValue": "''"
                        },
                        {
                            "name": "sort",
                            "type": "Sort<SF>",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Page<E>>",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "type": "Pageable",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filtro",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sort",
                            "type": "Sort<SF>",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "EntidadeService"
                    }
                },
                {
                    "name": "fromJson",
                    "args": [
                        {
                            "name": "json",
                            "type": "J"
                        }
                    ],
                    "optional": false,
                    "returnType": "E",
                    "typeParameters": [],
                    "line": 39,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "json",
                            "type": "J",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "EntidadeService"
                    }
                },
                {
                    "name": "recuperarPorId",
                    "args": [
                        {
                            "name": "id",
                            "type": "Id"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<E>",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "Id",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "EntidadeService"
                    }
                },
                {
                    "name": "salvar",
                    "args": [
                        {
                            "name": "entidade",
                            "type": "E"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<E>",
                    "typeParameters": [],
                    "line": 79,
                    "jsdoctags": [
                        {
                            "name": "entidade",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "EntidadeService"
                    }
                },
                {
                    "name": "toJson",
                    "args": [
                        {
                            "name": "entidade",
                            "type": "E"
                        }
                    ],
                    "optional": false,
                    "returnType": "J",
                    "typeParameters": [],
                    "line": 46,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "entidade",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "EntidadeService"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import { EntidadeService, Endpoints } from '../entidade.service';\r\nimport {\r\n  Disciplina,\r\n  DisciplinaJson,\r\n  DisciplinaSortFields,\r\n  DisciplinaEvent,\r\n} from './disciplina';\r\nimport { EntidadeEventType } from '../entidade';\r\nimport { endpoints } from 'app/shared/endpoints';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class DisciplinaService extends EntidadeService<\r\n  Disciplina,\r\n  DisciplinaJson,\r\n  DisciplinaSortFields\r\n> {\r\n  protected endpoints: Endpoints = {\r\n    core: endpoints.core.v1.disciplinas,\r\n    query: endpoints.query.v1.disciplinas,\r\n  };\r\n\r\n  protected fromJson = Disciplina.fromJson;\r\n\r\n  protected toJson(disciplina: Disciplina): DisciplinaJson {\r\n    return disciplina.toJson();\r\n  }\r\n\r\n  protected createEvent(\r\n    disciplina: Disciplina,\r\n    tipo: EntidadeEventType\r\n  ): DisciplinaEvent {\r\n    return new DisciplinaEvent(disciplina, 'client', tipo);\r\n  }\r\n}\r\n",
            "extends": "EntidadeService",
            "type": "injectable"
        },
        {
            "name": "EntidadeService",
            "id": "injectable-EntidadeService-b113e1a07cae75bd89c049d0d95670e2",
            "file": "src/app/domain/entidade.service.ts",
            "properties": [
                {
                    "name": "endpoints",
                    "type": "Endpoints",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        113,
                        117
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createEvent",
                    "args": [
                        {
                            "name": "entidade",
                            "type": "E"
                        },
                        {
                            "name": "eventType",
                            "type": "EntidadeEventType"
                        }
                    ],
                    "optional": false,
                    "returnType": "EntidadeEvent<E>",
                    "typeParameters": [],
                    "line": 41,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "entidade",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "eventType",
                            "type": "EntidadeEventType",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filtrar",
                    "args": [
                        {
                            "type": "Pageable"
                        },
                        {
                            "name": "filtro",
                            "type": "string",
                            "defaultValue": "''"
                        },
                        {
                            "name": "sort",
                            "type": "Sort<SF>",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Page<E>>",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "type": "Pageable",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filtro",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sort",
                            "type": "Sort<SF>",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fromJson",
                    "args": [
                        {
                            "name": "json",
                            "type": "J"
                        }
                    ],
                    "optional": false,
                    "returnType": "E",
                    "typeParameters": [],
                    "line": 39,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "json",
                            "type": "J",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "recuperarPorId",
                    "args": [
                        {
                            "name": "id",
                            "type": "Id"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<E>",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "Id",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "salvar",
                    "args": [
                        {
                            "name": "entidade",
                            "type": "E"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<E>",
                    "typeParameters": [],
                    "line": 79,
                    "jsdoctags": [
                        {
                            "name": "entidade",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toJson",
                    "args": [
                        {
                            "name": "entidade",
                            "type": "E"
                        }
                    ],
                    "optional": false,
                    "returnType": "J",
                    "typeParameters": [],
                    "line": 46,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "entidade",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {\r\n  Entidade,\r\n  EntidadeJson,\r\n  Id,\r\n  EntidadeEventType,\r\n  EntidadeEvent,\r\n} from './entidade';\r\nimport { Observable } from 'rxjs';\r\nimport { Endpoint } from 'app/shared/endpoints';\r\nimport { EventService } from 'app/shared/event/event.service';\r\nimport { map, mapTo, tap, mergeMap } from 'rxjs/operators';\r\nimport {\r\n  simularDelay,\r\n  Pageable,\r\n  Sort,\r\n  Page,\r\n} from 'app/shared/util/service.util';\r\n\r\nexport interface Endpoints {\r\n  core: Endpoint;\r\n  query: Endpoint;\r\n}\r\n\r\n@Injectable()\r\nexport abstract class EntidadeService<\r\n  E extends Entidade,\r\n  J extends EntidadeJson,\r\n  SF = string\r\n> {\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected eventService: EventService\r\n  ) {}\r\n\r\n  protected abstract endpoints: Endpoints;\r\n\r\n  protected abstract fromJson(json: J): E;\r\n\r\n  protected abstract createEvent(\r\n    entidade: E,\r\n    eventType: EntidadeEventType\r\n  ): EntidadeEvent<E>;\r\n\r\n  protected toJson(entidade: E): J {\r\n    return JSON.parse(JSON.stringify(entidade));\r\n  }\r\n\r\n  recuperarPorId(id: Id): Observable<E> {\r\n    return this.http\r\n      .get(`${this.endpoints.query.urlCompleta}/${id}`)\r\n      .pipe(map(this.fromJson), mergeMap(simularDelay));\r\n  }\r\n\r\n  filtrar(\r\n    { page, pageSize }: Pageable,\r\n    filtro = '',\r\n    sort?: Sort<SF>\r\n  ): Observable<Page<E>> {\r\n    return this.http\r\n      .get(this.endpoints.query.urlCompleta, {\r\n        params: {\r\n          page: String(page),\r\n          pageSize: String(pageSize),\r\n          ...(filtro ? { searchTerm: filtro } : {}),\r\n          ...(sort ? { order: sort.expression } : {}),\r\n        },\r\n      })\r\n      .pipe(\r\n        map(({ items, hasNext }: Page<J>) => ({\r\n          items: items.map(this.fromJson),\r\n          hasNext,\r\n        })),\r\n        mergeMap(simularDelay)\r\n      );\r\n  }\r\n\r\n  salvar(entidade: E): Observable<E> {\r\n    let result: Observable<E>;\r\n    let eventType: EntidadeEventType;\r\n    if (entidade.id) {\r\n      result = this.http\r\n        .put<J>(\r\n          `${this.endpoints.core.urlCompleta}/${entidade.id}`,\r\n          this.toJson(entidade)\r\n        )\r\n        .pipe(mapTo(entidade));\r\n      eventType = 'atualizado';\r\n    } else {\r\n      result = this.http\r\n        .post<J>(this.endpoints.core.urlCompleta, this.toJson(entidade))\r\n        .pipe(map(this.fromJson));\r\n      eventType = 'cadastrado';\r\n    }\r\n    return result.pipe(\r\n      mergeMap(simularDelay),\r\n      tap((ent) => this.eventService.publish(this.createEvent(ent, eventType)))\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "eventService",
                        "type": "EventService"
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventService",
                        "type": "EventService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "EventService",
            "id": "injectable-EventService-4d1f5921b167bf68a0522842117487cf",
            "file": "src/app/shared/event/event.service.ts",
            "properties": [
                {
                    "name": "bus$",
                    "type": "Observable<AbstractEvent>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "subject",
                    "defaultValue": "new Subject<AbstractEvent<any>>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "publish",
                    "args": [
                        {
                            "name": "event",
                            "type": "E"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "E",
                        "T"
                    ],
                    "line": 20,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\nexport class AbstractEvent<T = string> {\r\n  constructor(public type: T) {}\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class EventService {\r\n  constructor() {\r\n    this.bus$ = this.subject.asObservable();\r\n  }\r\n\r\n  private subject = new Subject<AbstractEvent<any>>();\r\n\r\n  bus$: Observable<AbstractEvent>;\r\n\r\n  publish<E extends AbstractEvent<T>, T = string>(event: E): void {\r\n    this.subject.next(event);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "type": "injectable"
        },
        {
            "name": "ProfessorService",
            "id": "injectable-ProfessorService-8c50708186874fcdd8d60d3a0689f5f9",
            "file": "src/app/domain/pessoa/professor/professor.service.ts",
            "properties": [
                {
                    "name": "endpoints",
                    "defaultValue": "{\r\n    core: endpoints.core.v1.professores,\r\n    query: endpoints.query.v1.professores,\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "fromJson",
                    "defaultValue": "Professor.fromJson",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "lookupErrors",
                    "type": "LookupErrorsMessages",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "inheritance": {
                        "file": "PessoaService"
                    }
                },
                {
                    "name": "endpoints",
                    "type": "Endpoints",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "inheritance": {
                        "file": "PessoaService"
                    }
                },
                {
                    "name": "endpoints",
                    "type": "Endpoints",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "inheritance": {
                        "file": "EntidadeService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "createEvent",
                    "args": [
                        {
                            "name": "professor",
                            "type": ""
                        },
                        {
                            "name": "tipo",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ProfessorEvent",
                    "typeParameters": [],
                    "line": 33,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "professor",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tipo",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "cpfNotTaken",
                    "args": [
                        {
                            "name": "data",
                            "type": "CpfNotTakenJson"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "CpfNotTakenJson",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PessoaService"
                    }
                },
                {
                    "name": "emailNotTaken",
                    "args": [
                        {
                            "name": "data",
                            "type": "EmailNotTakenJson"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "EmailNotTakenJson",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PessoaService"
                    }
                },
                {
                    "name": "lookup",
                    "args": [
                        {
                            "name": "query",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PessoaService"
                    }
                },
                {
                    "name": "createEvent",
                    "args": [
                        {
                            "name": "entidade",
                            "type": "E"
                        },
                        {
                            "name": "eventType",
                            "type": "EntidadeEventType"
                        }
                    ],
                    "optional": false,
                    "returnType": "EntidadeEvent<E>",
                    "typeParameters": [],
                    "line": 41,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "entidade",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "eventType",
                            "type": "EntidadeEventType",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PessoaService"
                    }
                },
                {
                    "name": "filtrar",
                    "args": [
                        {
                            "type": "Pageable"
                        },
                        {
                            "name": "filtro",
                            "type": "string",
                            "defaultValue": "''"
                        },
                        {
                            "name": "sort",
                            "type": "Sort<SF>",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Page<E>>",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "type": "Pageable",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filtro",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sort",
                            "type": "Sort<SF>",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PessoaService"
                    }
                },
                {
                    "name": "fromJson",
                    "args": [
                        {
                            "name": "json",
                            "type": "J"
                        }
                    ],
                    "optional": false,
                    "returnType": "E",
                    "typeParameters": [],
                    "line": 39,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "json",
                            "type": "J",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PessoaService"
                    }
                },
                {
                    "name": "recuperarPorId",
                    "args": [
                        {
                            "name": "id",
                            "type": "Id"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<E>",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "Id",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PessoaService"
                    }
                },
                {
                    "name": "salvar",
                    "args": [
                        {
                            "name": "entidade",
                            "type": "E"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<E>",
                    "typeParameters": [],
                    "line": 79,
                    "jsdoctags": [
                        {
                            "name": "entidade",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PessoaService"
                    }
                },
                {
                    "name": "toJson",
                    "args": [
                        {
                            "name": "entidade",
                            "type": "E"
                        }
                    ],
                    "optional": false,
                    "returnType": "J",
                    "typeParameters": [],
                    "line": 46,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "entidade",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PessoaService"
                    }
                },
                {
                    "name": "createEvent",
                    "args": [
                        {
                            "name": "entidade",
                            "type": "E"
                        },
                        {
                            "name": "eventType",
                            "type": "EntidadeEventType"
                        }
                    ],
                    "optional": false,
                    "returnType": "EntidadeEvent<E>",
                    "typeParameters": [],
                    "line": 41,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "entidade",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "eventType",
                            "type": "EntidadeEventType",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "EntidadeService"
                    }
                },
                {
                    "name": "filtrar",
                    "args": [
                        {
                            "type": "Pageable"
                        },
                        {
                            "name": "filtro",
                            "type": "string",
                            "defaultValue": "''"
                        },
                        {
                            "name": "sort",
                            "type": "Sort<SF>",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Page<E>>",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "type": "Pageable",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filtro",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sort",
                            "type": "Sort<SF>",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "EntidadeService"
                    }
                },
                {
                    "name": "fromJson",
                    "args": [
                        {
                            "name": "json",
                            "type": "J"
                        }
                    ],
                    "optional": false,
                    "returnType": "E",
                    "typeParameters": [],
                    "line": 39,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "json",
                            "type": "J",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "EntidadeService"
                    }
                },
                {
                    "name": "recuperarPorId",
                    "args": [
                        {
                            "name": "id",
                            "type": "Id"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<E>",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "Id",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "EntidadeService"
                    }
                },
                {
                    "name": "salvar",
                    "args": [
                        {
                            "name": "entidade",
                            "type": "E"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<E>",
                    "typeParameters": [],
                    "line": 79,
                    "jsdoctags": [
                        {
                            "name": "entidade",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "EntidadeService"
                    }
                },
                {
                    "name": "toJson",
                    "args": [
                        {
                            "name": "entidade",
                            "type": "E"
                        }
                    ],
                    "optional": false,
                    "returnType": "J",
                    "typeParameters": [],
                    "line": 46,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "entidade",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "EntidadeService"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {\r\n  Professor,\r\n  ProfessorJson,\r\n  ProfessorEvent,\r\n  ProfessorSortFields,\r\n} from './professor';\r\nimport { endpoints } from 'app/shared/endpoints';\r\nimport { LookupErrorsMessages } from 'app/shared/util/service.util';\r\nimport { PessoaService } from '../pessoa.service';\r\n\r\n@Injectable()\r\nexport class ProfessorService extends PessoaService<\r\n  Professor,\r\n  ProfessorJson,\r\n  ProfessorSortFields\r\n> {\r\n  protected endpoints = {\r\n    core: endpoints.core.v1.professores,\r\n    query: endpoints.query.v1.professores,\r\n  };\r\n\r\n  protected get lookupErrors(): LookupErrorsMessages {\r\n    return {\r\n      notFound: $localize`Nenhum professor encontrado`,\r\n      multipleFound: (length) =>\r\n        $localize`${length} professores parecidos encontrados, tente informar o CPF completo ou utilize a busca manual`,\r\n    };\r\n  }\r\n\r\n  protected fromJson = Professor.fromJson;\r\n\r\n  protected createEvent(professor, tipo): ProfessorEvent {\r\n    return new ProfessorEvent(professor, 'client', tipo);\r\n  }\r\n}\r\n",
            "accessors": {
                "lookupErrors": {
                    "name": "lookupErrors",
                    "getSignature": {
                        "name": "lookupErrors",
                        "type": "",
                        "returnType": "LookupErrorsMessages",
                        "line": 23
                    }
                }
            },
            "extends": "PessoaService",
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AbstractEvent",
            "id": "class-AbstractEvent-4d1f5921b167bf68a0522842117487cf",
            "file": "src/app/shared/event/event.service.ts",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\nexport class AbstractEvent<T = string> {\r\n  constructor(public type: T) {}\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class EventService {\r\n  constructor() {\r\n    this.bus$ = this.subject.asObservable();\r\n  }\r\n\r\n  private subject = new Subject<AbstractEvent<any>>();\r\n\r\n  bus$: Observable<AbstractEvent>;\r\n\r\n  publish<E extends AbstractEvent<T>, T = string>(event: E): void {\r\n    this.subject.next(event);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "type",
                        "type": "T"
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "type",
                        "type": "T",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "type",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Aluno",
            "id": "class-Aluno-db9dca0428b751757f20c16602fa34a1",
            "file": "src/app/domain/pessoa/aluno/aluno.ts",
            "type": "class",
            "sourceCode": "import { AbstractControl, Validators } from '@angular/forms';\r\nimport { Id, EntidadeEvent } from 'app/domain/entidade';\r\nimport { NotTakenService } from 'app/shared/validators';\r\nimport { Pessoa, PessoaSortFields, PessoaJson } from '../pessoa';\r\n\r\nexport interface AlunoJson extends PessoaJson {\r\n  matricula: number;\r\n  formaIngresso: string;\r\n}\r\n\r\nexport class AlunoEvent extends EntidadeEvent<Aluno> {}\r\n\r\nexport enum FormaIngresso {\r\n  ENADE = 'ENADE',\r\n  VESTIBULAR = 'Vestibular',\r\n}\r\n\r\nexport type AlunoSortFields = PessoaSortFields | 'formaIngresso' | 'matricula';\r\n\r\nexport class Aluno extends Pessoa {\r\n  public static fromJson({\r\n    id,\r\n    nome,\r\n    email,\r\n    cpf,\r\n    formaIngresso,\r\n    matricula,\r\n  }: any): Aluno {\r\n    return new Aluno(id, nome, email, cpf, formaIngresso, +matricula);\r\n  }\r\n\r\n  constructor(\r\n    id: Id = null,\r\n    nome = '',\r\n    email = '',\r\n    cpf = '',\r\n    public formaIngresso: FormaIngresso | '' = '',\r\n    public matricula?: number\r\n  ) {\r\n    super(id, nome, email, cpf);\r\n  }\r\n\r\n  protected onChanges({ formaIngresso, ...pessoa }: any): void {\r\n    super.onChanges(pessoa);\r\n    this.formaIngresso = formaIngresso;\r\n  }\r\n\r\n  protected getFormControls(\r\n    emailNotTaken: NotTakenService,\r\n    cpfNotTaken: NotTakenService\r\n  ): any {\r\n    return {\r\n      ...super.getFormControls(emailNotTaken, cpfNotTaken),\r\n      formaIngresso: [\r\n        this.formaIngresso,\r\n        [Validators.required, this.formaIngressoValidator],\r\n      ],\r\n    };\r\n  }\r\n\r\n  private formaIngressoValidator(\r\n    control: AbstractControl\r\n  ): { formaIngresso: boolean } | null {\r\n    if (control.value)\r\n      switch (control.value) {\r\n        case FormaIngresso.ENADE:\r\n        case FormaIngresso.VESTIBULAR:\r\n          break;\r\n        default:\r\n          return { formaIngresso: true };\r\n      }\r\n    return null;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "id",
                        "type": "Id",
                        "defaultValue": "null"
                    },
                    {
                        "name": "nome",
                        "type": "string",
                        "defaultValue": "''"
                    },
                    {
                        "name": "email",
                        "type": "string",
                        "defaultValue": "''"
                    },
                    {
                        "name": "cpf",
                        "type": "string",
                        "defaultValue": "''"
                    },
                    {
                        "name": "formaIngresso",
                        "type": "FormaIngresso | \"\"",
                        "defaultValue": "''"
                    },
                    {
                        "name": "matricula",
                        "type": "number",
                        "optional": true
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "Id",
                        "defaultValue": "null",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "nome",
                        "type": "string",
                        "defaultValue": "''",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "email",
                        "type": "string",
                        "defaultValue": "''",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cpf",
                        "type": "string",
                        "defaultValue": "''",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formaIngresso",
                        "type": "FormaIngresso | \"\"",
                        "defaultValue": "''",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "matricula",
                        "type": "number",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "formaIngresso",
                    "defaultValue": "''",
                    "type": "FormaIngresso | \"\"",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "matricula",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "cpf",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "Pessoa"
                    }
                },
                {
                    "name": "email",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "Pessoa"
                    }
                },
                {
                    "name": "nome",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "Pessoa"
                    }
                },
                {
                    "name": "id",
                    "type": "Id",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "Pessoa"
                    }
                },
                {
                    "name": "id",
                    "type": "Id",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "Entidade"
                    }
                }
            ],
            "methods": [
                {
                    "name": "formaIngressoValidator",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl"
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type | null",
                    "typeParameters": [],
                    "line": 61,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fromJson",
                    "args": [
                        {
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Aluno",
                    "typeParameters": [],
                    "line": 21,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormControls",
                    "args": [
                        {
                            "name": "emailNotTaken",
                            "type": "NotTakenService"
                        },
                        {
                            "name": "cpfNotTaken",
                            "type": "NotTakenService"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 48,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "emailNotTaken",
                            "type": "NotTakenService",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cpfNotTaken",
                            "type": "NotTakenService",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onChanges",
                    "args": [
                        {
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "criarForm",
                    "args": [
                        {
                            "name": "builder",
                            "type": "FormBuilder"
                        },
                        {
                            "name": "emailNotTaken",
                            "type": "",
                            "defaultValue": "DEFAULT_NOT_TAKEN_SERVICE"
                        },
                        {
                            "name": "cpfNotTaken",
                            "type": "",
                            "defaultValue": "DEFAULT_NOT_TAKEN_SERVICE"
                        }
                    ],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 78,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "builder",
                            "type": "FormBuilder",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "emailNotTaken",
                            "type": "",
                            "defaultValue": "DEFAULT_NOT_TAKEN_SERVICE",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cpfNotTaken",
                            "type": "",
                            "defaultValue": "DEFAULT_NOT_TAKEN_SERVICE",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Pessoa"
                    }
                },
                {
                    "name": "getFormControls",
                    "args": [
                        {
                            "name": "emailNotTaken",
                            "type": "NotTakenService"
                        },
                        {
                            "name": "cpfNotTaken",
                            "type": "NotTakenService"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 50,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "emailNotTaken",
                            "type": "NotTakenService",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cpfNotTaken",
                            "type": "NotTakenService",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Pessoa"
                    }
                },
                {
                    "name": "nomeOuCpfPredicate",
                    "args": [
                        {
                            "name": "query",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Predicate<R>",
                    "typeParameters": [
                        "R"
                    ],
                    "line": 29,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Pessoa"
                    }
                },
                {
                    "name": "onChanges",
                    "args": [
                        {
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Pessoa"
                    }
                },
                {
                    "name": "fromForm",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Pessoa"
                    }
                },
                {
                    "name": "onChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Pessoa"
                    }
                },
                {
                    "name": "subscribeFormChanges",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup"
                        },
                        {
                            "name": "shouldContinue",
                            "type": "MonoTypeOperatorFunction<any>",
                            "defaultValue": "takeWhile(() => true)"
                        },
                        {
                            "name": "onChange",
                            "type": "function",
                            "optional": true,
                            "function": [
                                {
                                    "name": "value",
                                    "type": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Subscription",
                    "typeParameters": [],
                    "line": 21,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "shouldContinue",
                            "type": "MonoTypeOperatorFunction<any>",
                            "defaultValue": "takeWhile(() => true)",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "onChange",
                            "type": "function",
                            "optional": true,
                            "function": [
                                {
                                    "name": "value",
                                    "type": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Pessoa"
                    }
                },
                {
                    "name": "fromForm",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Entidade"
                    }
                },
                {
                    "name": "onChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Entidade"
                    }
                },
                {
                    "name": "subscribeFormChanges",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup"
                        },
                        {
                            "name": "shouldContinue",
                            "type": "MonoTypeOperatorFunction<any>",
                            "defaultValue": "takeWhile(() => true)"
                        },
                        {
                            "name": "onChange",
                            "type": "function",
                            "optional": true,
                            "function": [
                                {
                                    "name": "value",
                                    "type": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Subscription",
                    "typeParameters": [],
                    "line": 21,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "shouldContinue",
                            "type": "MonoTypeOperatorFunction<any>",
                            "defaultValue": "takeWhile(() => true)",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "onChange",
                            "type": "function",
                            "optional": true,
                            "function": [
                                {
                                    "name": "value",
                                    "type": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Entidade"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "Pessoa",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AlunoEvent",
            "id": "class-AlunoEvent-db9dca0428b751757f20c16602fa34a1",
            "file": "src/app/domain/pessoa/aluno/aluno.ts",
            "type": "class",
            "sourceCode": "import { AbstractControl, Validators } from '@angular/forms';\r\nimport { Id, EntidadeEvent } from 'app/domain/entidade';\r\nimport { NotTakenService } from 'app/shared/validators';\r\nimport { Pessoa, PessoaSortFields, PessoaJson } from '../pessoa';\r\n\r\nexport interface AlunoJson extends PessoaJson {\r\n  matricula: number;\r\n  formaIngresso: string;\r\n}\r\n\r\nexport class AlunoEvent extends EntidadeEvent<Aluno> {}\r\n\r\nexport enum FormaIngresso {\r\n  ENADE = 'ENADE',\r\n  VESTIBULAR = 'Vestibular',\r\n}\r\n\r\nexport type AlunoSortFields = PessoaSortFields | 'formaIngresso' | 'matricula';\r\n\r\nexport class Aluno extends Pessoa {\r\n  public static fromJson({\r\n    id,\r\n    nome,\r\n    email,\r\n    cpf,\r\n    formaIngresso,\r\n    matricula,\r\n  }: any): Aluno {\r\n    return new Aluno(id, nome, email, cpf, formaIngresso, +matricula);\r\n  }\r\n\r\n  constructor(\r\n    id: Id = null,\r\n    nome = '',\r\n    email = '',\r\n    cpf = '',\r\n    public formaIngresso: FormaIngresso | '' = '',\r\n    public matricula?: number\r\n  ) {\r\n    super(id, nome, email, cpf);\r\n  }\r\n\r\n  protected onChanges({ formaIngresso, ...pessoa }: any): void {\r\n    super.onChanges(pessoa);\r\n    this.formaIngresso = formaIngresso;\r\n  }\r\n\r\n  protected getFormControls(\r\n    emailNotTaken: NotTakenService,\r\n    cpfNotTaken: NotTakenService\r\n  ): any {\r\n    return {\r\n      ...super.getFormControls(emailNotTaken, cpfNotTaken),\r\n      formaIngresso: [\r\n        this.formaIngresso,\r\n        [Validators.required, this.formaIngressoValidator],\r\n      ],\r\n    };\r\n  }\r\n\r\n  private formaIngressoValidator(\r\n    control: AbstractControl\r\n  ): { formaIngresso: boolean } | null {\r\n    if (control.value)\r\n      switch (control.value) {\r\n        case FormaIngresso.ENADE:\r\n        case FormaIngresso.VESTIBULAR:\r\n          break;\r\n        default:\r\n          return { formaIngresso: true };\r\n      }\r\n    return null;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "entidade",
                    "type": "E",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "EntidadeEvent"
                    }
                },
                {
                    "name": "source",
                    "type": "EntidadeEventSource",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "EntidadeEvent"
                    }
                },
                {
                    "name": "type",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "EntidadeEvent"
                    }
                },
                {
                    "name": "type",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "AbstractEvent"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "EntidadeEvent",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CustomLiterals",
            "id": "class-CustomLiterals-b60c085f41910571c5665aade817223e",
            "file": "src/app/shared/literals.ts",
            "type": "class",
            "sourceCode": "import { PoTableLiterals } from '@po-ui/ng-components';\r\n\r\nexport class CustomLiterals {\r\n  public static forTable(): PoTableLiterals {\r\n    return {\r\n      loadMoreData: $localize`:Texto do botão \"Carregar mais dados\" das tabelas do sistema:Mostrar mais`,\r\n      loadingData: $localize`:Texto da mensagem de que os dados de uma tabela estão sendo carregados:Carregando`,\r\n      noData: $localize`:Texto da mensagem que aparece nas tabelas do sistema quando não há dados para exibir:Nenhum dado encontrado`,\r\n\r\n      columnsManager: $localize`:Título do gerenciador de colunas das tabelas do sistema:Gerenciador de colunas`,\r\n      noVisibleColumn: $localize`:Texto da mensagem que aparece na tabela quando nenhuma coluna está visível:Nenhuma coluna visível`,\r\n      noColumns: $localize`:Texto da mensagem que aparece no gerenciador de colunas de uma tabela quando não há colunas para selecionar:Sem colunas`,\r\n\r\n      seeCompleteSubtitle: $localize`:Texto do botão para exibir toda a legenda em tabelas do sistema:Mostrar legenda completa`,\r\n      completeSubtitle: $localize`:Título da janela que exibe a legenda completa de uma tabela:Legenda completa`,\r\n    };\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "forTable",
                    "args": [],
                    "optional": false,
                    "returnType": "PoTableLiterals",
                    "typeParameters": [],
                    "line": 4,
                    "modifierKind": [
                        115
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CustomValidators",
            "id": "class-CustomValidators-880e1192e13e26a062ddde8433fe64d5",
            "file": "src/app/shared/validators.ts",
            "type": "class",
            "sourceCode": "import { AbstractControl, AsyncValidatorFn } from '@angular/forms';\r\nimport { isValid as isCpfValid } from '@fnando/cpf';\r\nimport { Observable } from 'rxjs';\r\nimport { debounceTime, map, distinctUntilChanged } from 'rxjs/operators';\r\n\r\nexport type NotTakenService = (value: string) => Observable<boolean>;\r\n\r\nexport class CustomValidators {\r\n  public static cpf(control: AbstractControl): { cpf: boolean } | null {\r\n    const value: string = control.value;\r\n    if (value?.length === 11 && !isCpfValid(value)) return { cpf: true };\r\n    return null;\r\n  }\r\n\r\n  public static email(control: AbstractControl): { email: boolean } | null {\r\n    if (control.value && !/^.*@.*$/.test(control.value)) {\r\n      return {\r\n        email: true,\r\n      };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public static number(control: AbstractControl): { number: boolean } | null {\r\n    if (\r\n      control.value &&\r\n      (typeof control.value !== 'number' || Number.isNaN(control.value))\r\n    )\r\n      return { number: true };\r\n    return null;\r\n  }\r\n\r\n  public static notTakenValidator(\r\n    service: NotTakenService,\r\n    key: string,\r\n    time = 200\r\n  ): AsyncValidatorFn {\r\n    return ({ value }: AbstractControl) =>\r\n      service(value).pipe(\r\n        distinctUntilChanged(),\r\n        debounceTime(time),\r\n        map((notTaken) => (notTaken ? null : { [key]: true }))\r\n      );\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "cpf",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl"
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type | null",
                    "typeParameters": [],
                    "line": 9,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "email",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl"
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type | null",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "notTakenValidator",
                    "args": [
                        {
                            "name": "service",
                            "type": "NotTakenService"
                        },
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "time",
                            "type": "number",
                            "defaultValue": "200"
                        }
                    ],
                    "optional": false,
                    "returnType": "AsyncValidatorFn",
                    "typeParameters": [],
                    "line": 33,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "service",
                            "type": "NotTakenService",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "time",
                            "type": "number",
                            "defaultValue": "200",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "number",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl"
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type | null",
                    "typeParameters": [],
                    "line": 24,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Disciplina",
            "id": "class-Disciplina-8a10fe4e614b94c0b74d55c93012df10",
            "file": "src/app/domain/disciplina/disciplina.ts",
            "type": "class",
            "sourceCode": "import { FormGroup, Validators, FormBuilder } from '@angular/forms';\r\nimport { CustomValidators } from 'app/shared/validators';\r\nimport { Entidade, Id, EntidadeJson, EntidadeEvent } from '../entidade';\r\nimport { Professor, ProfessorJson } from '../pessoa/professor/professor';\r\n\r\nexport class DisciplinaEvent extends EntidadeEvent<Disciplina> {}\r\n\r\nexport type DisciplinaSortFields = 'descricao' | 'sigla' | 'cargaHoraria';\r\n\r\nexport interface DisciplinaJson extends EntidadeJson {\r\n  descricao: string;\r\n  sigla: string;\r\n  cargaHoraria: number;\r\n  professorRef?: Id;\r\n  professor?: ProfessorJson;\r\n}\r\n\r\nexport class Disciplina extends Entidade {\r\n  public static fromJson({\r\n    id,\r\n    descricao,\r\n    sigla,\r\n    cargaHoraria,\r\n    professor: professorJson,\r\n  }: DisciplinaJson): Disciplina {\r\n    const professor = professorJson\r\n      ? Professor.fromJson(professorJson)\r\n      : undefined;\r\n    return new Disciplina(id, descricao, sigla, +cargaHoraria, professor);\r\n  }\r\n\r\n  constructor(\r\n    id: Id = null,\r\n    public descricao = '',\r\n    public sigla = '',\r\n    public cargaHoraria?: number,\r\n    public professor?: Professor\r\n  ) {\r\n    super(id);\r\n  }\r\n\r\n  public get professorRef(): Id {\r\n    return this.professor?.id;\r\n  }\r\n\r\n  public toJson(): DisciplinaJson {\r\n    return {\r\n      id: this.id,\r\n      descricao: this.descricao,\r\n      sigla: this.sigla,\r\n      cargaHoraria: this.cargaHoraria,\r\n      professorRef: this.professorRef,\r\n    };\r\n  }\r\n\r\n  public fromForm(form: FormGroup): void {\r\n    this.descricao = form.get('descricao').value;\r\n    this.sigla = form.get('sigla').value;\r\n    this.cargaHoraria = +form.get('cargaHoraria').value;\r\n    const professorRef = form.get('professorRef').value;\r\n    if (professorRef) {\r\n      if (professorRef !== this.professorRef)\r\n        this.professor = new Professor(professorRef);\r\n    } else this.professor = null;\r\n  }\r\n\r\n  protected onChanges({\r\n    descricao,\r\n    sigla,\r\n    cargaHoraria,\r\n    professorRef,\r\n  }: any): void {\r\n    this.descricao = descricao;\r\n    this.sigla = sigla;\r\n    this.cargaHoraria = +cargaHoraria;\r\n    if (professorRef && professorRef !== this.professorRef)\r\n      this.professor = new Professor(professorRef);\r\n  }\r\n\r\n  public criarForm(formBuilder: FormBuilder): FormGroup {\r\n    return formBuilder.group({\r\n      descricao: [\r\n        this.descricao,\r\n        [Validators.required, Validators.maxLength(255)],\r\n      ],\r\n      sigla: [this.sigla, [Validators.required, Validators.maxLength(10)]],\r\n      cargaHoraria: [\r\n        this.cargaHoraria ?? '',\r\n        [Validators.required, CustomValidators.number],\r\n      ],\r\n      professorRef: [this.professorRef ?? '', [Validators.required]],\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "id",
                        "type": "Id",
                        "defaultValue": "null"
                    },
                    {
                        "name": "descricao",
                        "type": "string",
                        "defaultValue": "''"
                    },
                    {
                        "name": "sigla",
                        "type": "string",
                        "defaultValue": "''"
                    },
                    {
                        "name": "cargaHoraria",
                        "type": "number",
                        "optional": true
                    },
                    {
                        "name": "professor",
                        "type": "Professor",
                        "optional": true
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "Id",
                        "defaultValue": "null",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "descricao",
                        "type": "string",
                        "defaultValue": "''",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sigla",
                        "type": "string",
                        "defaultValue": "''",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cargaHoraria",
                        "type": "number",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "professor",
                        "type": "Professor",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "cargaHoraria",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "descricao",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "professor",
                    "type": "Professor",
                    "optional": true,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sigla",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "id",
                    "type": "Id",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "Entidade"
                    }
                }
            ],
            "methods": [
                {
                    "name": "criarForm",
                    "args": [
                        {
                            "name": "formBuilder",
                            "type": "FormBuilder"
                        }
                    ],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 80,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "formBuilder",
                            "type": "FormBuilder",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fromForm",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fromJson",
                    "args": [
                        {
                            "type": "DisciplinaJson"
                        }
                    ],
                    "optional": false,
                    "returnType": "Disciplina",
                    "typeParameters": [],
                    "line": 19,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "type": "DisciplinaJson",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onChanges",
                    "args": [
                        {
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toJson",
                    "args": [],
                    "optional": false,
                    "returnType": "DisciplinaJson",
                    "typeParameters": [],
                    "line": 46,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fromForm",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Entidade"
                    }
                },
                {
                    "name": "onChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Entidade"
                    }
                },
                {
                    "name": "subscribeFormChanges",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup"
                        },
                        {
                            "name": "shouldContinue",
                            "type": "MonoTypeOperatorFunction<any>",
                            "defaultValue": "takeWhile(() => true)"
                        },
                        {
                            "name": "onChange",
                            "type": "function",
                            "optional": true,
                            "function": [
                                {
                                    "name": "value",
                                    "type": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Subscription",
                    "typeParameters": [],
                    "line": 21,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "shouldContinue",
                            "type": "MonoTypeOperatorFunction<any>",
                            "defaultValue": "takeWhile(() => true)",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "onChange",
                            "type": "function",
                            "optional": true,
                            "function": [
                                {
                                    "name": "value",
                                    "type": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Entidade"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "Entidade",
            "accessors": {
                "professorRef": {
                    "name": "professorRef",
                    "getSignature": {
                        "name": "professorRef",
                        "type": "",
                        "returnType": "Id",
                        "line": 42
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DisciplinaEvent",
            "id": "class-DisciplinaEvent-8a10fe4e614b94c0b74d55c93012df10",
            "file": "src/app/domain/disciplina/disciplina.ts",
            "type": "class",
            "sourceCode": "import { FormGroup, Validators, FormBuilder } from '@angular/forms';\r\nimport { CustomValidators } from 'app/shared/validators';\r\nimport { Entidade, Id, EntidadeJson, EntidadeEvent } from '../entidade';\r\nimport { Professor, ProfessorJson } from '../pessoa/professor/professor';\r\n\r\nexport class DisciplinaEvent extends EntidadeEvent<Disciplina> {}\r\n\r\nexport type DisciplinaSortFields = 'descricao' | 'sigla' | 'cargaHoraria';\r\n\r\nexport interface DisciplinaJson extends EntidadeJson {\r\n  descricao: string;\r\n  sigla: string;\r\n  cargaHoraria: number;\r\n  professorRef?: Id;\r\n  professor?: ProfessorJson;\r\n}\r\n\r\nexport class Disciplina extends Entidade {\r\n  public static fromJson({\r\n    id,\r\n    descricao,\r\n    sigla,\r\n    cargaHoraria,\r\n    professor: professorJson,\r\n  }: DisciplinaJson): Disciplina {\r\n    const professor = professorJson\r\n      ? Professor.fromJson(professorJson)\r\n      : undefined;\r\n    return new Disciplina(id, descricao, sigla, +cargaHoraria, professor);\r\n  }\r\n\r\n  constructor(\r\n    id: Id = null,\r\n    public descricao = '',\r\n    public sigla = '',\r\n    public cargaHoraria?: number,\r\n    public professor?: Professor\r\n  ) {\r\n    super(id);\r\n  }\r\n\r\n  public get professorRef(): Id {\r\n    return this.professor?.id;\r\n  }\r\n\r\n  public toJson(): DisciplinaJson {\r\n    return {\r\n      id: this.id,\r\n      descricao: this.descricao,\r\n      sigla: this.sigla,\r\n      cargaHoraria: this.cargaHoraria,\r\n      professorRef: this.professorRef,\r\n    };\r\n  }\r\n\r\n  public fromForm(form: FormGroup): void {\r\n    this.descricao = form.get('descricao').value;\r\n    this.sigla = form.get('sigla').value;\r\n    this.cargaHoraria = +form.get('cargaHoraria').value;\r\n    const professorRef = form.get('professorRef').value;\r\n    if (professorRef) {\r\n      if (professorRef !== this.professorRef)\r\n        this.professor = new Professor(professorRef);\r\n    } else this.professor = null;\r\n  }\r\n\r\n  protected onChanges({\r\n    descricao,\r\n    sigla,\r\n    cargaHoraria,\r\n    professorRef,\r\n  }: any): void {\r\n    this.descricao = descricao;\r\n    this.sigla = sigla;\r\n    this.cargaHoraria = +cargaHoraria;\r\n    if (professorRef && professorRef !== this.professorRef)\r\n      this.professor = new Professor(professorRef);\r\n  }\r\n\r\n  public criarForm(formBuilder: FormBuilder): FormGroup {\r\n    return formBuilder.group({\r\n      descricao: [\r\n        this.descricao,\r\n        [Validators.required, Validators.maxLength(255)],\r\n      ],\r\n      sigla: [this.sigla, [Validators.required, Validators.maxLength(10)]],\r\n      cargaHoraria: [\r\n        this.cargaHoraria ?? '',\r\n        [Validators.required, CustomValidators.number],\r\n      ],\r\n      professorRef: [this.professorRef ?? '', [Validators.required]],\r\n    });\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "entidade",
                    "type": "E",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "EntidadeEvent"
                    }
                },
                {
                    "name": "source",
                    "type": "EntidadeEventSource",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "EntidadeEvent"
                    }
                },
                {
                    "name": "type",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "EntidadeEvent"
                    }
                },
                {
                    "name": "type",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "AbstractEvent"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "EntidadeEvent",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Endpoint",
            "id": "class-Endpoint-4932eb38cf3ab5279271a3e679dbb225",
            "file": "src/app/shared/endpoints.ts",
            "type": "class",
            "sourceCode": "import { environment } from 'environments/environment';\r\n\r\nconst { schema, host, port } = environment.backend;\r\n\r\nconst api = 'api';\r\nconst core = 'core';\r\nconst query = 'query';\r\nconst v1 = 'v1';\r\n\r\nexport class Endpoint {\r\n  constructor(public path: string) {}\r\n\r\n  get urlCompleta(): string {\r\n    return `${schema}://${host}:${port}${this.path}`;\r\n  }\r\n}\r\n\r\nexport const endpoints = {\r\n  core: {\r\n    v1: {\r\n      alunos: new Endpoint(`/${api}/${core}/${v1}/alunos`),\r\n      professores: new Endpoint(`/${api}/${core}/${v1}/professores`),\r\n      disciplinas: new Endpoint(`/${api}/${core}/${v1}/disciplinas`),\r\n    },\r\n  },\r\n  query: {\r\n    v1: {\r\n      alunos: new Endpoint(`/${api}/${query}/${v1}/alunos`),\r\n      professores: new Endpoint(`/${api}/${query}/${v1}/professores`),\r\n      disciplinas: new Endpoint(`/${api}/${query}/${v1}/disciplinas`),\r\n    },\r\n  },\r\n};\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "path",
                        "type": "string"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "path",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "path",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "accessors": {
                "urlCompleta": {
                    "name": "urlCompleta",
                    "getSignature": {
                        "name": "urlCompleta",
                        "type": "string",
                        "returnType": "string",
                        "line": 13
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Entidade",
            "id": "class-Entidade-6c5ab6424e2a23e78d63d070f1a628f4",
            "file": "src/app/domain/entidade.ts",
            "type": "class",
            "sourceCode": "import { FormGroup } from '@angular/forms';\r\nimport { takeWhile } from 'rxjs/operators';\r\nimport { MonoTypeOperatorFunction, Subscription } from 'rxjs';\r\nimport { AbstractEvent } from 'app/shared/event/event.service';\r\n\r\nexport type Id = string | null;\r\n\r\nexport interface EntidadeJson {\r\n  id: Id;\r\n}\r\n\r\nexport abstract class Entidade {\r\n  constructor(public id: Id) {}\r\n\r\n  protected abstract onChanges(changes: any): void;\r\n\r\n  public fromForm(form: FormGroup): void {\r\n    this.onChanges(form.getRawValue());\r\n  }\r\n\r\n  public subscribeFormChanges(\r\n    form: FormGroup,\r\n    shouldContinue: MonoTypeOperatorFunction<any> = takeWhile(() => true),\r\n    onChange?: (value: this) => void\r\n  ): Subscription {\r\n    return form.valueChanges.pipe(shouldContinue).subscribe((changes) => {\r\n      this.onChanges(changes);\r\n      if (onChange) onChange(this);\r\n    });\r\n  }\r\n}\r\n\r\nexport type EntidadeEventType = 'cadastrado' | 'atualizado' | 'removido';\r\n\r\nexport type EntidadeEventSource = 'client' | 'server';\r\n\r\nexport class EntidadeEvent<E extends Entidade> extends AbstractEvent<\r\n  EntidadeEventType\r\n> {\r\n  constructor(\r\n    public entidade: E,\r\n    public source: EntidadeEventSource,\r\n    type: EntidadeEventType\r\n  ) {\r\n    super(type);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "id",
                        "type": "Id"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "Id",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "id",
                    "type": "Id",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "fromForm",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeFormChanges",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup"
                        },
                        {
                            "name": "shouldContinue",
                            "type": "MonoTypeOperatorFunction<any>",
                            "defaultValue": "takeWhile(() => true)"
                        },
                        {
                            "name": "onChange",
                            "type": "function",
                            "optional": true,
                            "function": [
                                {
                                    "name": "value",
                                    "type": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Subscription",
                    "typeParameters": [],
                    "line": 21,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "shouldContinue",
                            "type": "MonoTypeOperatorFunction<any>",
                            "defaultValue": "takeWhile(() => true)",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "onChange",
                            "type": "function",
                            "optional": true,
                            "function": [
                                {
                                    "name": "value",
                                    "type": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EntidadeEvent",
            "id": "class-EntidadeEvent-6c5ab6424e2a23e78d63d070f1a628f4",
            "file": "src/app/domain/entidade.ts",
            "type": "class",
            "sourceCode": "import { FormGroup } from '@angular/forms';\r\nimport { takeWhile } from 'rxjs/operators';\r\nimport { MonoTypeOperatorFunction, Subscription } from 'rxjs';\r\nimport { AbstractEvent } from 'app/shared/event/event.service';\r\n\r\nexport type Id = string | null;\r\n\r\nexport interface EntidadeJson {\r\n  id: Id;\r\n}\r\n\r\nexport abstract class Entidade {\r\n  constructor(public id: Id) {}\r\n\r\n  protected abstract onChanges(changes: any): void;\r\n\r\n  public fromForm(form: FormGroup): void {\r\n    this.onChanges(form.getRawValue());\r\n  }\r\n\r\n  public subscribeFormChanges(\r\n    form: FormGroup,\r\n    shouldContinue: MonoTypeOperatorFunction<any> = takeWhile(() => true),\r\n    onChange?: (value: this) => void\r\n  ): Subscription {\r\n    return form.valueChanges.pipe(shouldContinue).subscribe((changes) => {\r\n      this.onChanges(changes);\r\n      if (onChange) onChange(this);\r\n    });\r\n  }\r\n}\r\n\r\nexport type EntidadeEventType = 'cadastrado' | 'atualizado' | 'removido';\r\n\r\nexport type EntidadeEventSource = 'client' | 'server';\r\n\r\nexport class EntidadeEvent<E extends Entidade> extends AbstractEvent<\r\n  EntidadeEventType\r\n> {\r\n  constructor(\r\n    public entidade: E,\r\n    public source: EntidadeEventSource,\r\n    type: EntidadeEventType\r\n  ) {\r\n    super(type);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "entidade",
                        "type": "E"
                    },
                    {
                        "name": "source",
                        "type": "EntidadeEventSource"
                    },
                    {
                        "name": "type",
                        "type": "EntidadeEventType"
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "entidade",
                        "type": "E",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "source",
                        "type": "EntidadeEventSource",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "type",
                        "type": "EntidadeEventType",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "entidade",
                    "type": "E",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "source",
                    "type": "EntidadeEventSource",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "AbstractEvent"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "AbstractEvent",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Pageable",
            "id": "class-Pageable-e01289057576875b1c8b8b163c02eb08",
            "file": "src/app/shared/util/service.util.ts",
            "type": "class",
            "sourceCode": "import {\r\n  Observable,\r\n  of,\r\n  isObservable,\r\n  BehaviorSubject,\r\n  combineLatest,\r\n  MonoTypeOperatorFunction,\r\n  Subscription,\r\n  throwError,\r\n  OperatorFunction,\r\n} from 'rxjs';\r\nimport { delay, take, map, withLatestFrom, mergeMap } from 'rxjs/operators';\r\nimport { environment } from 'environments/environment';\r\nimport { PoTableColumn, PoTableColumnSortType } from '@po-ui/ng-components';\r\n\r\nexport interface Page<T> {\r\n  items: T[];\r\n  hasNext: boolean;\r\n}\r\n\r\nexport class Pageable {\r\n  constructor(public page = 1, public pageSize = 20) {}\r\n\r\n  get offset(): number {\r\n    return this.page * this.pageSize - this.pageSize;\r\n  }\r\n\r\n  get endOffset(): number {\r\n    return this.offset + this.pageSize;\r\n  }\r\n\r\n  next(): Pageable {\r\n    return new Pageable(this.page + 1, this.pageSize);\r\n  }\r\n\r\n  apply<T = any>(items: T[]): T[] {\r\n    return items.slice(this.offset, this.endOffset);\r\n  }\r\n}\r\n\r\ninterface PoTableColumnSort {\r\n  column: PoTableColumn;\r\n  type: PoTableColumnSortType;\r\n}\r\n\r\ninterface SortFieldsOverride<Fields = string> {\r\n  [key: string]: Fields;\r\n}\r\n\r\nexport type SortFieldsExtractor = {\r\n  [field: string]: (item: any) => string;\r\n};\r\n\r\nexport class Sort<Fields = string> {\r\n  static fromOrderChange<F = string>(\r\n    { column, type }: PoTableColumnSort,\r\n    override: SortFieldsOverride<F> = {},\r\n    extractors: SortFieldsExtractor = {}\r\n  ): Sort<F> {\r\n    const prop = column.property as any;\r\n    return new Sort<F>(\r\n      override[prop] ?? prop,\r\n      type === PoTableColumnSortType.Ascending ? 'asc' : 'desc',\r\n      extractors\r\n    );\r\n  }\r\n\r\n  static fromExpression<F = string>(\r\n    expr: string,\r\n    extractors: SortFieldsExtractor = {}\r\n  ): Sort<F> {\r\n    const field = expr.replace(/^(\\+|\\-)/, '') as any;\r\n    return new Sort<F>(field, expr[0] === '+' ? 'asc' : 'desc', extractors);\r\n  }\r\n\r\n  constructor(\r\n    public field: Fields,\r\n    public direction: 'asc' | 'desc',\r\n    private extractors: SortFieldsExtractor = {}\r\n  ) {}\r\n\r\n  get expression(): string {\r\n    return `${this.direction === 'asc' ? '+' : '-'}${this.field}`;\r\n  }\r\n\r\n  get ascending(): boolean {\r\n    return this.direction === 'asc';\r\n  }\r\n\r\n  apply<T = any>(items: T[]): T[] {\r\n    return items.sort((a, b) => {\r\n      const f = this.field as any;\r\n      const va = this.extractors[f] ? this.extractors[f](a) : a[f];\r\n      const vb = this.extractors[f] ? this.extractors[f](b) : b[f];\r\n      if (va === vb) return 0;\r\n      else {\r\n        if (va > vb) return this.direction === 'asc' ? 1 : -1;\r\n        else return this.direction === 'asc' ? -1 : 1;\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function searchString(value?: string, filter = ''): boolean {\r\n  return (\r\n    filter === '' || value?.toUpperCase().indexOf(filter.toUpperCase()) >= 0\r\n  );\r\n}\r\n\r\nexport function searchOneOf(filter = '', values: string[]): boolean {\r\n  return !!values.find((value) => searchString(value, filter));\r\n}\r\n\r\nexport function simularDelay<T>(result: T | Observable<T>): Observable<T> {\r\n  const observable = isObservable(result) ? result : of(result);\r\n  if (environment.delaySimulado?.length === 2) {\r\n    const [min, max] = environment.delaySimulado;\r\n    return observable.pipe(\r\n      delay(Math.round(Math.random() * (max - min) + min))\r\n    );\r\n  }\r\n  return observable;\r\n}\r\n\r\nexport function filtrar<R = any, SortFields = any>(\r\n  values: any[],\r\n  page: Pageable,\r\n  sort: Sort<SortFields> | undefined,\r\n  predicate: (val: any) => boolean,\r\n  deserializer: (val: any) => R\r\n): Page<R> {\r\n  let filtrado = values.filter(predicate);\r\n  if (sort) filtrado = sort.apply(filtrado);\r\n  const items = page.apply(filtrado).map(deserializer);\r\n  return {\r\n    items,\r\n    hasNext: filtrado.length > page.offset + items.length,\r\n  };\r\n}\r\n\r\nexport interface PageState<T, F = string> {\r\n  items: T[];\r\n  hasNext: boolean;\r\n  loading: boolean;\r\n  sort?: Sort<F>;\r\n}\r\n\r\nexport class PageStateSubject<T, F = string> {\r\n  constructor(\r\n    private service: (\r\n      pageable: Pageable,\r\n      filter: string,\r\n      sort: Sort<F>\r\n    ) => Observable<Page<T>>,\r\n    private takeWhile: <R = any>() => MonoTypeOperatorFunction<R>\r\n  ) {\r\n    this.resultSubject.pipe(this.takeWhile()).subscribe(\r\n      () => this.loadingSubject.next(false),\r\n      () => this.loadingSubject.next(false)\r\n    );\r\n  }\r\n\r\n  private resultSubject = new BehaviorSubject<Page<T>>({\r\n    items: [],\r\n    hasNext: false,\r\n  });\r\n\r\n  private loadingSubject = new BehaviorSubject<boolean>(false);\r\n\r\n  private page = 1;\r\n  private pageSize = 20;\r\n  private filter = '';\r\n  private sort: Sort<F>;\r\n\r\n  setSort(sort: Sort<F>): void {\r\n    this.page = 1;\r\n    this.sort = sort;\r\n    this.load(true);\r\n  }\r\n\r\n  setFilter(filter: string): void {\r\n    this.page = 1;\r\n    this.filter = filter;\r\n    this.load(true);\r\n  }\r\n\r\n  nextPage(): void {\r\n    this.page++;\r\n    this.load();\r\n  }\r\n\r\n  load(reset = false): void {\r\n    this.loadingSubject.next(true);\r\n    this.service(new Pageable(this.page, this.pageSize), this.filter, this.sort)\r\n      .pipe(this.takeWhile(), take(1), withLatestFrom(this.resultSubject))\r\n      .subscribe(\r\n        ([result, current]) => {\r\n          this.resultSubject.next({\r\n            hasNext: result.hasNext,\r\n            items: reset ? result.items : [...current.items, ...result.items],\r\n          });\r\n        },\r\n        (error) => this.resultSubject.error(error)\r\n      );\r\n  }\r\n\r\n  asObservable(): Observable<PageState<T, F>> {\r\n    return combineLatest([this.resultSubject, this.loadingSubject]).pipe(\r\n      this.takeWhile(),\r\n      map(([result, loading]) => ({\r\n        ...result,\r\n        sort: this.sort,\r\n        loading,\r\n      }))\r\n    );\r\n  }\r\n\r\n  subscribe(\r\n    next: (state: PageState<T, F>) => void,\r\n    error?: (err: any) => void\r\n  ): Subscription {\r\n    return this.asObservable().subscribe(next, error);\r\n  }\r\n}\r\n\r\nexport interface LookupErrorsMessages {\r\n  notFound: string;\r\n  multipleFound: (length: number) => string;\r\n}\r\n\r\nexport function tryMapToUniqueResult<T = any>(\r\n  errors: LookupErrorsMessages,\r\n  predicate: (item: T) => boolean\r\n): OperatorFunction<T[], T> {\r\n  return mergeMap((res: T[]) => {\r\n    if (res.length === 1) return of(res[0]);\r\n    const prof = res.find(predicate);\r\n    if (prof) return of(prof);\r\n    return throwError(\r\n      new Error(\r\n        res.length === 0 ? errors.notFound : errors.multipleFound(res.length)\r\n      )\r\n    );\r\n  });\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "page",
                        "type": "number",
                        "defaultValue": "1"
                    },
                    {
                        "name": "pageSize",
                        "type": "number",
                        "defaultValue": "20"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "page",
                        "type": "number",
                        "defaultValue": "1",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageSize",
                        "type": "number",
                        "defaultValue": "20",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "page",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pageSize",
                    "defaultValue": "20",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "apply",
                    "args": [
                        {
                            "name": "items",
                            "type": "T[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "T[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "next",
                    "args": [],
                    "optional": false,
                    "returnType": "Pageable",
                    "typeParameters": [],
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "offset": {
                    "name": "offset",
                    "getSignature": {
                        "name": "offset",
                        "type": "number",
                        "returnType": "number",
                        "line": 24
                    }
                },
                "endOffset": {
                    "name": "endOffset",
                    "getSignature": {
                        "name": "endOffset",
                        "type": "number",
                        "returnType": "number",
                        "line": 28
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PageStateSubject",
            "id": "class-PageStateSubject-e01289057576875b1c8b8b163c02eb08",
            "file": "src/app/shared/util/service.util.ts",
            "type": "class",
            "sourceCode": "import {\r\n  Observable,\r\n  of,\r\n  isObservable,\r\n  BehaviorSubject,\r\n  combineLatest,\r\n  MonoTypeOperatorFunction,\r\n  Subscription,\r\n  throwError,\r\n  OperatorFunction,\r\n} from 'rxjs';\r\nimport { delay, take, map, withLatestFrom, mergeMap } from 'rxjs/operators';\r\nimport { environment } from 'environments/environment';\r\nimport { PoTableColumn, PoTableColumnSortType } from '@po-ui/ng-components';\r\n\r\nexport interface Page<T> {\r\n  items: T[];\r\n  hasNext: boolean;\r\n}\r\n\r\nexport class Pageable {\r\n  constructor(public page = 1, public pageSize = 20) {}\r\n\r\n  get offset(): number {\r\n    return this.page * this.pageSize - this.pageSize;\r\n  }\r\n\r\n  get endOffset(): number {\r\n    return this.offset + this.pageSize;\r\n  }\r\n\r\n  next(): Pageable {\r\n    return new Pageable(this.page + 1, this.pageSize);\r\n  }\r\n\r\n  apply<T = any>(items: T[]): T[] {\r\n    return items.slice(this.offset, this.endOffset);\r\n  }\r\n}\r\n\r\ninterface PoTableColumnSort {\r\n  column: PoTableColumn;\r\n  type: PoTableColumnSortType;\r\n}\r\n\r\ninterface SortFieldsOverride<Fields = string> {\r\n  [key: string]: Fields;\r\n}\r\n\r\nexport type SortFieldsExtractor = {\r\n  [field: string]: (item: any) => string;\r\n};\r\n\r\nexport class Sort<Fields = string> {\r\n  static fromOrderChange<F = string>(\r\n    { column, type }: PoTableColumnSort,\r\n    override: SortFieldsOverride<F> = {},\r\n    extractors: SortFieldsExtractor = {}\r\n  ): Sort<F> {\r\n    const prop = column.property as any;\r\n    return new Sort<F>(\r\n      override[prop] ?? prop,\r\n      type === PoTableColumnSortType.Ascending ? 'asc' : 'desc',\r\n      extractors\r\n    );\r\n  }\r\n\r\n  static fromExpression<F = string>(\r\n    expr: string,\r\n    extractors: SortFieldsExtractor = {}\r\n  ): Sort<F> {\r\n    const field = expr.replace(/^(\\+|\\-)/, '') as any;\r\n    return new Sort<F>(field, expr[0] === '+' ? 'asc' : 'desc', extractors);\r\n  }\r\n\r\n  constructor(\r\n    public field: Fields,\r\n    public direction: 'asc' | 'desc',\r\n    private extractors: SortFieldsExtractor = {}\r\n  ) {}\r\n\r\n  get expression(): string {\r\n    return `${this.direction === 'asc' ? '+' : '-'}${this.field}`;\r\n  }\r\n\r\n  get ascending(): boolean {\r\n    return this.direction === 'asc';\r\n  }\r\n\r\n  apply<T = any>(items: T[]): T[] {\r\n    return items.sort((a, b) => {\r\n      const f = this.field as any;\r\n      const va = this.extractors[f] ? this.extractors[f](a) : a[f];\r\n      const vb = this.extractors[f] ? this.extractors[f](b) : b[f];\r\n      if (va === vb) return 0;\r\n      else {\r\n        if (va > vb) return this.direction === 'asc' ? 1 : -1;\r\n        else return this.direction === 'asc' ? -1 : 1;\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function searchString(value?: string, filter = ''): boolean {\r\n  return (\r\n    filter === '' || value?.toUpperCase().indexOf(filter.toUpperCase()) >= 0\r\n  );\r\n}\r\n\r\nexport function searchOneOf(filter = '', values: string[]): boolean {\r\n  return !!values.find((value) => searchString(value, filter));\r\n}\r\n\r\nexport function simularDelay<T>(result: T | Observable<T>): Observable<T> {\r\n  const observable = isObservable(result) ? result : of(result);\r\n  if (environment.delaySimulado?.length === 2) {\r\n    const [min, max] = environment.delaySimulado;\r\n    return observable.pipe(\r\n      delay(Math.round(Math.random() * (max - min) + min))\r\n    );\r\n  }\r\n  return observable;\r\n}\r\n\r\nexport function filtrar<R = any, SortFields = any>(\r\n  values: any[],\r\n  page: Pageable,\r\n  sort: Sort<SortFields> | undefined,\r\n  predicate: (val: any) => boolean,\r\n  deserializer: (val: any) => R\r\n): Page<R> {\r\n  let filtrado = values.filter(predicate);\r\n  if (sort) filtrado = sort.apply(filtrado);\r\n  const items = page.apply(filtrado).map(deserializer);\r\n  return {\r\n    items,\r\n    hasNext: filtrado.length > page.offset + items.length,\r\n  };\r\n}\r\n\r\nexport interface PageState<T, F = string> {\r\n  items: T[];\r\n  hasNext: boolean;\r\n  loading: boolean;\r\n  sort?: Sort<F>;\r\n}\r\n\r\nexport class PageStateSubject<T, F = string> {\r\n  constructor(\r\n    private service: (\r\n      pageable: Pageable,\r\n      filter: string,\r\n      sort: Sort<F>\r\n    ) => Observable<Page<T>>,\r\n    private takeWhile: <R = any>() => MonoTypeOperatorFunction<R>\r\n  ) {\r\n    this.resultSubject.pipe(this.takeWhile()).subscribe(\r\n      () => this.loadingSubject.next(false),\r\n      () => this.loadingSubject.next(false)\r\n    );\r\n  }\r\n\r\n  private resultSubject = new BehaviorSubject<Page<T>>({\r\n    items: [],\r\n    hasNext: false,\r\n  });\r\n\r\n  private loadingSubject = new BehaviorSubject<boolean>(false);\r\n\r\n  private page = 1;\r\n  private pageSize = 20;\r\n  private filter = '';\r\n  private sort: Sort<F>;\r\n\r\n  setSort(sort: Sort<F>): void {\r\n    this.page = 1;\r\n    this.sort = sort;\r\n    this.load(true);\r\n  }\r\n\r\n  setFilter(filter: string): void {\r\n    this.page = 1;\r\n    this.filter = filter;\r\n    this.load(true);\r\n  }\r\n\r\n  nextPage(): void {\r\n    this.page++;\r\n    this.load();\r\n  }\r\n\r\n  load(reset = false): void {\r\n    this.loadingSubject.next(true);\r\n    this.service(new Pageable(this.page, this.pageSize), this.filter, this.sort)\r\n      .pipe(this.takeWhile(), take(1), withLatestFrom(this.resultSubject))\r\n      .subscribe(\r\n        ([result, current]) => {\r\n          this.resultSubject.next({\r\n            hasNext: result.hasNext,\r\n            items: reset ? result.items : [...current.items, ...result.items],\r\n          });\r\n        },\r\n        (error) => this.resultSubject.error(error)\r\n      );\r\n  }\r\n\r\n  asObservable(): Observable<PageState<T, F>> {\r\n    return combineLatest([this.resultSubject, this.loadingSubject]).pipe(\r\n      this.takeWhile(),\r\n      map(([result, loading]) => ({\r\n        ...result,\r\n        sort: this.sort,\r\n        loading,\r\n      }))\r\n    );\r\n  }\r\n\r\n  subscribe(\r\n    next: (state: PageState<T, F>) => void,\r\n    error?: (err: any) => void\r\n  ): Subscription {\r\n    return this.asObservable().subscribe(next, error);\r\n  }\r\n}\r\n\r\nexport interface LookupErrorsMessages {\r\n  notFound: string;\r\n  multipleFound: (length: number) => string;\r\n}\r\n\r\nexport function tryMapToUniqueResult<T = any>(\r\n  errors: LookupErrorsMessages,\r\n  predicate: (item: T) => boolean\r\n): OperatorFunction<T[], T> {\r\n  return mergeMap((res: T[]) => {\r\n    if (res.length === 1) return of(res[0]);\r\n    const prof = res.find(predicate);\r\n    if (prof) return of(prof);\r\n    return throwError(\r\n      new Error(\r\n        res.length === 0 ? errors.notFound : errors.multipleFound(res.length)\r\n      )\r\n    );\r\n  });\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "service",
                        "type": "function",
                        "function": [
                            {
                                "name": "pageable",
                                "type": "Pageable"
                            },
                            {
                                "name": "filter",
                                "type": "string"
                            },
                            {
                                "name": "sort",
                                "type": "Sort<F>"
                            }
                        ]
                    },
                    {
                        "name": "takeWhile",
                        "type": "function",
                        "function": []
                    }
                ],
                "line": 148,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "function",
                        "function": [
                            {
                                "name": "pageable",
                                "type": "Pageable"
                            },
                            {
                                "name": "filter",
                                "type": "string"
                            },
                            {
                                "name": "sort",
                                "type": "Sort<F>"
                            }
                        ],
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "takeWhile",
                        "type": "function",
                        "function": [],
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "filter",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 172,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "loadingSubject",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 168,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "page",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 170,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "pageSize",
                    "defaultValue": "20",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 171,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "resultSubject",
                    "defaultValue": "new BehaviorSubject<Page<T>>({\r\n    items: [],\r\n    hasNext: false,\r\n  })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 163,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "sort",
                    "type": "Sort<F>",
                    "optional": false,
                    "description": "",
                    "line": 173,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "asObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PageState<T, F>>",
                    "typeParameters": [],
                    "line": 207
                },
                {
                    "name": "load",
                    "args": [
                        {
                            "name": "reset",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192,
                    "jsdoctags": [
                        {
                            "name": "reset",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nextPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 187
                },
                {
                    "name": "setFilter",
                    "args": [
                        {
                            "name": "filter",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 181,
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSort",
                    "args": [
                        {
                            "name": "sort",
                            "type": "Sort<F>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175,
                    "jsdoctags": [
                        {
                            "name": "sort",
                            "type": "Sort<F>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribe",
                    "args": [
                        {
                            "name": "next",
                            "type": "function",
                            "function": [
                                {
                                    "name": "state",
                                    "type": "PageState<T | F>"
                                }
                            ]
                        },
                        {
                            "name": "error",
                            "type": "function",
                            "optional": true,
                            "function": [
                                {
                                    "name": "err",
                                    "type": "any"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Subscription",
                    "typeParameters": [],
                    "line": 218,
                    "jsdoctags": [
                        {
                            "name": "next",
                            "type": "function",
                            "function": [
                                {
                                    "name": "state",
                                    "type": "PageState<T | F>"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "error",
                            "type": "function",
                            "optional": true,
                            "function": [
                                {
                                    "name": "err",
                                    "type": "any"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Pessoa",
            "id": "class-Pessoa-fc1034571985a333dde3fe511edeb92d",
            "file": "src/app/domain/pessoa/pessoa.ts",
            "type": "class",
            "sourceCode": "import { Validators, FormBuilder, FormGroup } from '@angular/forms';\r\nimport { Entidade, Id, EntidadeJson } from '../entidade';\r\nimport { CustomValidators, NotTakenService } from 'app/shared/validators';\r\nimport { of } from 'rxjs';\r\nimport { format as formatCpf } from '@fnando/cpf';\r\nimport { Predicate } from '@angular/core';\r\n\r\nconst DEFAULT_NOT_TAKEN_SERVICE: NotTakenService = () => of(true);\r\n\r\nexport type PessoaSortFields = 'nome' | 'email' | 'cpf';\r\n\r\nexport interface CpfNotTakenJson {\r\n  id: Id;\r\n  cpf: string;\r\n}\r\n\r\nexport interface EmailNotTakenJson {\r\n  id: Id;\r\n  email: string;\r\n}\r\n\r\nexport interface PessoaJson extends EntidadeJson {\r\n  nome: string;\r\n  email: string;\r\n  cpf: string;\r\n}\r\n\r\nexport abstract class Pessoa extends Entidade {\r\n  public static nomeOuCpfPredicate<R extends Pessoa>(\r\n    query: string\r\n  ): Predicate<R> {\r\n    return ({ nome, cpf }) =>\r\n      nome === query || cpf === query.replace(/(\\.|\\-)/g, '');\r\n  }\r\n\r\n  constructor(id: Id, public nome = '', public email = '', public cpf = '') {\r\n    super(id);\r\n  }\r\n\r\n  get cpfFormatado(): string {\r\n    return formatCpf(this.cpf);\r\n  }\r\n\r\n  protected onChanges({ nome, email, cpf }: any): void {\r\n    this.nome = nome;\r\n    this.email = email;\r\n    this.cpf = cpf;\r\n  }\r\n\r\n  protected getFormControls(\r\n    emailNotTaken: NotTakenService,\r\n    cpfNotTaken: NotTakenService\r\n  ): any {\r\n    return {\r\n      nome: [this.nome, [Validators.required, Validators.maxLength(255)]],\r\n      email: [\r\n        this.email,\r\n        [\r\n          Validators.required,\r\n          Validators.maxLength(255),\r\n          CustomValidators.email,\r\n        ],\r\n        CustomValidators.notTakenValidator(emailNotTaken, 'emailTaken'),\r\n      ],\r\n      cpf: [\r\n        this.cpf,\r\n        [\r\n          Validators.required,\r\n          Validators.minLength(11),\r\n          Validators.maxLength(11),\r\n          CustomValidators.cpf,\r\n        ],\r\n        CustomValidators.notTakenValidator(cpfNotTaken, 'cpfTaken'),\r\n      ],\r\n    };\r\n  }\r\n\r\n  public criarForm(\r\n    builder: FormBuilder,\r\n    emailNotTaken = DEFAULT_NOT_TAKEN_SERVICE,\r\n    cpfNotTaken = DEFAULT_NOT_TAKEN_SERVICE\r\n  ): FormGroup {\r\n    return builder.group(this.getFormControls(emailNotTaken, cpfNotTaken));\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "id",
                        "type": "Id"
                    },
                    {
                        "name": "nome",
                        "type": "string",
                        "defaultValue": "''"
                    },
                    {
                        "name": "email",
                        "type": "string",
                        "defaultValue": "''"
                    },
                    {
                        "name": "cpf",
                        "type": "string",
                        "defaultValue": "''"
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "Id",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "nome",
                        "type": "string",
                        "defaultValue": "''",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "email",
                        "type": "string",
                        "defaultValue": "''",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cpf",
                        "type": "string",
                        "defaultValue": "''",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "cpf",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "email",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "nome",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "id",
                    "type": "Id",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "Entidade"
                    }
                }
            ],
            "methods": [
                {
                    "name": "criarForm",
                    "args": [
                        {
                            "name": "builder",
                            "type": "FormBuilder"
                        },
                        {
                            "name": "emailNotTaken",
                            "type": "",
                            "defaultValue": "DEFAULT_NOT_TAKEN_SERVICE"
                        },
                        {
                            "name": "cpfNotTaken",
                            "type": "",
                            "defaultValue": "DEFAULT_NOT_TAKEN_SERVICE"
                        }
                    ],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 78,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "builder",
                            "type": "FormBuilder",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "emailNotTaken",
                            "type": "",
                            "defaultValue": "DEFAULT_NOT_TAKEN_SERVICE",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cpfNotTaken",
                            "type": "",
                            "defaultValue": "DEFAULT_NOT_TAKEN_SERVICE",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormControls",
                    "args": [
                        {
                            "name": "emailNotTaken",
                            "type": "NotTakenService"
                        },
                        {
                            "name": "cpfNotTaken",
                            "type": "NotTakenService"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 50,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "emailNotTaken",
                            "type": "NotTakenService",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cpfNotTaken",
                            "type": "NotTakenService",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nomeOuCpfPredicate",
                    "args": [
                        {
                            "name": "query",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Predicate<R>",
                    "typeParameters": [
                        "R"
                    ],
                    "line": 29,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onChanges",
                    "args": [
                        {
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fromForm",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Entidade"
                    }
                },
                {
                    "name": "onChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Entidade"
                    }
                },
                {
                    "name": "subscribeFormChanges",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup"
                        },
                        {
                            "name": "shouldContinue",
                            "type": "MonoTypeOperatorFunction<any>",
                            "defaultValue": "takeWhile(() => true)"
                        },
                        {
                            "name": "onChange",
                            "type": "function",
                            "optional": true,
                            "function": [
                                {
                                    "name": "value",
                                    "type": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Subscription",
                    "typeParameters": [],
                    "line": 21,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "shouldContinue",
                            "type": "MonoTypeOperatorFunction<any>",
                            "defaultValue": "takeWhile(() => true)",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "onChange",
                            "type": "function",
                            "optional": true,
                            "function": [
                                {
                                    "name": "value",
                                    "type": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Entidade"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "Entidade",
            "accessors": {
                "cpfFormatado": {
                    "name": "cpfFormatado",
                    "getSignature": {
                        "name": "cpfFormatado",
                        "type": "string",
                        "returnType": "string",
                        "line": 40
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PessoaService",
            "id": "class-PessoaService-482c769b8869a79f4a0aedf4c053cae5",
            "file": "src/app/domain/pessoa/pessoa.service.ts",
            "type": "class",
            "sourceCode": "import { EntidadeService } from '../entidade.service';\r\nimport {\r\n  Pessoa,\r\n  PessoaJson,\r\n  CpfNotTakenJson,\r\n  EmailNotTakenJson,\r\n} from './pessoa';\r\nimport { Observable, throwError, of } from 'rxjs';\r\nimport { mergeMap, map, catchError, mapTo } from 'rxjs/operators';\r\nimport {\r\n  tryMapToUniqueResult,\r\n  LookupErrorsMessages,\r\n  simularDelay,\r\n} from 'app/shared/util/service.util';\r\n\r\nexport abstract class PessoaService<\r\n  T extends Pessoa,\r\n  J extends PessoaJson,\r\n  F = string\r\n> extends EntidadeService<T, J, F> {\r\n  protected abstract lookupErrors: LookupErrorsMessages;\r\n\r\n  cpfNotTaken(data: CpfNotTakenJson): Observable<boolean> {\r\n    return this.http\r\n      .post(`${this.endpoints.query.urlCompleta}/cpfNotTaken`, data, {\r\n        observe: 'response',\r\n      })\r\n      .pipe(\r\n        mergeMap((res) => {\r\n          if (res.status < 400) return of(true);\r\n          else if (res.status === 400) return of(false);\r\n          else throwError(res);\r\n        }),\r\n        mergeMap(simularDelay)\r\n      );\r\n  }\r\n\r\n  emailNotTaken(data: EmailNotTakenJson): Observable<boolean> {\r\n    return this.http\r\n      .post(`${this.endpoints.query.urlCompleta}/emailNotTaken`, data, {\r\n        observe: 'response',\r\n      })\r\n      .pipe(\r\n        mergeMap((res) => {\r\n          if (res.status < 400) return of(true);\r\n          else if (res.status === 400) return of(false);\r\n          else throwError(res);\r\n        }),\r\n        mergeMap(simularDelay)\r\n      );\r\n  }\r\n\r\n  lookup(query: string): Observable<T> {\r\n    return this.http\r\n      .get<J[] | string>(`${this.endpoints.query.urlCompleta}/lookup`, {\r\n        params: {\r\n          query,\r\n        },\r\n      })\r\n      .pipe(\r\n        mergeMap((res) => (Array.isArray(res) ? of(res) : throwError(res))),\r\n        map((res) => res.map((json) => this.fromJson(json))),\r\n        catchError((error) => {\r\n          console.error(error);\r\n          return throwError(error);\r\n        }),\r\n        tryMapToUniqueResult(\r\n          this.lookupErrors,\r\n          Pessoa.nomeOuCpfPredicate<T>(query)\r\n        ),\r\n        mergeMap(simularDelay)\r\n      );\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "lookupErrors",
                    "type": "LookupErrorsMessages",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        113,
                        117
                    ]
                },
                {
                    "name": "endpoints",
                    "type": "Endpoints",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "inheritance": {
                        "file": "EntidadeService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "cpfNotTaken",
                    "args": [
                        {
                            "name": "data",
                            "type": "CpfNotTakenJson"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "CpfNotTakenJson",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emailNotTaken",
                    "args": [
                        {
                            "name": "data",
                            "type": "EmailNotTakenJson"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "EmailNotTakenJson",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "lookup",
                    "args": [
                        {
                            "name": "query",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createEvent",
                    "args": [
                        {
                            "name": "entidade",
                            "type": "E"
                        },
                        {
                            "name": "eventType",
                            "type": "EntidadeEventType"
                        }
                    ],
                    "optional": false,
                    "returnType": "EntidadeEvent<E>",
                    "typeParameters": [],
                    "line": 41,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "entidade",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "eventType",
                            "type": "EntidadeEventType",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "EntidadeService"
                    }
                },
                {
                    "name": "filtrar",
                    "args": [
                        {
                            "type": "Pageable"
                        },
                        {
                            "name": "filtro",
                            "type": "string",
                            "defaultValue": "''"
                        },
                        {
                            "name": "sort",
                            "type": "Sort<SF>",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Page<E>>",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "type": "Pageable",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filtro",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sort",
                            "type": "Sort<SF>",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "EntidadeService"
                    }
                },
                {
                    "name": "fromJson",
                    "args": [
                        {
                            "name": "json",
                            "type": "J"
                        }
                    ],
                    "optional": false,
                    "returnType": "E",
                    "typeParameters": [],
                    "line": 39,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "json",
                            "type": "J",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "EntidadeService"
                    }
                },
                {
                    "name": "recuperarPorId",
                    "args": [
                        {
                            "name": "id",
                            "type": "Id"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<E>",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "Id",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "EntidadeService"
                    }
                },
                {
                    "name": "salvar",
                    "args": [
                        {
                            "name": "entidade",
                            "type": "E"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<E>",
                    "typeParameters": [],
                    "line": 79,
                    "jsdoctags": [
                        {
                            "name": "entidade",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "EntidadeService"
                    }
                },
                {
                    "name": "toJson",
                    "args": [
                        {
                            "name": "entidade",
                            "type": "E"
                        }
                    ],
                    "optional": false,
                    "returnType": "J",
                    "typeParameters": [],
                    "line": 46,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "entidade",
                            "type": "E",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "EntidadeService"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "EntidadeService",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Professor",
            "id": "class-Professor-4184c5fe945ca1aca77db9a1834fb220",
            "file": "src/app/domain/pessoa/professor/professor.ts",
            "type": "class",
            "sourceCode": "import { AbstractControl, Validators } from '@angular/forms';\r\nimport { Id, EntidadeEvent } from 'app/domain/entidade';\r\nimport { Pessoa, PessoaJson, PessoaSortFields } from '../pessoa';\r\nimport { NotTakenService } from 'app/shared/validators';\r\nimport { Predicate } from '@angular/core';\r\n\r\nexport class ProfessorEvent extends EntidadeEvent<Professor> {}\r\n\r\nexport interface ProfessorJson extends PessoaJson {\r\n  titulacao: string;\r\n}\r\n\r\nexport type ProfessorSortFields = PessoaSortFields | 'titulacao';\r\n\r\nexport enum Titulacao {\r\n  MESTRE = 'Mestre',\r\n  DOUTOR = 'Doutor',\r\n  PHD = 'PHD',\r\n}\r\n\r\nexport class Professor extends Pessoa {\r\n  public static fromJson({ id, nome, email, cpf, titulacao }: any): Professor {\r\n    return new Professor(id, nome, email, cpf, titulacao);\r\n  }\r\n\r\n  constructor(\r\n    id: Id = null,\r\n    nome = '',\r\n    email = '',\r\n    cpf = '',\r\n    public titulacao: Titulacao | '' = ''\r\n  ) {\r\n    super(id, nome, email, cpf);\r\n  }\r\n\r\n  protected onChanges({ titulacao, ...pessoa }: any): void {\r\n    super.onChanges(pessoa);\r\n    this.titulacao = titulacao;\r\n  }\r\n\r\n  protected getFormControls(\r\n    emailNotTaken: NotTakenService,\r\n    cpfNotTaken: NotTakenService\r\n  ): any {\r\n    return {\r\n      ...super.getFormControls(emailNotTaken, cpfNotTaken),\r\n      titulacao: [\r\n        this.titulacao,\r\n        [Validators.required, this.titulacaoValidator],\r\n      ],\r\n    };\r\n  }\r\n\r\n  private titulacaoValidator(\r\n    control: AbstractControl\r\n  ): { titulacao: boolean } | null {\r\n    const value: string = control.value;\r\n\r\n    if (value)\r\n      switch (value) {\r\n        case Titulacao.DOUTOR:\r\n        case Titulacao.MESTRE:\r\n        case Titulacao.PHD:\r\n          break;\r\n        default:\r\n          return { titulacao: true };\r\n      }\r\n    return null;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "id",
                        "type": "Id",
                        "defaultValue": "null"
                    },
                    {
                        "name": "nome",
                        "type": "string",
                        "defaultValue": "''"
                    },
                    {
                        "name": "email",
                        "type": "string",
                        "defaultValue": "''"
                    },
                    {
                        "name": "cpf",
                        "type": "string",
                        "defaultValue": "''"
                    },
                    {
                        "name": "titulacao",
                        "type": "Titulacao | \"\"",
                        "defaultValue": "''"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "Id",
                        "defaultValue": "null",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "nome",
                        "type": "string",
                        "defaultValue": "''",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "email",
                        "type": "string",
                        "defaultValue": "''",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cpf",
                        "type": "string",
                        "defaultValue": "''",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "titulacao",
                        "type": "Titulacao | \"\"",
                        "defaultValue": "''",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "titulacao",
                    "defaultValue": "''",
                    "type": "Titulacao | \"\"",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "cpf",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "Pessoa"
                    }
                },
                {
                    "name": "email",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "Pessoa"
                    }
                },
                {
                    "name": "nome",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "Pessoa"
                    }
                },
                {
                    "name": "id",
                    "type": "Id",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "Pessoa"
                    }
                },
                {
                    "name": "id",
                    "type": "Id",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "Entidade"
                    }
                }
            ],
            "methods": [
                {
                    "name": "fromJson",
                    "args": [
                        {
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Professor",
                    "typeParameters": [],
                    "line": 22,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormControls",
                    "args": [
                        {
                            "name": "emailNotTaken",
                            "type": "NotTakenService"
                        },
                        {
                            "name": "cpfNotTaken",
                            "type": "NotTakenService"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "emailNotTaken",
                            "type": "NotTakenService",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cpfNotTaken",
                            "type": "NotTakenService",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onChanges",
                    "args": [
                        {
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "titulacaoValidator",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl"
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type | null",
                    "typeParameters": [],
                    "line": 54,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "criarForm",
                    "args": [
                        {
                            "name": "builder",
                            "type": "FormBuilder"
                        },
                        {
                            "name": "emailNotTaken",
                            "type": "",
                            "defaultValue": "DEFAULT_NOT_TAKEN_SERVICE"
                        },
                        {
                            "name": "cpfNotTaken",
                            "type": "",
                            "defaultValue": "DEFAULT_NOT_TAKEN_SERVICE"
                        }
                    ],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 78,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "builder",
                            "type": "FormBuilder",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "emailNotTaken",
                            "type": "",
                            "defaultValue": "DEFAULT_NOT_TAKEN_SERVICE",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cpfNotTaken",
                            "type": "",
                            "defaultValue": "DEFAULT_NOT_TAKEN_SERVICE",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Pessoa"
                    }
                },
                {
                    "name": "getFormControls",
                    "args": [
                        {
                            "name": "emailNotTaken",
                            "type": "NotTakenService"
                        },
                        {
                            "name": "cpfNotTaken",
                            "type": "NotTakenService"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 50,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "emailNotTaken",
                            "type": "NotTakenService",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cpfNotTaken",
                            "type": "NotTakenService",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Pessoa"
                    }
                },
                {
                    "name": "nomeOuCpfPredicate",
                    "args": [
                        {
                            "name": "query",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Predicate<R>",
                    "typeParameters": [
                        "R"
                    ],
                    "line": 29,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Pessoa"
                    }
                },
                {
                    "name": "onChanges",
                    "args": [
                        {
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Pessoa"
                    }
                },
                {
                    "name": "fromForm",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Pessoa"
                    }
                },
                {
                    "name": "onChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Pessoa"
                    }
                },
                {
                    "name": "subscribeFormChanges",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup"
                        },
                        {
                            "name": "shouldContinue",
                            "type": "MonoTypeOperatorFunction<any>",
                            "defaultValue": "takeWhile(() => true)"
                        },
                        {
                            "name": "onChange",
                            "type": "function",
                            "optional": true,
                            "function": [
                                {
                                    "name": "value",
                                    "type": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Subscription",
                    "typeParameters": [],
                    "line": 21,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "shouldContinue",
                            "type": "MonoTypeOperatorFunction<any>",
                            "defaultValue": "takeWhile(() => true)",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "onChange",
                            "type": "function",
                            "optional": true,
                            "function": [
                                {
                                    "name": "value",
                                    "type": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Pessoa"
                    }
                },
                {
                    "name": "fromForm",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Entidade"
                    }
                },
                {
                    "name": "onChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Entidade"
                    }
                },
                {
                    "name": "subscribeFormChanges",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup"
                        },
                        {
                            "name": "shouldContinue",
                            "type": "MonoTypeOperatorFunction<any>",
                            "defaultValue": "takeWhile(() => true)"
                        },
                        {
                            "name": "onChange",
                            "type": "function",
                            "optional": true,
                            "function": [
                                {
                                    "name": "value",
                                    "type": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Subscription",
                    "typeParameters": [],
                    "line": 21,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "shouldContinue",
                            "type": "MonoTypeOperatorFunction<any>",
                            "defaultValue": "takeWhile(() => true)",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "onChange",
                            "type": "function",
                            "optional": true,
                            "function": [
                                {
                                    "name": "value",
                                    "type": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Entidade"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "Pessoa",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProfessorEvent",
            "id": "class-ProfessorEvent-4184c5fe945ca1aca77db9a1834fb220",
            "file": "src/app/domain/pessoa/professor/professor.ts",
            "type": "class",
            "sourceCode": "import { AbstractControl, Validators } from '@angular/forms';\r\nimport { Id, EntidadeEvent } from 'app/domain/entidade';\r\nimport { Pessoa, PessoaJson, PessoaSortFields } from '../pessoa';\r\nimport { NotTakenService } from 'app/shared/validators';\r\nimport { Predicate } from '@angular/core';\r\n\r\nexport class ProfessorEvent extends EntidadeEvent<Professor> {}\r\n\r\nexport interface ProfessorJson extends PessoaJson {\r\n  titulacao: string;\r\n}\r\n\r\nexport type ProfessorSortFields = PessoaSortFields | 'titulacao';\r\n\r\nexport enum Titulacao {\r\n  MESTRE = 'Mestre',\r\n  DOUTOR = 'Doutor',\r\n  PHD = 'PHD',\r\n}\r\n\r\nexport class Professor extends Pessoa {\r\n  public static fromJson({ id, nome, email, cpf, titulacao }: any): Professor {\r\n    return new Professor(id, nome, email, cpf, titulacao);\r\n  }\r\n\r\n  constructor(\r\n    id: Id = null,\r\n    nome = '',\r\n    email = '',\r\n    cpf = '',\r\n    public titulacao: Titulacao | '' = ''\r\n  ) {\r\n    super(id, nome, email, cpf);\r\n  }\r\n\r\n  protected onChanges({ titulacao, ...pessoa }: any): void {\r\n    super.onChanges(pessoa);\r\n    this.titulacao = titulacao;\r\n  }\r\n\r\n  protected getFormControls(\r\n    emailNotTaken: NotTakenService,\r\n    cpfNotTaken: NotTakenService\r\n  ): any {\r\n    return {\r\n      ...super.getFormControls(emailNotTaken, cpfNotTaken),\r\n      titulacao: [\r\n        this.titulacao,\r\n        [Validators.required, this.titulacaoValidator],\r\n      ],\r\n    };\r\n  }\r\n\r\n  private titulacaoValidator(\r\n    control: AbstractControl\r\n  ): { titulacao: boolean } | null {\r\n    const value: string = control.value;\r\n\r\n    if (value)\r\n      switch (value) {\r\n        case Titulacao.DOUTOR:\r\n        case Titulacao.MESTRE:\r\n        case Titulacao.PHD:\r\n          break;\r\n        default:\r\n          return { titulacao: true };\r\n      }\r\n    return null;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "entidade",
                    "type": "E",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "EntidadeEvent"
                    }
                },
                {
                    "name": "source",
                    "type": "EntidadeEventSource",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "EntidadeEvent"
                    }
                },
                {
                    "name": "type",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "EntidadeEvent"
                    }
                },
                {
                    "name": "type",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "AbstractEvent"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "EntidadeEvent",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "RouterUtil",
            "id": "class-RouterUtil-0f377a1e38d17376b2cbd51500a3d714",
            "file": "src/app/shared/util/router.util.ts",
            "type": "class",
            "sourceCode": "import { ActivatedRoute } from '@angular/router';\r\n\r\nexport class RouterUtil {\r\n  static urlFromRootToParent(route: ActivatedRoute): string[] {\r\n    return route.snapshot.parent.pathFromRoot\r\n      .map((r) => r.url)\r\n      .reduce((acc, item) => [...acc, ...item], [])\r\n      .map((seg) => seg.path);\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "urlFromRootToParent",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRoute"
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 4,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRoute",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Sort",
            "id": "class-Sort-e01289057576875b1c8b8b163c02eb08",
            "file": "src/app/shared/util/service.util.ts",
            "type": "class",
            "sourceCode": "import {\r\n  Observable,\r\n  of,\r\n  isObservable,\r\n  BehaviorSubject,\r\n  combineLatest,\r\n  MonoTypeOperatorFunction,\r\n  Subscription,\r\n  throwError,\r\n  OperatorFunction,\r\n} from 'rxjs';\r\nimport { delay, take, map, withLatestFrom, mergeMap } from 'rxjs/operators';\r\nimport { environment } from 'environments/environment';\r\nimport { PoTableColumn, PoTableColumnSortType } from '@po-ui/ng-components';\r\n\r\nexport interface Page<T> {\r\n  items: T[];\r\n  hasNext: boolean;\r\n}\r\n\r\nexport class Pageable {\r\n  constructor(public page = 1, public pageSize = 20) {}\r\n\r\n  get offset(): number {\r\n    return this.page * this.pageSize - this.pageSize;\r\n  }\r\n\r\n  get endOffset(): number {\r\n    return this.offset + this.pageSize;\r\n  }\r\n\r\n  next(): Pageable {\r\n    return new Pageable(this.page + 1, this.pageSize);\r\n  }\r\n\r\n  apply<T = any>(items: T[]): T[] {\r\n    return items.slice(this.offset, this.endOffset);\r\n  }\r\n}\r\n\r\ninterface PoTableColumnSort {\r\n  column: PoTableColumn;\r\n  type: PoTableColumnSortType;\r\n}\r\n\r\ninterface SortFieldsOverride<Fields = string> {\r\n  [key: string]: Fields;\r\n}\r\n\r\nexport type SortFieldsExtractor = {\r\n  [field: string]: (item: any) => string;\r\n};\r\n\r\nexport class Sort<Fields = string> {\r\n  static fromOrderChange<F = string>(\r\n    { column, type }: PoTableColumnSort,\r\n    override: SortFieldsOverride<F> = {},\r\n    extractors: SortFieldsExtractor = {}\r\n  ): Sort<F> {\r\n    const prop = column.property as any;\r\n    return new Sort<F>(\r\n      override[prop] ?? prop,\r\n      type === PoTableColumnSortType.Ascending ? 'asc' : 'desc',\r\n      extractors\r\n    );\r\n  }\r\n\r\n  static fromExpression<F = string>(\r\n    expr: string,\r\n    extractors: SortFieldsExtractor = {}\r\n  ): Sort<F> {\r\n    const field = expr.replace(/^(\\+|\\-)/, '') as any;\r\n    return new Sort<F>(field, expr[0] === '+' ? 'asc' : 'desc', extractors);\r\n  }\r\n\r\n  constructor(\r\n    public field: Fields,\r\n    public direction: 'asc' | 'desc',\r\n    private extractors: SortFieldsExtractor = {}\r\n  ) {}\r\n\r\n  get expression(): string {\r\n    return `${this.direction === 'asc' ? '+' : '-'}${this.field}`;\r\n  }\r\n\r\n  get ascending(): boolean {\r\n    return this.direction === 'asc';\r\n  }\r\n\r\n  apply<T = any>(items: T[]): T[] {\r\n    return items.sort((a, b) => {\r\n      const f = this.field as any;\r\n      const va = this.extractors[f] ? this.extractors[f](a) : a[f];\r\n      const vb = this.extractors[f] ? this.extractors[f](b) : b[f];\r\n      if (va === vb) return 0;\r\n      else {\r\n        if (va > vb) return this.direction === 'asc' ? 1 : -1;\r\n        else return this.direction === 'asc' ? -1 : 1;\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function searchString(value?: string, filter = ''): boolean {\r\n  return (\r\n    filter === '' || value?.toUpperCase().indexOf(filter.toUpperCase()) >= 0\r\n  );\r\n}\r\n\r\nexport function searchOneOf(filter = '', values: string[]): boolean {\r\n  return !!values.find((value) => searchString(value, filter));\r\n}\r\n\r\nexport function simularDelay<T>(result: T | Observable<T>): Observable<T> {\r\n  const observable = isObservable(result) ? result : of(result);\r\n  if (environment.delaySimulado?.length === 2) {\r\n    const [min, max] = environment.delaySimulado;\r\n    return observable.pipe(\r\n      delay(Math.round(Math.random() * (max - min) + min))\r\n    );\r\n  }\r\n  return observable;\r\n}\r\n\r\nexport function filtrar<R = any, SortFields = any>(\r\n  values: any[],\r\n  page: Pageable,\r\n  sort: Sort<SortFields> | undefined,\r\n  predicate: (val: any) => boolean,\r\n  deserializer: (val: any) => R\r\n): Page<R> {\r\n  let filtrado = values.filter(predicate);\r\n  if (sort) filtrado = sort.apply(filtrado);\r\n  const items = page.apply(filtrado).map(deserializer);\r\n  return {\r\n    items,\r\n    hasNext: filtrado.length > page.offset + items.length,\r\n  };\r\n}\r\n\r\nexport interface PageState<T, F = string> {\r\n  items: T[];\r\n  hasNext: boolean;\r\n  loading: boolean;\r\n  sort?: Sort<F>;\r\n}\r\n\r\nexport class PageStateSubject<T, F = string> {\r\n  constructor(\r\n    private service: (\r\n      pageable: Pageable,\r\n      filter: string,\r\n      sort: Sort<F>\r\n    ) => Observable<Page<T>>,\r\n    private takeWhile: <R = any>() => MonoTypeOperatorFunction<R>\r\n  ) {\r\n    this.resultSubject.pipe(this.takeWhile()).subscribe(\r\n      () => this.loadingSubject.next(false),\r\n      () => this.loadingSubject.next(false)\r\n    );\r\n  }\r\n\r\n  private resultSubject = new BehaviorSubject<Page<T>>({\r\n    items: [],\r\n    hasNext: false,\r\n  });\r\n\r\n  private loadingSubject = new BehaviorSubject<boolean>(false);\r\n\r\n  private page = 1;\r\n  private pageSize = 20;\r\n  private filter = '';\r\n  private sort: Sort<F>;\r\n\r\n  setSort(sort: Sort<F>): void {\r\n    this.page = 1;\r\n    this.sort = sort;\r\n    this.load(true);\r\n  }\r\n\r\n  setFilter(filter: string): void {\r\n    this.page = 1;\r\n    this.filter = filter;\r\n    this.load(true);\r\n  }\r\n\r\n  nextPage(): void {\r\n    this.page++;\r\n    this.load();\r\n  }\r\n\r\n  load(reset = false): void {\r\n    this.loadingSubject.next(true);\r\n    this.service(new Pageable(this.page, this.pageSize), this.filter, this.sort)\r\n      .pipe(this.takeWhile(), take(1), withLatestFrom(this.resultSubject))\r\n      .subscribe(\r\n        ([result, current]) => {\r\n          this.resultSubject.next({\r\n            hasNext: result.hasNext,\r\n            items: reset ? result.items : [...current.items, ...result.items],\r\n          });\r\n        },\r\n        (error) => this.resultSubject.error(error)\r\n      );\r\n  }\r\n\r\n  asObservable(): Observable<PageState<T, F>> {\r\n    return combineLatest([this.resultSubject, this.loadingSubject]).pipe(\r\n      this.takeWhile(),\r\n      map(([result, loading]) => ({\r\n        ...result,\r\n        sort: this.sort,\r\n        loading,\r\n      }))\r\n    );\r\n  }\r\n\r\n  subscribe(\r\n    next: (state: PageState<T, F>) => void,\r\n    error?: (err: any) => void\r\n  ): Subscription {\r\n    return this.asObservable().subscribe(next, error);\r\n  }\r\n}\r\n\r\nexport interface LookupErrorsMessages {\r\n  notFound: string;\r\n  multipleFound: (length: number) => string;\r\n}\r\n\r\nexport function tryMapToUniqueResult<T = any>(\r\n  errors: LookupErrorsMessages,\r\n  predicate: (item: T) => boolean\r\n): OperatorFunction<T[], T> {\r\n  return mergeMap((res: T[]) => {\r\n    if (res.length === 1) return of(res[0]);\r\n    const prof = res.find(predicate);\r\n    if (prof) return of(prof);\r\n    return throwError(\r\n      new Error(\r\n        res.length === 0 ? errors.notFound : errors.multipleFound(res.length)\r\n      )\r\n    );\r\n  });\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "field",
                        "type": "Fields"
                    },
                    {
                        "name": "direction",
                        "type": "\"asc\" | \"desc\""
                    },
                    {
                        "name": "extractors",
                        "type": "SortFieldsExtractor",
                        "defaultValue": "{}"
                    }
                ],
                "line": 74,
                "jsdoctags": [
                    {
                        "name": "field",
                        "type": "Fields",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "direction",
                        "type": "\"asc\" | \"desc\"",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "extractors",
                        "type": "SortFieldsExtractor",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "direction",
                    "type": "\"asc\" | \"desc\"",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "field",
                    "type": "Fields",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "apply",
                    "args": [
                        {
                            "name": "items",
                            "type": "T[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "T[]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 90,
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "T[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fromExpression",
                    "args": [
                        {
                            "name": "expr",
                            "type": "string"
                        },
                        {
                            "name": "extractors",
                            "type": "SortFieldsExtractor",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "Sort<F>",
                    "typeParameters": [
                        "F"
                    ],
                    "line": 68,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "expr",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "extractors",
                            "type": "SortFieldsExtractor",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fromOrderChange",
                    "args": [
                        {
                            "type": "PoTableColumnSort"
                        },
                        {
                            "name": "override",
                            "type": "SortFieldsOverride<F>",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "extractors",
                            "type": "SortFieldsExtractor",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "Sort<F>",
                    "typeParameters": [
                        "F"
                    ],
                    "line": 55,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "type": "PoTableColumnSort",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "override",
                            "type": "SortFieldsOverride<F>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "extractors",
                            "type": "SortFieldsExtractor",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "expression": {
                    "name": "expression",
                    "getSignature": {
                        "name": "expression",
                        "type": "string",
                        "returnType": "string",
                        "line": 82
                    }
                },
                "ascending": {
                    "name": "ascending",
                    "getSignature": {
                        "name": "ascending",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 86
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Turma",
            "id": "class-Turma-f684942bad9f8336cc229e10678ab313",
            "file": "src/app/domain/turma/turma.ts",
            "type": "class",
            "sourceCode": "import { FormGroup, Validators, FormBuilder } from '@angular/forms';\r\nimport { CustomValidators } from 'app/shared/validators';\r\nimport { Entidade, Id } from '../entidade';\r\n\r\nexport class Turma extends Entidade {\r\n  public static fromJson({\r\n    id,\r\n    descricao,\r\n    anoLetivo,\r\n    periodoLetivo,\r\n    numeroVagas,\r\n  }: any): Turma {\r\n    return new Turma(id, descricao, +anoLetivo, +periodoLetivo, +numeroVagas);\r\n  }\r\n\r\n  constructor(\r\n    id: Id = null,\r\n    public descricao = '',\r\n    public anoLetivo?: number,\r\n    public periodoLetivo?: number,\r\n    public numeroVagas?: number\r\n  ) {\r\n    super(id);\r\n  }\r\n\r\n  public criarForm(builder: FormBuilder): FormGroup {\r\n    return builder.group({\r\n      descricao: [\r\n        this.descricao,\r\n        [Validators.required, Validators.maxLength(255)],\r\n      ],\r\n      anoLetivo: [\r\n        this.anoLetivo ?? '',\r\n        [Validators.required, CustomValidators.number],\r\n      ],\r\n      periodoLetivo: [\r\n        this.periodoLetivo ?? '',\r\n        [Validators.required, CustomValidators.number],\r\n      ],\r\n      numeroVagas: [\r\n        this.numeroVagas ?? '',\r\n        [Validators.required, CustomValidators.number],\r\n      ],\r\n    });\r\n  }\r\n\r\n  protected onChanges({\r\n    descricao,\r\n    anoLetivo,\r\n    periodoLetivo,\r\n    numeroVagas,\r\n  }: any): void {\r\n    this.descricao = descricao;\r\n    this.anoLetivo = +anoLetivo;\r\n    this.periodoLetivo = +periodoLetivo;\r\n    this.numeroVagas = +numeroVagas;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "id",
                        "type": "Id",
                        "defaultValue": "null"
                    },
                    {
                        "name": "descricao",
                        "type": "string",
                        "defaultValue": "''"
                    },
                    {
                        "name": "anoLetivo",
                        "type": "number",
                        "optional": true
                    },
                    {
                        "name": "periodoLetivo",
                        "type": "number",
                        "optional": true
                    },
                    {
                        "name": "numeroVagas",
                        "type": "number",
                        "optional": true
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "Id",
                        "defaultValue": "null",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "descricao",
                        "type": "string",
                        "defaultValue": "''",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "anoLetivo",
                        "type": "number",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "periodoLetivo",
                        "type": "number",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "numeroVagas",
                        "type": "number",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "anoLetivo",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "descricao",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "numeroVagas",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "periodoLetivo",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "id",
                    "type": "Id",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "Entidade"
                    }
                }
            ],
            "methods": [
                {
                    "name": "criarForm",
                    "args": [
                        {
                            "name": "builder",
                            "type": "FormBuilder"
                        }
                    ],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 26,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "builder",
                            "type": "FormBuilder",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fromJson",
                    "args": [
                        {
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Turma",
                    "typeParameters": [],
                    "line": 6,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onChanges",
                    "args": [
                        {
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fromForm",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Entidade"
                    }
                },
                {
                    "name": "onChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        113,
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Entidade"
                    }
                },
                {
                    "name": "subscribeFormChanges",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup"
                        },
                        {
                            "name": "shouldContinue",
                            "type": "MonoTypeOperatorFunction<any>",
                            "defaultValue": "takeWhile(() => true)"
                        },
                        {
                            "name": "onChange",
                            "type": "function",
                            "optional": true,
                            "function": [
                                {
                                    "name": "value",
                                    "type": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "Subscription",
                    "typeParameters": [],
                    "line": 21,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "shouldContinue",
                            "type": "MonoTypeOperatorFunction<any>",
                            "defaultValue": "takeWhile(() => true)",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "onChange",
                            "type": "function",
                            "optional": true,
                            "function": [
                                {
                                    "name": "value",
                                    "type": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Entidade"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "Entidade",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AlunoDetailComponent",
            "id": "component-AlunoDetailComponent-af85b815a3f07b4bffefe775eeea3a1a",
            "file": "src/app/domain/pessoa/aluno/aluno-detail/aluno-detail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-aluno-detail",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./aluno-detail.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "aluno",
                    "line": 12,
                    "type": "Aluno"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { Aluno, FormaIngresso } from '../aluno';\r\n\r\n@Component({\r\n  selector: 'app-aluno-detail',\r\n  templateUrl: './aluno-detail.component.html',\r\n})\r\nexport class AlunoDetailComponent {\r\n  constructor() {}\r\n\r\n  @Input()\r\n  aluno: Aluno;\r\n\r\n  get formaIngresso(): string {\r\n    switch (this.aluno.formaIngresso) {\r\n      case FormaIngresso.ENADE:\r\n        return $localize`Enade`;\r\n      case FormaIngresso.VESTIBULAR:\r\n        return $localize`Vestibular`;\r\n      default:\r\n        throw new Error(\r\n          `Forma de ingresso desconhecida: \"${this.aluno.formaIngresso}\"`\r\n        );\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "accessors": {
                "formaIngresso": {
                    "name": "formaIngresso",
                    "getSignature": {
                        "name": "formaIngresso",
                        "type": "string",
                        "returnType": "string",
                        "line": 14
                    }
                }
            },
            "templateData": "<div class=\"po-row\">\r\n  <po-info\r\n    class=\"po-sm-12\"\r\n    p-label=\"Matrícula\"\r\n    i18n-p-label=\"Rótulo 'Matrícula' nos detalhes de alunos\"\r\n    [p-value]=\"aluno.matricula\"\r\n  ></po-info>\r\n</div>\r\n<po-divider></po-divider>\r\n<div class=\"po-row\">\r\n  <po-info\r\n    class=\"po-md-6 po-sm-12\"\r\n    p-label=\"Nome\"\r\n    i18n-p-label=\"Rótulo 'Nome' nos detalhes de alunos\"\r\n    [p-value]=\"aluno.nome\"\r\n  ></po-info>\r\n  <po-info\r\n    class=\"po-md-6 po-sm-12\"\r\n    p-label=\"E-mail\"\r\n    i18n-p-label=\"Rótulo 'E-mail' nos detalhes de alunos\"\r\n    [p-value]=\"aluno.email\"\r\n  ></po-info>\r\n</div>\r\n<po-divider></po-divider>\r\n<div class=\"po-row\">\r\n  <po-info\r\n    class=\"po-md-6 po-sm-12\"\r\n    p-label=\"CPF\"\r\n    i18n-p-label=\"Rótulo 'CPF' nos detalhes de alunos\"\r\n    [p-value]=\"aluno.cpfFormatado\"\r\n  ></po-info>\r\n  <po-info\r\n    class=\"po-md-6 po-sm-12\"\r\n    p-label=\"Forma de ingresso\"\r\n    i18n-p-label=\"Rótulo 'Forma de ingresso' nos detalhes de alunos\"\r\n    [p-value]=\"aluno.formaIngresso\"\r\n  ></po-info>\r\n</div>\r\n"
        },
        {
            "name": "AlunoFormComponent",
            "id": "component-AlunoFormComponent-0dc7a1b9d831f5be5c27109bd11bbf10",
            "file": "src/app/domain/pessoa/aluno/aluno-form/aluno-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-aluno-form",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./aluno-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "aluno",
                    "defaultValue": "new Aluno()",
                    "line": 30,
                    "type": "Aluno"
                },
                {
                    "name": "cpfNotTaken",
                    "line": 36,
                    "type": "NotTakenService"
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 33
                },
                {
                    "name": "emailNotTaken",
                    "line": 39,
                    "type": "NotTakenService"
                }
            ],
            "outputsClass": [
                {
                    "name": "formSubmit",
                    "defaultValue": "new EventEmitter<Aluno>()",
                    "line": 42,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "formaIngressoOptions",
                    "defaultValue": "[\r\n    {\r\n      label: $localize`:Rótulo da opção \"ENADE\" do campo \"Forma de ingresso\" do formulário de aluno:ENADE`,\r\n      value: FormaIngresso.ENADE,\r\n    },\r\n    {\r\n      label: $localize`:Rótulo da opção \"Vestibular\" do campo \"Forma de ingresso\" do formulário de aluno:Vestibular`,\r\n      value: FormaIngresso.VESTIBULAR,\r\n    },\r\n  ]",
                    "type": "PoSelectOption[]",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "formaIngressoRef",
                    "type": "PoSelectComponent",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'formaIngressoRef', {static: true}"
                        }
                    ]
                },
                {
                    "name": "formSubscription",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "mounted",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "mountSubject",
                    "defaultValue": "new BehaviorSubject(true)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "criarForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77
                },
                {
                    "name": "handleEnterPressed",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90
                },
                {
                    "name": "handleSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "takeWhileMounted",
                    "args": [],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 24,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  Input,\r\n  EventEmitter,\r\n  Output,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ViewChild,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { Aluno, FormaIngresso } from '../aluno';\r\nimport { FormGroup, FormBuilder } from '@angular/forms';\r\nimport { BaseComponent } from 'app/shared/base/base.component';\r\nimport { PoSelectOption, PoSelectComponent } from '@po-ui/ng-components';\r\nimport { Subscription } from 'rxjs';\r\nimport { NotTakenService } from 'app/shared/validators';\r\n\r\n@Component({\r\n  selector: 'app-aluno-form',\r\n  templateUrl: './aluno-form.component.html',\r\n})\r\nexport class AlunoFormComponent\r\n  extends BaseComponent\r\n  implements OnInit, OnChanges {\r\n  constructor(private formBuilder: FormBuilder) {\r\n    super();\r\n  }\r\n\r\n  @Input()\r\n  aluno = new Aluno();\r\n\r\n  @Input()\r\n  disabled = false;\r\n\r\n  @Input()\r\n  cpfNotTaken: NotTakenService;\r\n\r\n  @Input()\r\n  emailNotTaken: NotTakenService;\r\n\r\n  @Output()\r\n  formSubmit = new EventEmitter<Aluno>();\r\n\r\n  @ViewChild('formaIngressoRef', { static: true })\r\n  formaIngressoRef: PoSelectComponent;\r\n\r\n  formSubscription: Subscription;\r\n\r\n  form: FormGroup;\r\n\r\n  formaIngressoOptions: PoSelectOption[] = [\r\n    {\r\n      label: $localize`:Rótulo da opção \"ENADE\" do campo \"Forma de ingresso\" do formulário de aluno:ENADE`,\r\n      value: FormaIngresso.ENADE,\r\n    },\r\n    {\r\n      label: $localize`:Rótulo da opção \"Vestibular\" do campo \"Forma de ingresso\" do formulário de aluno:Vestibular`,\r\n      value: FormaIngresso.VESTIBULAR,\r\n    },\r\n  ];\r\n\r\n  get canSubmit(): boolean {\r\n    return (\r\n      this.form && this.form.valid && this.form.dirty && !this.form.pending\r\n    );\r\n  }\r\n\r\n  ngOnChanges({ aluno }: SimpleChanges): void {\r\n    if (aluno) this.criarForm();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    super.ngOnInit();\r\n    this.criarForm();\r\n  }\r\n\r\n  criarForm(): void {\r\n    this.formSubscription?.unsubscribe();\r\n    this.form = this.aluno.criarForm(\r\n      this.formBuilder,\r\n      this.emailNotTaken,\r\n      this.cpfNotTaken\r\n    );\r\n    this.formSubscription = this.aluno.subscribeFormChanges(\r\n      this.form,\r\n      this.takeWhileMounted()\r\n    );\r\n  }\r\n\r\n  handleEnterPressed(): void {\r\n    if (this.formaIngressoRef.open) this.formaIngressoRef.toggleButton();\r\n    this.handleSubmit();\r\n  }\r\n\r\n  handleSubmit(): void {\r\n    if (this.canSubmit) this.formSubmit.emit(this.aluno);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "accessors": {
                "canSubmit": {
                    "name": "canSubmit",
                    "getSignature": {
                        "name": "canSubmit",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 62
                    }
                }
            },
            "templateData": "<form class=\"po-row\" [formGroup]=\"form\" (submit)=\"handleSubmit()\">\r\n  <div class=\"po-md-6 po-sm-12\">\r\n    <po-input\r\n      class=\"po-12\"\r\n      p-icon=\"po-icon po-icon-user\"\r\n      i18n-p-label=\"Rótulo do campo 'Nome' do formulário de aluno\"\r\n      i18n-aria-label=\"\r\n        Acessibilidade: rótulo do campo 'Nome' do formulário de aluno\r\n      \"\r\n      p-label=\"Nome\"\r\n      name=\"nome\"\r\n      [p-disabled]=\"disabled\"\r\n      formControlName=\"nome\"\r\n      aria-label=\"Campo nome\"\r\n      p-required\r\n    ></po-input>\r\n    <app-field-messages [control]=\"form.get('nome')\"></app-field-messages>\r\n  </div>\r\n  <div class=\"po-md-6 po-sm-12\">\r\n    <po-email\r\n      class=\"po-12\"\r\n      i18n-p-label=\"Rótulo do campo 'E-mail' do formulário de aluno\"\r\n      i18n-aria-label=\"\r\n        Acessibilidade: rótulo do campo 'E-mail' do formulário de aluno\r\n      \"\r\n      p-label=\"E-mail\"\r\n      name=\"email\"\r\n      [p-disabled]=\"disabled\"\r\n      formControlName=\"email\"\r\n      aria-label=\"Campo E-mail\"\r\n      p-required\r\n    ></po-email>\r\n    <app-field-messages [control]=\"form.get('email')\"></app-field-messages>\r\n  </div>\r\n  <div class=\"po-md-6 po-sm-12\">\r\n    <po-input\r\n      class=\"po-12\"\r\n      i18n-p-label=\"Rótulo do campo 'CPF' do formulário de aluno\"\r\n      i18n-aria-label=\"\r\n        Acessibilidade: rótulo do campo 'CPF' do formulário de aluno\r\n      \"\r\n      p-label=\"CPF\"\r\n      name=\"cpf\"\r\n      [p-disabled]=\"disabled\"\r\n      formControlName=\"cpf\"\r\n      aria-label=\"Campo CPF\"\r\n      p-mask=\"999.999.999-99\"\r\n      (keyup.enter)=\"handleSubmit()\"\r\n      p-required\r\n    ></po-input>\r\n    <app-field-messages [control]=\"form.get('cpf')\"></app-field-messages>\r\n  </div>\r\n  <div class=\"po-md-6 po-sm-12\">\r\n    <po-select\r\n      #formaIngressoRef\r\n      class=\"po-12\"\r\n      i18n-p-label=\"Rótulo do campo 'Forma de ingresso' do formulário de aluno\"\r\n      i18n-aria-label=\"\r\n        Acessibilidade: rótulo do campo 'Forma de ingresso' do formulário de\r\n        aluno\r\n      \"\r\n      p-label=\"Forma de ingresso\"\r\n      name=\"formaIngresso\"\r\n      [p-disabled]=\"disabled\"\r\n      formControlName=\"formaIngresso\"\r\n      aria-label=\"Campo forma de ingresso\"\r\n      (keyup.enter)=\"handleEnterPressed()\"\r\n      [p-options]=\"formaIngressoOptions\"\r\n      p-required\r\n    ></po-select>\r\n    <app-field-messages\r\n      [control]=\"form.get('formaIngresso')\"\r\n    ></app-field-messages>\r\n  </div>\r\n  <button hidden type=\"submit\"></button>\r\n</form>\r\n"
        },
        {
            "name": "AlunoFormRouteComponent",
            "id": "component-AlunoFormRouteComponent-defae180310b861a37e6b4bfb528c1a3",
            "file": "src/app/domain/pessoa/aluno/routes/aluno-form-route/aluno-form-route.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-aluno-form-route",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./aluno-form-route.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "aluno",
                    "defaultValue": "new Aluno()",
                    "type": "Aluno",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "formRef",
                    "type": "AlunoFormComponent",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'formRef', {static: true}"
                        }
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "modalRef",
                    "type": "PoModalComponent",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "PoModalComponent, {static: true}"
                        }
                    ]
                },
                {
                    "name": "podeCancelar",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "processando",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "mounted",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "mountSubject",
                    "defaultValue": "new BehaviorSubject(true)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "cancelar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97
                },
                {
                    "name": "cpfNotTaken",
                    "args": [
                        {
                            "name": "cpf",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 101,
                    "jsdoctags": [
                        {
                            "name": "cpf",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emailNotTaken",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 108,
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68
                },
                {
                    "name": "retornar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "salvar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "takeWhileMounted",
                    "args": [],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 24,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ViewChild, OnInit, OnDestroy } from '@angular/core';\r\nimport { Aluno } from '../../aluno';\r\nimport {\r\n  PoModalComponent,\r\n  PoModalAction,\r\n  PoNotificationService,\r\n} from '@po-ui/ng-components';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { BaseComponent } from 'app/shared/base/base.component';\r\nimport { AlunoService } from '../../aluno.service';\r\nimport { map, filter, tap, switchMap } from 'rxjs/operators';\r\nimport { AlunoFormComponent } from '../../aluno-form/aluno-form.component';\r\nimport { Observable } from 'rxjs';\r\n\r\ninterface Actions {\r\n  salvar: PoModalAction;\r\n  cancelar: PoModalAction;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-aluno-form-route',\r\n  templateUrl: './aluno-form-route.component.html',\r\n})\r\nexport class AlunoFormRouteComponent\r\n  extends BaseComponent\r\n  implements OnInit, OnDestroy {\r\n  constructor(\r\n    private alunoService: AlunoService,\r\n    private notificationService: PoNotificationService,\r\n    private router: Router,\r\n    private activatedRoute: ActivatedRoute\r\n  ) {\r\n    super();\r\n    this.cpfNotTaken = this.cpfNotTaken.bind(this);\r\n    this.emailNotTaken = this.emailNotTaken.bind(this);\r\n  }\r\n\r\n  @ViewChild(PoModalComponent, { static: true })\r\n  modalRef: PoModalComponent;\r\n\r\n  @ViewChild('formRef', { static: true })\r\n  formRef: AlunoFormComponent;\r\n\r\n  get actions(): Actions {\r\n    return {\r\n      salvar: {\r\n        label: $localize`:Texto do botão \"Salvar\" da modal (janela) de formulário de aluno:Salvar`,\r\n        action: () => this.salvar(),\r\n        loading: this.loading || this.processando,\r\n        disabled: !this.formRef.canSubmit,\r\n      },\r\n      cancelar: {\r\n        label: $localize`:Texto do botão \"Cancelar\" da modal (janela) de formulário de aluno:Cancelar`,\r\n        action: () => this.cancelar(),\r\n        disabled: !this.podeCancelar,\r\n      },\r\n    };\r\n  }\r\n\r\n  processando = false;\r\n\r\n  aluno: Aluno = new Aluno();\r\n\r\n  podeCancelar = true;\r\n\r\n  loading = false;\r\n\r\n  ngOnInit(): void {\r\n    super.ngOnInit();\r\n    this.activatedRoute.data\r\n      .pipe(\r\n        this.takeWhileMounted(),\r\n        filter((data) => data.loadFromParam),\r\n        map((data) => data.loadFromParam),\r\n        tap(() => (this.loading = true)),\r\n        switchMap((param) =>\r\n          this.activatedRoute.params.pipe(\r\n            filter((params) => params[param]),\r\n            map((params) => params[param])\r\n          )\r\n        ),\r\n        switchMap((id) => this.alunoService.recuperarPorId(id))\r\n      )\r\n      .subscribe((aluno) => {\r\n        this.loading = false;\r\n        this.aluno = aluno;\r\n      });\r\n\r\n    this.modalRef.open();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    super.ngOnDestroy();\r\n    this.modalRef.close();\r\n  }\r\n\r\n  cancelar(): void {\r\n    this.retornar();\r\n  }\r\n\r\n  cpfNotTaken(cpf: string): Observable<boolean> {\r\n    return this.alunoService.cpfNotTaken({\r\n      cpf: cpf?.replace(/(\\.|\\-)/g, ''),\r\n      id: this.aluno.id ?? '',\r\n    });\r\n  }\r\n\r\n  emailNotTaken(email: string): Observable<boolean> {\r\n    return this.alunoService.emailNotTaken({\r\n      email,\r\n      id: this.aluno.id ?? '',\r\n    });\r\n  }\r\n\r\n  salvar(): void {\r\n    this.processando = true;\r\n    this.podeCancelar = false;\r\n    this.alunoService\r\n      .salvar(this.aluno)\r\n      .pipe(this.takeWhileMounted())\r\n      .subscribe(\r\n        () => {\r\n          this.notificationService.success(this.mensagemSucesso);\r\n          this.retornar();\r\n        },\r\n        (error) => {\r\n          this.processando = false;\r\n          this.podeCancelar = true;\r\n          console.error(error);\r\n        }\r\n      );\r\n  }\r\n\r\n  private retornar(): void {\r\n    this.router.navigate(this.urlRetorno);\r\n  }\r\n\r\n  private get urlRetorno(): string[] {\r\n    return this.activatedRoute.snapshot.data.urlRetorno(this.activatedRoute);\r\n  }\r\n\r\n  private get mensagemSucesso(): string {\r\n    return this.activatedRoute.snapshot.data.mensagemSucesso();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "alunoService",
                        "type": "AlunoService"
                    },
                    {
                        "name": "notificationService",
                        "type": "PoNotificationService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "alunoService",
                        "type": "AlunoService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "PoNotificationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "actions": {
                    "name": "actions",
                    "getSignature": {
                        "name": "actions",
                        "type": "",
                        "returnType": "Actions",
                        "line": 44
                    }
                },
                "urlRetorno": {
                    "name": "urlRetorno",
                    "getSignature": {
                        "name": "urlRetorno",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 138
                    }
                },
                "mensagemSucesso": {
                    "name": "mensagemSucesso",
                    "getSignature": {
                        "name": "mensagemSucesso",
                        "type": "string",
                        "returnType": "string",
                        "line": 142
                    }
                }
            },
            "templateData": "<po-modal\r\n  #modelRef\r\n  [p-click-out]=\"false\"\r\n  [p-hide-close]=\"true\"\r\n  [p-primary-action]=\"actions.salvar\"\r\n  [p-secondary-action]=\"actions.cancelar\"\r\n  p-size=\"auto\"\r\n  p-title=\"Formulário de aluno\"\r\n  i18n-p-title=\"\r\n    Título do formulário de cadastro ou edição dos dados de um aluno\r\n  \"\r\n>\r\n  <app-aluno-form\r\n    #formRef\r\n    [aluno]=\"aluno\"\r\n    [disabled]=\"loading || processando\"\r\n    [cpfNotTaken]=\"cpfNotTaken\"\r\n    [emailNotTaken]=\"emailNotTaken\"\r\n    (formSubmit)=\"salvar()\"\r\n  ></app-aluno-form>\r\n  <app-loading-indicator\r\n    [loading]=\"loading\"\r\n    i18n-text=\"\r\n      Texto 'Carregando...' que aparece na janela de formulário de aluno quando\r\n      os dados de um aluno existente estão sendo carregados\r\n    \"\r\n    text=\"Carregando...\"\r\n  ></app-loading-indicator>\r\n</po-modal>\r\n"
        },
        {
            "name": "AlunoListComponent",
            "id": "component-AlunoListComponent-a65a43d2303abab084b170a5c77de3e3",
            "file": "src/app/domain/pessoa/aluno/aluno-list/aluno-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-aluno-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./aluno-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "alunos",
                    "defaultValue": "[]",
                    "line": 32,
                    "type": "Aluno[]"
                },
                {
                    "name": "carregando",
                    "defaultValue": "false",
                    "line": 38
                },
                {
                    "name": "ordenar",
                    "line": 41,
                    "type": "Sort<AlunoSortFields>"
                },
                {
                    "name": "podeCarregarMais",
                    "defaultValue": "false",
                    "line": 35
                }
            ],
            "outputsClass": [
                {
                    "name": "carregarMais",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 44,
                    "type": "EventEmitter"
                },
                {
                    "name": "editar",
                    "defaultValue": "new EventEmitter<Aluno>()",
                    "line": 50,
                    "type": "EventEmitter"
                },
                {
                    "name": "ordenarChange",
                    "defaultValue": "new EventEmitter<Sort<AlunoSortFields>>()",
                    "line": 47,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "actions",
                    "defaultValue": "[\r\n    {\r\n      label: $localize`:Texto do botão \"Editar\" na tabela de alunos:Editar`,\r\n      action: (item: Aluno) => this.editar.emit(item),\r\n      icon: 'po-icon-edit',\r\n    },\r\n  ]",
                    "type": "PoTableAction[]",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "carregandoMais",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "columns",
                    "defaultValue": "[\r\n    {\r\n      property: 'matricula',\r\n      label: $localize`:Cabeçalho da coluna \"Matrícula\" da tabela de alunos:Matrícula`,\r\n      type: 'number',\r\n      width: '80px',\r\n    },\r\n    {\r\n      property: 'nome',\r\n      label: $localize`:Cabeçalho da coluna \"Nome\" da tabela de alunos:Nome`,\r\n    },\r\n    {\r\n      property: 'email',\r\n      label: $localize`:Cabeçalho da coluna \"E-mail\" da tabela de alunos:E-mail`,\r\n    },\r\n    {\r\n      property: 'cpfFormatado',\r\n      label: $localize`:Cabeçalho da coluna \"CPF\" da tabela de alunos:CPF`,\r\n      width: '140px',\r\n    },\r\n    {\r\n      property: 'formaIngresso',\r\n      type: 'label',\r\n      label: $localize`:Cabeçalho da coluna \"Forma de ingresso\" da tabela de alunos:Forma de ingresso`,\r\n      width: '140px',\r\n      labels: [\r\n        {\r\n          value: FormaIngresso.ENADE,\r\n          color: 'color-05',\r\n          label: $localize`:Valor \"ENADE\" da coluna \"Forma de ingresso\" da tabela de alunos:ENADE`,\r\n        },\r\n        {\r\n          value: FormaIngresso.VESTIBULAR,\r\n          color: 'color-10',\r\n          label: $localize`:Valor \"Vestibular\" da coluna \"Forma de ingresso\" da tabela de alunos:Vestibular`,\r\n        },\r\n      ],\r\n    },\r\n  ]",
                    "type": "PoTableColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "literals",
                    "defaultValue": "CustomLiterals.forTable()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "poTable",
                    "type": "PoTableComponent",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'tableRef', {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handleCarregarMais",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127
                },
                {
                    "name": "handleOrdenar",
                    "args": [
                        {
                            "name": "change",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "jsdoctags": [
                        {
                            "name": "change",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ViewChild,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { Aluno, FormaIngresso, AlunoSortFields } from '../aluno';\r\nimport {\r\n  PoTableColumn,\r\n  PoTableComponent,\r\n  PoTableColumnSortType,\r\n  PoTableAction,\r\n} from '@po-ui/ng-components';\r\nimport { CustomLiterals } from 'app/shared/literals';\r\nimport { Sort } from 'app/shared/util/service.util';\r\n\r\n@Component({\r\n  selector: 'app-aluno-list',\r\n  templateUrl: './aluno-list.component.html',\r\n})\r\nexport class AlunoListComponent implements OnChanges, OnInit {\r\n  constructor() {}\r\n\r\n  @ViewChild('tableRef', { static: true })\r\n  poTable: PoTableComponent;\r\n\r\n  @Input()\r\n  alunos: Aluno[] = [];\r\n\r\n  @Input()\r\n  podeCarregarMais = false;\r\n\r\n  @Input()\r\n  carregando = false;\r\n\r\n  @Input()\r\n  ordenar: Sort<AlunoSortFields>;\r\n\r\n  @Output()\r\n  carregarMais = new EventEmitter<void>();\r\n\r\n  @Output()\r\n  ordenarChange = new EventEmitter<Sort<AlunoSortFields>>();\r\n\r\n  @Output()\r\n  editar = new EventEmitter<Aluno>();\r\n\r\n  carregandoMais = false;\r\n\r\n  literals = CustomLiterals.forTable();\r\n\r\n  actions: PoTableAction[] = [\r\n    {\r\n      label: $localize`:Texto do botão \"Editar\" na tabela de alunos:Editar`,\r\n      action: (item: Aluno) => this.editar.emit(item),\r\n      icon: 'po-icon-edit',\r\n    },\r\n  ];\r\n\r\n  columns: PoTableColumn[] = [\r\n    {\r\n      property: 'matricula',\r\n      label: $localize`:Cabeçalho da coluna \"Matrícula\" da tabela de alunos:Matrícula`,\r\n      type: 'number',\r\n      width: '80px',\r\n    },\r\n    {\r\n      property: 'nome',\r\n      label: $localize`:Cabeçalho da coluna \"Nome\" da tabela de alunos:Nome`,\r\n    },\r\n    {\r\n      property: 'email',\r\n      label: $localize`:Cabeçalho da coluna \"E-mail\" da tabela de alunos:E-mail`,\r\n    },\r\n    {\r\n      property: 'cpfFormatado',\r\n      label: $localize`:Cabeçalho da coluna \"CPF\" da tabela de alunos:CPF`,\r\n      width: '140px',\r\n    },\r\n    {\r\n      property: 'formaIngresso',\r\n      type: 'label',\r\n      label: $localize`:Cabeçalho da coluna \"Forma de ingresso\" da tabela de alunos:Forma de ingresso`,\r\n      width: '140px',\r\n      labels: [\r\n        {\r\n          value: FormaIngresso.ENADE,\r\n          color: 'color-05',\r\n          label: $localize`:Valor \"ENADE\" da coluna \"Forma de ingresso\" da tabela de alunos:ENADE`,\r\n        },\r\n        {\r\n          value: FormaIngresso.VESTIBULAR,\r\n          color: 'color-10',\r\n          label: $localize`:Valor \"Vestibular\" da coluna \"Forma de ingresso\" da tabela de alunos:Vestibular`,\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  ngOnInit(): void {\r\n    if (this.ordenar)\r\n      this.poTable.sortedColumn = {\r\n        property: this.columns.find(\r\n          (column) => column.property === this.ordenar.field\r\n        ),\r\n        ascending: this.ordenar.ascending,\r\n      };\r\n  }\r\n\r\n  handleOrdenar(change: {\r\n    column: PoTableColumn;\r\n    type: PoTableColumnSortType;\r\n  }): void {\r\n    this.ordenarChange.emit(\r\n      Sort.fromOrderChange<AlunoSortFields>(change, { cpfFormatado: 'cpf' })\r\n    );\r\n  }\r\n\r\n  ngOnChanges({ alunos }: SimpleChanges): void {\r\n    if (alunos && this.carregandoMais) this.carregandoMais = false;\r\n  }\r\n\r\n  handleCarregarMais(): void {\r\n    if (this.podeCarregarMais) {\r\n      this.carregandoMais = true;\r\n      this.carregarMais.emit();\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 25
            },
            "implements": [
                "OnChanges",
                "OnInit"
            ],
            "templateData": "<po-table\r\n  #tableRef\r\n  [p-actions]=\"actions\"\r\n  [p-columns]=\"columns\"\r\n  [p-items]=\"alunos\"\r\n  [p-literals]=\"literals\"\r\n  [p-loading]=\"carregando && !carregandoMais\"\r\n  [p-loading-show-more]=\"carregando && carregandoMais\"\r\n  [p-show-more-disabled]=\"!podeCarregarMais\"\r\n  [p-sort]=\"true\"\r\n  (p-sort-by)=\"handleOrdenar($event)\"\r\n  (p-show-more)=\"handleCarregarMais()\"\r\n  p-striped=\"true\"\r\n  p-hide-text-overflow\r\n></po-table>\r\n"
        },
        {
            "name": "AlunoListRouteComponent",
            "id": "component-AlunoListRouteComponent-893cffe6f1517f94cb59e26ce759cc28",
            "file": "src/app/domain/pessoa/aluno/routes/aluno-list-route/aluno-list-route.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-aluno-list-route",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./aluno-list-route.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "acoes",
                    "defaultValue": "[\r\n    {\r\n      icon: 'po-icon po-icon-plus',\r\n      label: $localize`:Texto do botão \"Novo aluno\" para cadastrar um novo aluno, presente na página \"Alunos cadastrados\":Novo aluno`,\r\n      action: () =>\r\n        this.router.navigate(['new'], { relativeTo: this.activatedRoute }),\r\n    },\r\n  ]",
                    "type": "PoPageAction[]",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "filtro",
                    "defaultValue": "{\r\n    placeholder: $localize`:Placeholder do campo de busca da página \"Alunos cadastrados\":Buscar alunos`,\r\n    action: (query: string) => this.handleFilterChange(query),\r\n  }",
                    "type": "PoPageFilter",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "pageState$",
                    "type": "Observable<PageState<Aluno, AlunoSortFields>>",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "pageStateSubject",
                    "type": "PageStateSubject<Aluno | AlunoSortFields>",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "mounted",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "mountSubject",
                    "defaultValue": "new BehaviorSubject(true)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "handleCarregarMais",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76
                },
                {
                    "name": "handleEditarClick",
                    "args": [
                        {
                            "name": "item",
                            "type": "Aluno"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Aluno",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleFilterChange",
                    "args": [
                        {
                            "name": "query",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleOrdenacaoChange",
                    "args": [
                        {
                            "name": "sort",
                            "type": "Sort<AlunoSortFields>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "jsdoctags": [
                        {
                            "name": "sort",
                            "type": "Sort<AlunoSortFields>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "takeWhileMounted",
                    "args": [],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 24,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { AlunoService } from '../../aluno.service';\r\nimport { Observable } from 'rxjs';\r\nimport {\r\n  Sort,\r\n  PageState,\r\n  PageStateSubject,\r\n} from 'app/shared/util/service.util';\r\nimport { Aluno, AlunoSortFields, AlunoEvent } from '../../aluno';\r\nimport { BaseComponent } from 'app/shared/base/base.component';\r\nimport { PoPageFilter, PoPageAction } from '@po-ui/ng-components';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { map, filter } from 'rxjs/operators';\r\nimport { EventService } from 'app/shared/event/event.service';\r\n\r\n@Component({\r\n  selector: 'app-aluno-list-route',\r\n  templateUrl: './aluno-list-route.component.html',\r\n})\r\nexport class AlunoListRouteComponent extends BaseComponent implements OnInit {\r\n  constructor(\r\n    private alunoService: AlunoService,\r\n    private eventService: EventService,\r\n    private router: Router,\r\n    private activatedRoute: ActivatedRoute\r\n  ) {\r\n    super();\r\n    this.pageStateSubject = new PageStateSubject(\r\n      (pageable, query, sort) =>\r\n        this.alunoService.filtrar(pageable, query, sort),\r\n      () => this.takeWhileMounted()\r\n    );\r\n    this.pageState$ = this.pageStateSubject.asObservable();\r\n  }\r\n\r\n  filtro: PoPageFilter = {\r\n    placeholder: $localize`:Placeholder do campo de busca da página \"Alunos cadastrados\":Buscar alunos`,\r\n    action: (query: string) => this.handleFilterChange(query),\r\n  };\r\n\r\n  acoes: PoPageAction[] = [\r\n    {\r\n      icon: 'po-icon po-icon-plus',\r\n      label: $localize`:Texto do botão \"Novo aluno\" para cadastrar um novo aluno, presente na página \"Alunos cadastrados\":Novo aluno`,\r\n      action: () =>\r\n        this.router.navigate(['new'], { relativeTo: this.activatedRoute }),\r\n    },\r\n  ];\r\n\r\n  pageState$: Observable<PageState<Aluno, AlunoSortFields>>;\r\n\r\n  private pageStateSubject: PageStateSubject<Aluno, AlunoSortFields>;\r\n\r\n  ngOnInit(): void {\r\n    super.ngOnInit();\r\n    this.pageStateSubject.load();\r\n    this.eventService.bus$\r\n      .pipe(\r\n        this.takeWhileMounted(),\r\n        filter((e) => e instanceof AlunoEvent),\r\n        map((e) => e as AlunoEvent)\r\n      )\r\n      .subscribe(() => this.pageStateSubject.load(true));\r\n  }\r\n\r\n  handleEditarClick(item: Aluno): void {\r\n    this.router.navigate([item.id, 'edit'], {\r\n      relativeTo: this.activatedRoute,\r\n    });\r\n  }\r\n\r\n  handleOrdenacaoChange(sort: Sort<AlunoSortFields>): void {\r\n    this.pageStateSubject.setSort(sort);\r\n  }\r\n\r\n  handleCarregarMais(): void {\r\n    this.pageStateSubject.nextPage();\r\n  }\r\n\r\n  handleFilterChange(query: string): void {\r\n    this.pageStateSubject.setFilter(query);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "alunoService",
                        "type": "AlunoService"
                    },
                    {
                        "name": "eventService",
                        "type": "EventService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "alunoService",
                        "type": "AlunoService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventService",
                        "type": "EventService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<po-page-list\r\n  *ngIf=\"pageState$ | async as pageState\"\r\n  p-title=\"Alunos cadastrados\"\r\n  i18n-p-title=\"Título da página 'Alunos cadastrados'\"\r\n  [p-filter]=\"filtro\"\r\n  [p-actions]=\"acoes\"\r\n>\r\n  <app-aluno-list\r\n    [alunos]=\"pageState.items\"\r\n    [podeCarregarMais]=\"pageState.hasNext\"\r\n    [carregando]=\"pageState.loading\"\r\n    [(ordenar)]=\"pageState.sort\"\r\n    (ordenarChange)=\"handleOrdenacaoChange($event)\"\r\n    (carregarMais)=\"handleCarregarMais()\"\r\n    (editar)=\"handleEditarClick($event)\"\r\n  ></app-aluno-list>\r\n</po-page-list>\r\n<router-outlet></router-outlet>\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-d78e5a3630d4d82cdd07c7fe1fa061f4",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "collapsed",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "menus",
                    "defaultValue": "[\r\n    {\r\n      label: $localize`:Texto da opção \"Home\" do menu lateral:Home`,\r\n      link: '/',\r\n      shortLabel: 'Home',\r\n      icon: 'po-icon-home',\r\n    },\r\n    {\r\n      label: $localize`:Texto da opção \"Alunos\" do menu lateral:Alunos`,\r\n      link: '/alunos',\r\n      shortLabel: 'Alunos',\r\n      icon: 'po-icon-user',\r\n    },\r\n    {\r\n      label: $localize`:Texto da opção \"Professores\" no menu lateral:Professores`,\r\n      link: '/professores',\r\n      shortLabel: 'Profs',\r\n      icon: 'po-icon-star',\r\n    },\r\n    {\r\n      label: $localize`:Texto da opção \"Disciplinas\" no menu lateral:Disciplinas`,\r\n      link: '/disciplinas',\r\n      shortLabel: 'Displs',\r\n      icon: 'po-icon-document-filled',\r\n    },\r\n  ]",
                    "type": "PoMenuItem[]",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\nimport { PoMenuItem } from '@po-ui/ng-components';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css'],\r\n})\r\nexport class AppComponent {\r\n  readonly menus: PoMenuItem[] = [\r\n    {\r\n      label: $localize`:Texto da opção \"Home\" do menu lateral:Home`,\r\n      link: '/',\r\n      shortLabel: 'Home',\r\n      icon: 'po-icon-home',\r\n    },\r\n    {\r\n      label: $localize`:Texto da opção \"Alunos\" do menu lateral:Alunos`,\r\n      link: '/alunos',\r\n      shortLabel: 'Alunos',\r\n      icon: 'po-icon-user',\r\n    },\r\n    {\r\n      label: $localize`:Texto da opção \"Professores\" no menu lateral:Professores`,\r\n      link: '/professores',\r\n      shortLabel: 'Profs',\r\n      icon: 'po-icon-star',\r\n    },\r\n    {\r\n      label: $localize`:Texto da opção \"Disciplinas\" no menu lateral:Disciplinas`,\r\n      link: '/disciplinas',\r\n      shortLabel: 'Displs',\r\n      icon: 'po-icon-document-filled',\r\n    },\r\n  ];\r\n\r\n  collapsed = true;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"po-wrapper\">\r\n  <po-toolbar p-title=\"SL Onboarding\"></po-toolbar>\r\n\r\n  <po-menu\r\n    [p-menus]=\"menus\"\r\n    p-logo=\"assets/totvs-logo-grey.svg\"\r\n    p-short-logo=\"assets/totvs-short-logo-grey.svg\"\r\n    [(p-collapsed)]=\"collapsed\"\r\n  ></po-menu>\r\n\r\n  <router-outlet></router-outlet>\r\n</div>\r\n"
        },
        {
            "name": "BaseComponent",
            "id": "component-BaseComponent-c9c09684b5160a0725aa83c77594524f",
            "file": "src/app/shared/base/base.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "mounted",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "mountSubject",
                    "defaultValue": "new BehaviorSubject(true)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                },
                {
                    "name": "takeWhileMounted",
                    "args": [],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 24,
                    "modifierKind": [
                        113
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { OnDestroy, OnInit, Component } from '@angular/core';\r\nimport { takeWhile } from 'rxjs/operators';\r\nimport { BehaviorSubject, Observable, MonoTypeOperatorFunction } from 'rxjs';\r\n\r\n@Component({ template: '' })\r\nexport abstract class BaseComponent implements OnInit, OnDestroy {\r\n  protected mounted = true;\r\n  private mountSubject = new BehaviorSubject(true);\r\n\r\n  protected get mounted$(): Observable<boolean> {\r\n    return this.mountSubject.asObservable();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.takeWhileMounted = this.takeWhileMounted.bind(this);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.mounted = false;\r\n    this.mountSubject.next(false);\r\n    this.mountSubject.complete();\r\n  }\r\n\r\n  protected takeWhileMounted<T = any>(): MonoTypeOperatorFunction<T> {\r\n    return takeWhile<T>(() => this.mounted);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "mounted$": {
                    "name": "mounted$",
                    "getSignature": {
                        "name": "mounted$",
                        "type": "",
                        "returnType": "Observable<boolean>",
                        "line": 10
                    }
                }
            }
        },
        {
            "name": "DisciplinaFormComponent",
            "id": "component-DisciplinaFormComponent-2168451ce7a79e4de0409d5804dd3925",
            "file": "src/app/domain/disciplina/disciplina-form/disciplina-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-disciplina-form",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./disciplina-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 31
                },
                {
                    "name": "disciplina",
                    "defaultValue": "new Disciplina()",
                    "line": 28,
                    "type": "Disciplina"
                },
                {
                    "name": "professorService",
                    "line": 34,
                    "type": "PoLookupFilter"
                }
            ],
            "outputsClass": [
                {
                    "name": "formSubmit",
                    "defaultValue": "new EventEmitter<Disciplina>()",
                    "line": 37,
                    "type": "EventEmitter"
                },
                {
                    "name": "novoProfessorClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 40,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "formSubscription",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "professorColumns",
                    "defaultValue": "[\r\n    { property: 'nome', label: $localize`Nome` },\r\n    { property: 'email', label: $localize`E-mail` },\r\n    { property: 'cpfFormatado', label: $localize`CPF` },\r\n  ]",
                    "type": "PoLookupColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "mounted",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "mountSubject",
                    "defaultValue": "new BehaviorSubject(true)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "criarForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67
                },
                {
                    "name": "handleLookupError",
                    "args": [
                        {
                            "name": "error",
                            "type": "Error"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "Error",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "takeWhileMounted",
                    "args": [],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 24,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  OnInit,\r\n  OnChanges,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport { BaseComponent } from 'app/shared/base/base.component';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { Disciplina } from '../disciplina';\r\nimport { PoLookupFilter, PoLookupColumn } from '@po-ui/ng-components';\r\n\r\n@Component({\r\n  selector: 'app-disciplina-form',\r\n  templateUrl: './disciplina-form.component.html',\r\n})\r\nexport class DisciplinaFormComponent\r\n  extends BaseComponent\r\n  implements OnInit, OnChanges {\r\n  constructor(private formBuilder: FormBuilder) {\r\n    super();\r\n  }\r\n\r\n  @Input()\r\n  disciplina = new Disciplina();\r\n\r\n  @Input()\r\n  disabled = false;\r\n\r\n  @Input()\r\n  professorService: PoLookupFilter;\r\n\r\n  @Output()\r\n  formSubmit = new EventEmitter<Disciplina>();\r\n\r\n  @Output()\r\n  novoProfessorClick = new EventEmitter<void>();\r\n\r\n  formSubscription: Subscription;\r\n\r\n  form: FormGroup;\r\n\r\n  professorColumns: PoLookupColumn[] = [\r\n    { property: 'nome', label: $localize`Nome` },\r\n    { property: 'email', label: $localize`E-mail` },\r\n    { property: 'cpfFormatado', label: $localize`CPF` },\r\n  ];\r\n\r\n  get canSubmit(): boolean {\r\n    return (\r\n      this.form && this.form.valid && this.form.dirty && !this.form.pending\r\n    );\r\n  }\r\n\r\n  ngOnChanges({ disciplina }: SimpleChanges): void {\r\n    if (disciplina) this.criarForm();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    super.ngOnInit();\r\n    this.criarForm();\r\n  }\r\n\r\n  criarForm(): void {\r\n    this.formSubscription?.unsubscribe();\r\n    this.form = this.disciplina.criarForm(this.formBuilder);\r\n    this.formSubscription = this.disciplina.subscribeFormChanges(\r\n      this.form,\r\n      this.takeWhileMounted()\r\n    );\r\n  }\r\n\r\n  handleSubmit(): void {\r\n    if (this.canSubmit) this.formSubmit.emit(this.disciplina);\r\n  }\r\n\r\n  handleLookupError(error: Error): void {\r\n    this.form.get('professorRef').setErrors({ lookup: error.message });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "accessors": {
                "canSubmit": {
                    "name": "canSubmit",
                    "getSignature": {
                        "name": "canSubmit",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 52
                    }
                }
            },
            "templateData": "<form class=\"po-row\" [formGroup]=\"form\" (submit)=\"handleSubmit()\">\r\n  <div class=\"po-md-6 po-sm-12\">\r\n    <po-input\r\n      class=\"po-12\"\r\n      i18n-p-label=\"Rótulo do campo 'Descrição' do formulário de disciplina\"\r\n      i18n-aria-label=\"\r\n        Acessibilidade: rótulo do campo 'Descrição' do formulário de disciplina\r\n      \"\r\n      p-label=\"Descrição\"\r\n      name=\"descricao\"\r\n      [p-disabled]=\"disabled\"\r\n      formControlName=\"descricao\"\r\n      aria-label=\"Campo descricao\"\r\n      p-required\r\n    ></po-input>\r\n    <app-field-messages [control]=\"form.get('descricao')\"></app-field-messages>\r\n  </div>\r\n  <div class=\"po-md-3 po-sm-12\">\r\n    <po-input\r\n      class=\"po-12\"\r\n      i18n-p-label=\"Rótulo do campo 'Sigla' do formulário de disciplina\"\r\n      i18n-aria-label=\"\r\n        Acessibilidade: rótulo do campo 'Sigla' do formulário de disciplina\r\n      \"\r\n      p-label=\"Sigla\"\r\n      name=\"sigla\"\r\n      [p-disabled]=\"disabled\"\r\n      formControlName=\"sigla\"\r\n      aria-label=\"Campo Sigla\"\r\n      [p-maxlength]=\"10\"\r\n      p-required\r\n    ></po-input>\r\n    <app-field-messages [control]=\"form.get('sigla')\"></app-field-messages>\r\n  </div>\r\n  <div class=\"po-md-3 po-sm-12\">\r\n    <po-number\r\n      class=\"po-12\"\r\n      i18n-p-label=\"Rótulo do campo 'Carga horária' do formulário de disciplina\"\r\n      i18n-aria-label=\"\r\n        Acessibilidade: rótulo do campo 'Carga horária' do formulário de\r\n        disciplina\r\n      \"\r\n      p-label=\"Carga horária\"\r\n      name=\"cargaHoraria\"\r\n      [p-disabled]=\"disabled\"\r\n      formControlName=\"cargaHoraria\"\r\n      aria-label=\"Campo Carga horária\"\r\n      p-required\r\n    ></po-number>\r\n    <app-field-messages\r\n      [control]=\"form.get('cargaHoraria')\"\r\n    ></app-field-messages>\r\n  </div>\r\n  <div class=\"po-md-8 po-sm-12\">\r\n    <po-lookup\r\n      #professorLookupRef\r\n      name=\"professorRef\"\r\n      p-label=\"Professor\"\r\n      i18n-p-help\r\n      i18n-p-placeholder\r\n      i18n-p-label=\"Rótulo do campo 'Professor' do formulário de disciplina\"\r\n      i18n-aria-label=\"\r\n        Acessibilidade: rótulo do campo 'Professor' do formulário de disciplina\r\n      \"\r\n      aria-label=\"Campo professor\"\r\n      p-field-label=\"nome\"\r\n      p-field-value=\"id\"\r\n      formControlName=\"professorRef\"\r\n      p-help=\"Clique na lupa para abrir a janela de busca\"\r\n      p-placeholder=\"Digite completamente o CPF ou o Nome do professor\"\r\n      [p-filter-service]=\"professorService\"\r\n      [p-columns]=\"professorColumns\"\r\n      [p-disabled]=\"disabled\"\r\n      [p-required]=\"true\"\r\n      (p-error)=\"handleLookupError($event)\"\r\n    ></po-lookup>\r\n    <app-field-messages\r\n      [control]=\"form.get('professorRef')\"\r\n    ></app-field-messages>\r\n  </div>\r\n  <div class=\"po-md-4 po-sm-12\">\r\n    <app-field-container label=\"&nbsp;\" help=\"&nbsp;\">\r\n      <po-button\r\n        *ngIf=\"novoProfessorClick.observers.length > 0\"\r\n        class=\"po-sm-12 po-m-0 po-p-0\"\r\n        p-icon=\"po-icon-plus\"\r\n        p-label=\"Novo professor\"\r\n        i18n-p-label=\"\r\n          Rótulo do botão 'Novo professor' presente no formulário de disciplina\r\n        \"\r\n        (p-click)=\"novoProfessorClick.emit()\"\r\n      ></po-button>\r\n    </app-field-container>\r\n  </div>\r\n  <button hidden type=\"submit\"></button>\r\n</form>\r\n"
        },
        {
            "name": "DisciplinaFormRouteComponent",
            "id": "component-DisciplinaFormRouteComponent-6b08080a0316dbdba90501a2933fcc84",
            "file": "src/app/domain/disciplina/routes/disciplina-form-route/disciplina-form-route.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-disciplina-form-route",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./disciplina-form-route.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "disciplina",
                    "defaultValue": "new Disciplina()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "formRef",
                    "type": "DisciplinaFormComponent",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'formRef', {static: true}"
                        }
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "modalRef",
                    "type": "PoModalComponent",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "PoModalComponent, {static: true}"
                        }
                    ]
                },
                {
                    "name": "podeCancelar",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "processando",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "service",
                    "defaultValue": "{\r\n    getFilteredItems: ({ filter: query, page, pageSize }) =>\r\n      this.professorService.filtrar(new Pageable(page, pageSize), query),\r\n    getObjectByValue: (query) => {\r\n      if (this.disciplina.professorRef === query)\r\n        of(this.disciplina.professor).pipe(\r\n          tap(() => (this.loading = false)),\r\n          delay(20)\r\n        );\r\n      this.loading = true;\r\n      return this.professorService.lookup(query).pipe(\r\n        tap(() => (this.loading = false)),\r\n        catchError((error) => {\r\n          this.loading = false;\r\n          return throwError(error);\r\n        })\r\n      );\r\n    },\r\n  }",
                    "type": "PoLookupFilter",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "mounted",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "mountSubject",
                    "defaultValue": "new BehaviorSubject(true)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "cancelar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136
                },
                {
                    "name": "handleNovoProfessorClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97
                },
                {
                    "name": "retornar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "salvar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "takeWhileMounted",
                    "args": [],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 24,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\r\nimport { BaseComponent } from 'app/shared/base/base.component';\r\nimport { DisciplinaService } from '../../disciplina.service';\r\nimport {\r\n  PoNotificationService,\r\n  PoModalComponent,\r\n  PoModalAction,\r\n  PoLookupFilter,\r\n} from '@po-ui/ng-components';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { DisciplinaFormComponent } from '../../disciplina-form/disciplina-form.component';\r\nimport { Disciplina } from '../../disciplina';\r\nimport { filter, map, switchMap, tap, catchError, delay } from 'rxjs/operators';\r\nimport { ProfessorService } from 'app/domain/pessoa/professor/professor.service';\r\nimport { ProfessorEvent } from 'app/domain/pessoa/professor/professor';\r\nimport { Pageable } from 'app/shared/util/service.util';\r\nimport { of, throwError } from 'rxjs';\r\nimport { EventService } from 'app/shared/event/event.service';\r\n\r\ninterface Actions {\r\n  salvar: PoModalAction;\r\n  cancelar: PoModalAction;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-disciplina-form-route',\r\n  templateUrl: './disciplina-form-route.component.html',\r\n})\r\nexport class DisciplinaFormRouteComponent\r\n  extends BaseComponent\r\n  implements OnInit, OnDestroy {\r\n  constructor(\r\n    private disciplinaService: DisciplinaService,\r\n    private professorService: ProfessorService,\r\n    private notificationService: PoNotificationService,\r\n    private router: Router,\r\n    private activatedRoute: ActivatedRoute,\r\n    private eventService: EventService\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  @ViewChild(PoModalComponent, { static: true })\r\n  modalRef: PoModalComponent;\r\n\r\n  @ViewChild('formRef', { static: true })\r\n  formRef: DisciplinaFormComponent;\r\n\r\n  processando = false;\r\n\r\n  disciplina = new Disciplina();\r\n\r\n  podeCancelar = true;\r\n\r\n  loading = false;\r\n\r\n  service: PoLookupFilter = {\r\n    getFilteredItems: ({ filter: query, page, pageSize }) =>\r\n      this.professorService.filtrar(new Pageable(page, pageSize), query),\r\n    getObjectByValue: (query) => {\r\n      if (this.disciplina.professorRef === query)\r\n        of(this.disciplina.professor).pipe(\r\n          tap(() => (this.loading = false)),\r\n          delay(20)\r\n        );\r\n      this.loading = true;\r\n      return this.professorService.lookup(query).pipe(\r\n        tap(() => (this.loading = false)),\r\n        catchError((error) => {\r\n          this.loading = false;\r\n          return throwError(error);\r\n        })\r\n      );\r\n    },\r\n  };\r\n\r\n  get nomeProfessor(): string {\r\n    return this.disciplina?.professor?.nome || '';\r\n  }\r\n\r\n  get actions(): Actions {\r\n    return {\r\n      salvar: {\r\n        label: $localize`:Texto do botão \"Salvar\" da modal (janela) de formulário de disciplina:Salvar`,\r\n        action: () => this.salvar(),\r\n        loading: this.loading || this.processando,\r\n        disabled: !this.formRef.canSubmit,\r\n      },\r\n      cancelar: {\r\n        label: $localize`:Texto do botão \"Cancelar\" da modal (janela) de formulário de disciplina:Cancelar`,\r\n        action: () => this.cancelar(),\r\n        disabled: !this.podeCancelar,\r\n      },\r\n    };\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    super.ngOnInit();\r\n    this.activatedRoute.data\r\n      .pipe(\r\n        this.takeWhileMounted(),\r\n        filter((data) => data.loadFromParam),\r\n        map((data) => data.loadFromParam),\r\n        tap(() => (this.loading = true)),\r\n        switchMap((param) =>\r\n          this.activatedRoute.params.pipe(\r\n            filter((params) => params[param]),\r\n            map((params) => params[param])\r\n          )\r\n        ),\r\n        switchMap((id) => this.disciplinaService.recuperarPorId(id))\r\n      )\r\n      .subscribe((disciplina) => {\r\n        this.disciplina = disciplina;\r\n        if (!disciplina.professor) this.loading = false;\r\n      });\r\n    this.eventService.bus$\r\n      .pipe(\r\n        this.takeWhileMounted(),\r\n        filter((evt) => evt instanceof ProfessorEvent),\r\n        map((evt) => evt as ProfessorEvent),\r\n        filter((evt) => evt.source === 'client' && evt.type === 'cadastrado')\r\n      )\r\n      .subscribe(({ entidade: { id } }) =>\r\n        this.formRef.form.patchValue({ professorRef: id })\r\n      );\r\n\r\n    this.modalRef.open();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    super.ngOnDestroy();\r\n    this.modalRef.close();\r\n  }\r\n\r\n  cancelar(): void {\r\n    this.retornar();\r\n  }\r\n\r\n  salvar(): void {\r\n    this.processando = true;\r\n    this.podeCancelar = false;\r\n    this.disciplinaService\r\n      .salvar(this.disciplina)\r\n      .pipe(this.takeWhileMounted())\r\n      .subscribe(\r\n        () => {\r\n          this.notificationService.success(this.mensagemSucesso);\r\n          this.retornar();\r\n        },\r\n        (error) => {\r\n          this.processando = false;\r\n          this.podeCancelar = true;\r\n          console.error(error);\r\n        }\r\n      );\r\n  }\r\n\r\n  handleNovoProfessorClick(): void {\r\n    this.router.navigate(['professor', 'new'], {\r\n      relativeTo: this.activatedRoute,\r\n    });\r\n  }\r\n\r\n  private retornar(): void {\r\n    this.router.navigate(this.urlRetorno);\r\n  }\r\n\r\n  private get urlRetorno(): string[] {\r\n    return this.activatedRoute.snapshot.data.urlRetorno(this.activatedRoute);\r\n  }\r\n\r\n  private get mensagemSucesso(): string {\r\n    return this.activatedRoute.snapshot.data.mensagemSucesso();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "disciplinaService",
                        "type": "DisciplinaService"
                    },
                    {
                        "name": "professorService",
                        "type": "ProfessorService"
                    },
                    {
                        "name": "notificationService",
                        "type": "PoNotificationService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "eventService",
                        "type": "EventService"
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "disciplinaService",
                        "type": "DisciplinaService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "professorService",
                        "type": "ProfessorService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "PoNotificationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventService",
                        "type": "EventService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "nomeProfessor": {
                    "name": "nomeProfessor",
                    "getSignature": {
                        "name": "nomeProfessor",
                        "type": "string",
                        "returnType": "string",
                        "line": 77
                    }
                },
                "actions": {
                    "name": "actions",
                    "getSignature": {
                        "name": "actions",
                        "type": "",
                        "returnType": "Actions",
                        "line": 81
                    }
                },
                "urlRetorno": {
                    "name": "urlRetorno",
                    "getSignature": {
                        "name": "urlRetorno",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 169
                    }
                },
                "mensagemSucesso": {
                    "name": "mensagemSucesso",
                    "getSignature": {
                        "name": "mensagemSucesso",
                        "type": "string",
                        "returnType": "string",
                        "line": 173
                    }
                }
            },
            "templateData": "<po-modal\r\n  #modelRef\r\n  [p-click-out]=\"false\"\r\n  [p-hide-close]=\"true\"\r\n  [p-primary-action]=\"actions.salvar\"\r\n  [p-secondary-action]=\"actions.cancelar\"\r\n  p-size=\"lg\"\r\n  p-title=\"Formulário de disciplina\"\r\n  i18n-p-title=\"\r\n    Título do formulário de cadastro ou edição dos dados de uma disciplina\r\n  \"\r\n>\r\n  <app-disciplina-form\r\n    #formRef\r\n    [disciplina]=\"disciplina\"\r\n    [disabled]=\"loading || processando\"\r\n    [professorService]=\"service\"\r\n    (formSubmit)=\"salvar()\"\r\n    (novoProfessorClick)=\"handleNovoProfessorClick()\"\r\n  ></app-disciplina-form>\r\n  <app-loading-indicator\r\n    [loading]=\"loading\"\r\n    i18n-text=\"\r\n      Texto 'Carregando...' que aparece na janela de formulário de disciplina\r\n      quando os dados de uma disciplina existente estão sendo carregados\r\n    \"\r\n    text=\"Carregando...\"\r\n  ></app-loading-indicator>\r\n</po-modal>\r\n<router-outlet></router-outlet>\r\n"
        },
        {
            "name": "DisciplinaListComponent",
            "id": "component-DisciplinaListComponent-bf93aa0c609be501aac8c6aa24822511",
            "file": "src/app/domain/disciplina/disciplina-list/disciplina-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-disciplina-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./disciplina-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "carregando",
                    "defaultValue": "false",
                    "line": 36
                },
                {
                    "name": "disciplinas",
                    "defaultValue": "[]",
                    "line": 30,
                    "type": "Disciplina[]"
                },
                {
                    "name": "ordenar",
                    "line": 39,
                    "type": "Sort<DisciplinaSortFields>"
                },
                {
                    "name": "podeCarregarMais",
                    "defaultValue": "false",
                    "line": 33
                }
            ],
            "outputsClass": [
                {
                    "name": "carregarMais",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 42,
                    "type": "EventEmitter"
                },
                {
                    "name": "editar",
                    "defaultValue": "new EventEmitter<Disciplina>()",
                    "line": 48,
                    "type": "EventEmitter"
                },
                {
                    "name": "ordenarChange",
                    "defaultValue": "new EventEmitter<Sort<DisciplinaSortFields>>()",
                    "line": 45,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "actions",
                    "defaultValue": "[\r\n    {\r\n      label: $localize`:Texto do botão \"Editar\" na tabela de disciplinas:Editar`,\r\n      action: (item: Disciplina) => this.editar.emit(item),\r\n      icon: 'po-icon-edit',\r\n    },\r\n  ]",
                    "type": "PoTableAction[]",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "carregandoMais",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "columns",
                    "defaultValue": "[\r\n    {\r\n      property: 'sigla',\r\n      label: $localize`:Cabeçalho da coluna \"Sigla\" da tabela de disciplinas:Sigla`,\r\n      width: '100px',\r\n    },\r\n    {\r\n      property: 'descricao',\r\n      label: $localize`:Cabeçalho da coluna \"Descrição\" da tabela de disciplinas:Descrição`,\r\n    },\r\n    {\r\n      property: 'professor',\r\n      type: 'columnTemplate',\r\n    },\r\n    {\r\n      property: 'cargaHoraria',\r\n      label: $localize`:Cabeçalho da coluna \"Carga horária\" da tabela de disciplinas:Carga horária`,\r\n      type: 'columnTemplate',\r\n      width: '120px',\r\n    },\r\n  ]",
                    "type": "PoTableColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "literals",
                    "defaultValue": "CustomLiterals.forTable()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "poTable",
                    "type": "PoTableComponent",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'tableRef', {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handleCarregarMais",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105
                },
                {
                    "name": "handleOrdenar",
                    "args": [
                        {
                            "name": "change",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "jsdoctags": [
                        {
                            "name": "change",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  OnInit,\r\n  ViewChild,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  SimpleChanges,\r\n  OnChanges,\r\n} from '@angular/core';\r\nimport {\r\n  PoTableComponent,\r\n  PoTableAction,\r\n  PoTableColumn,\r\n  PoTableColumnSortType,\r\n} from '@po-ui/ng-components';\r\nimport { Disciplina, DisciplinaSortFields } from '../disciplina';\r\nimport { Sort } from 'app/shared/util/service.util';\r\nimport { CustomLiterals } from 'app/shared/literals';\r\n\r\n@Component({\r\n  selector: 'app-disciplina-list',\r\n  templateUrl: './disciplina-list.component.html',\r\n})\r\nexport class DisciplinaListComponent implements OnInit, OnChanges {\r\n  @ViewChild('tableRef', { static: true })\r\n  poTable: PoTableComponent;\r\n\r\n  @Input()\r\n  disciplinas: Disciplina[] = [];\r\n\r\n  @Input()\r\n  podeCarregarMais = false;\r\n\r\n  @Input()\r\n  carregando = false;\r\n\r\n  @Input()\r\n  ordenar: Sort<DisciplinaSortFields>;\r\n\r\n  @Output()\r\n  carregarMais = new EventEmitter<void>();\r\n\r\n  @Output()\r\n  ordenarChange = new EventEmitter<Sort<DisciplinaSortFields>>();\r\n\r\n  @Output()\r\n  editar = new EventEmitter<Disciplina>();\r\n\r\n  carregandoMais = false;\r\n\r\n  literals = CustomLiterals.forTable();\r\n\r\n  actions: PoTableAction[] = [\r\n    {\r\n      label: $localize`:Texto do botão \"Editar\" na tabela de disciplinas:Editar`,\r\n      action: (item: Disciplina) => this.editar.emit(item),\r\n      icon: 'po-icon-edit',\r\n    },\r\n  ];\r\n\r\n  columns: PoTableColumn[] = [\r\n    {\r\n      property: 'sigla',\r\n      label: $localize`:Cabeçalho da coluna \"Sigla\" da tabela de disciplinas:Sigla`,\r\n      width: '100px',\r\n    },\r\n    {\r\n      property: 'descricao',\r\n      label: $localize`:Cabeçalho da coluna \"Descrição\" da tabela de disciplinas:Descrição`,\r\n    },\r\n    {\r\n      property: 'professor',\r\n      type: 'columnTemplate',\r\n    },\r\n    {\r\n      property: 'cargaHoraria',\r\n      label: $localize`:Cabeçalho da coluna \"Carga horária\" da tabela de disciplinas:Carga horária`,\r\n      type: 'columnTemplate',\r\n      width: '120px',\r\n    },\r\n  ];\r\n\r\n  ngOnInit(): void {\r\n    if (this.ordenar)\r\n      this.poTable.sortedColumn = {\r\n        property: this.columns.find(\r\n          (column) => column.property === this.ordenar.field\r\n        ),\r\n        ascending: this.ordenar.ascending,\r\n      };\r\n  }\r\n\r\n  handleOrdenar(change: {\r\n    column: PoTableColumn;\r\n    type: PoTableColumnSortType;\r\n  }): void {\r\n    this.ordenarChange.emit(Sort.fromOrderChange<DisciplinaSortFields>(change));\r\n  }\r\n\r\n  ngOnChanges({ disciplinas }: SimpleChanges): void {\r\n    if (disciplinas && this.carregandoMais) this.carregandoMais = false;\r\n  }\r\n\r\n  handleCarregarMais(): void {\r\n    if (this.podeCarregarMais) {\r\n      this.carregandoMais = true;\r\n      this.carregarMais.emit();\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<po-table\r\n  #tableRef\r\n  [p-actions]=\"actions\"\r\n  [p-columns]=\"columns\"\r\n  [p-items]=\"disciplinas\"\r\n  [p-literals]=\"literals\"\r\n  [p-loading]=\"carregando && !carregandoMais\"\r\n  [p-loading-show-more]=\"carregando && carregandoMais\"\r\n  [p-show-more-disabled]=\"!podeCarregarMais\"\r\n  [p-sort]=\"true\"\r\n  (p-sort-by)=\"handleOrdenar($event)\"\r\n  (p-show-more)=\"handleCarregarMais()\"\r\n  p-striped=\"true\"\r\n  p-hide-text-overflow\r\n>\r\n  <ng-template p-table-column-template [p-property]=\"'professor'\" let-professor>\r\n    {{ professor?.nome }}\r\n  </ng-template>\r\n  <ng-template\r\n    p-table-column-template\r\n    [p-property]=\"'cargaHoraria'\"\r\n    let-cargaHoraria\r\n  >\r\n    <span i18n>\r\n      {cargaHoraria, plural, =0 {Sem carga horária definida} =1 {Uma hora} other\r\n      {{{cargaHoraria}} horas}}\r\n    </span>\r\n  </ng-template>\r\n</po-table>\r\n"
        },
        {
            "name": "DisciplinaListRouteComponent",
            "id": "component-DisciplinaListRouteComponent-2add4b28d89f2a16883b8ba9e156e381",
            "file": "src/app/domain/disciplina/routes/disciplina-list-route/disciplina-list-route.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-disciplina-list-route",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./disciplina-list-route.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "acoes",
                    "defaultValue": "[\r\n    {\r\n      icon: 'po-icon po-icon-plus',\r\n      label: $localize`:Texto do botão \"Novo disciplina\" para cadastrar uma nova disciplina, presente na página \"Disciplinas cadastradas\":Nova disciplina`,\r\n      action: () =>\r\n        this.router.navigate(['new'], { relativeTo: this.activatedRoute }),\r\n    },\r\n  ]",
                    "type": "PoPageAction[]",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "filtro",
                    "defaultValue": "{\r\n    placeholder: $localize`:Placeholder do campo de busca da página \"Disciplinas cadastradas\":Buscar disciplinas`,\r\n    action: (query: string) => this.handleFilterChange(query),\r\n  }",
                    "type": "PoPageFilter",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "pageState$",
                    "type": "Observable<PageState<Disciplina, DisciplinaSortFields>>",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "pageStateSubject",
                    "type": "PageStateSubject<Disciplina | DisciplinaSortFields>",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "mounted",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "mountSubject",
                    "defaultValue": "new BehaviorSubject(true)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "handleCarregarMais",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82
                },
                {
                    "name": "handleEditarClick",
                    "args": [
                        {
                            "name": "item",
                            "type": "Disciplina"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Disciplina",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleFilterChange",
                    "args": [
                        {
                            "name": "query",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleOrdenacaoChange",
                    "args": [
                        {
                            "name": "sort",
                            "type": "Sort<DisciplinaSortFields>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "jsdoctags": [
                        {
                            "name": "sort",
                            "type": "Sort<DisciplinaSortFields>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "takeWhileMounted",
                    "args": [],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 24,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { BaseComponent } from 'app/shared/base/base.component';\r\nimport { DisciplinaService } from '../../disciplina.service';\r\nimport { EventService } from 'app/shared/event/event.service';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport {\r\n  PageStateSubject,\r\n  PageState,\r\n  Sort,\r\n} from 'app/shared/util/service.util';\r\nimport { PoPageFilter, PoPageAction } from '@po-ui/ng-components';\r\nimport { Observable } from 'rxjs';\r\nimport {\r\n  Disciplina,\r\n  DisciplinaSortFields,\r\n  DisciplinaEvent,\r\n} from '../../disciplina';\r\nimport { filter, map } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-disciplina-list-route',\r\n  templateUrl: './disciplina-list-route.component.html',\r\n})\r\nexport class DisciplinaListRouteComponent\r\n  extends BaseComponent\r\n  implements OnInit {\r\n  constructor(\r\n    private disciplinaService: DisciplinaService,\r\n    private eventService: EventService,\r\n    private router: Router,\r\n    private activatedRoute: ActivatedRoute\r\n  ) {\r\n    super();\r\n    this.pageStateSubject = new PageStateSubject(\r\n      (pageable, query, sort) =>\r\n        this.disciplinaService.filtrar(pageable, query, sort),\r\n      () => this.takeWhileMounted()\r\n    );\r\n    this.pageState$ = this.pageStateSubject.asObservable();\r\n  }\r\n\r\n  filtro: PoPageFilter = {\r\n    placeholder: $localize`:Placeholder do campo de busca da página \"Disciplinas cadastradas\":Buscar disciplinas`,\r\n    action: (query: string) => this.handleFilterChange(query),\r\n  };\r\n\r\n  acoes: PoPageAction[] = [\r\n    {\r\n      icon: 'po-icon po-icon-plus',\r\n      label: $localize`:Texto do botão \"Novo disciplina\" para cadastrar uma nova disciplina, presente na página \"Disciplinas cadastradas\":Nova disciplina`,\r\n      action: () =>\r\n        this.router.navigate(['new'], { relativeTo: this.activatedRoute }),\r\n    },\r\n  ];\r\n\r\n  pageState$: Observable<PageState<Disciplina, DisciplinaSortFields>>;\r\n\r\n  private pageStateSubject: PageStateSubject<Disciplina, DisciplinaSortFields>;\r\n\r\n  ngOnInit(): void {\r\n    super.ngOnInit();\r\n    this.pageStateSubject.load();\r\n    this.eventService.bus$\r\n      .pipe(\r\n        this.takeWhileMounted(),\r\n        filter((e) => e instanceof DisciplinaEvent),\r\n        map((e) => e as DisciplinaEvent)\r\n      )\r\n      .subscribe(() => this.pageStateSubject.load(true));\r\n  }\r\n\r\n  handleEditarClick(item: Disciplina): void {\r\n    this.router.navigate([item.id, 'edit'], {\r\n      relativeTo: this.activatedRoute,\r\n    });\r\n  }\r\n\r\n  handleOrdenacaoChange(sort: Sort<DisciplinaSortFields>): void {\r\n    this.pageStateSubject.setSort(sort);\r\n  }\r\n\r\n  handleCarregarMais(): void {\r\n    this.pageStateSubject.nextPage();\r\n  }\r\n\r\n  handleFilterChange(query: string): void {\r\n    this.pageStateSubject.setFilter(query);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "disciplinaService",
                        "type": "DisciplinaService"
                    },
                    {
                        "name": "eventService",
                        "type": "EventService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "disciplinaService",
                        "type": "DisciplinaService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventService",
                        "type": "EventService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<po-page-list\r\n  *ngIf=\"pageState$ | async as pageState\"\r\n  p-title=\"Disciplinas cadastradas\"\r\n  i18n-p-title=\"Título da página 'Disciplinas cadastradas'\"\r\n  [p-filter]=\"filtro\"\r\n  [p-actions]=\"acoes\"\r\n>\r\n  <app-disciplina-list\r\n    [disciplinas]=\"pageState.items\"\r\n    [podeCarregarMais]=\"pageState.hasNext\"\r\n    [carregando]=\"pageState.loading\"\r\n    [(ordenar)]=\"pageState.sort\"\r\n    (ordenarChange)=\"handleOrdenacaoChange($event)\"\r\n    (carregarMais)=\"handleCarregarMais()\"\r\n    (editar)=\"handleEditarClick($event)\"\r\n  ></app-disciplina-list>\r\n</po-page-list>\r\n<router-outlet></router-outlet>\r\n"
        },
        {
            "name": "FieldContainerComponent",
            "id": "component-FieldContainerComponent-bdd0f6c33c69a3da38a67bb2d0c42800",
            "file": "src/app/shared/components/field-container/field-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-field-container",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./field-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "help",
                    "line": 14,
                    "type": "string"
                },
                {
                    "name": "label",
                    "line": 11,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-field-container',\r\n  templateUrl: './field-container.component.html',\r\n})\r\nexport class FieldContainerComponent {\r\n  constructor() {}\r\n\r\n  @Input()\r\n  label: string;\r\n\r\n  @Input()\r\n  help?: string;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 7
            },
            "templateData": "<div class=\"po-field-container\">\r\n  <div class=\"po-field-container-title\">\r\n    <div class=\"po-field-title\">{{ label }}</div>\r\n  </div>\r\n  <div class=\"po-field-help\" *ngIf=\"help\">{{ help }}</div>\r\n  <div class=\"po-field-container-content\">\r\n    <ng-content></ng-content>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "FieldMessagesComponent",
            "id": "component-FieldMessagesComponent-6630ad896bb5735ad1c8a0a23d72b0cb",
            "file": "src/app/shared/components/field-messages/field-messages.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-field-messages",
            "styleUrls": [
                "./field-messages.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./field-messages.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "line": 20,
                    "type": "AbstractControl"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "popupComponent",
                    "type": "PoPopupComponent",
                    "optional": true,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'errorPopup'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  Input,\r\n  ViewChild,\r\n  OnChanges,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport { AbstractControl, ValidationErrors } from '@angular/forms';\r\nimport { PoPopupComponent } from '@po-ui/ng-components';\r\n\r\n@Component({\r\n  selector: 'app-field-messages',\r\n  templateUrl: './field-messages.component.html',\r\n  styleUrls: ['./field-messages.component.css'],\r\n})\r\nexport class FieldMessagesComponent implements OnChanges {\r\n  constructor() {}\r\n\r\n  @Input()\r\n  control: AbstractControl;\r\n\r\n  @ViewChild('errorPopup')\r\n  popupComponent?: PoPopupComponent;\r\n\r\n  get hidden(): boolean {\r\n    return this.control.pristine;\r\n  }\r\n\r\n  get errors(): ValidationErrors {\r\n    return this.control.errors ?? {};\r\n  }\r\n\r\n  get errorsCount(): number {\r\n    return Object.keys(this.errors).length;\r\n  }\r\n\r\n  get hasError(): boolean {\r\n    return this.errorsCount === 0;\r\n  }\r\n\r\n  get singleError(): boolean {\r\n    return this.errorsCount === 1;\r\n  }\r\n\r\n  ngOnChanges({ control }: SimpleChanges): void {\r\n    if (control) {\r\n      if (this.hasError && !this.singleError) this.popupComponent?.open();\r\n      else this.popupComponent?.close();\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".error {\r\n  color: #c64840;\r\n}\r\n",
                    "styleUrl": "./field-messages.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "hidden": {
                    "name": "hidden",
                    "getSignature": {
                        "name": "hidden",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 25
                    }
                },
                "errors": {
                    "name": "errors",
                    "getSignature": {
                        "name": "errors",
                        "type": "",
                        "returnType": "ValidationErrors",
                        "line": 29
                    }
                },
                "errorsCount": {
                    "name": "errorsCount",
                    "getSignature": {
                        "name": "errorsCount",
                        "type": "number",
                        "returnType": "number",
                        "line": 33
                    }
                },
                "hasError": {
                    "name": "hasError",
                    "getSignature": {
                        "name": "hasError",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 37
                    }
                },
                "singleError": {
                    "name": "singleError",
                    "getSignature": {
                        "name": "singleError",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 41
                    }
                }
            },
            "templateData": "<ng-template #messagesTemplate>\r\n  <span\r\n    class=\"po-sm-12 po-font-text-small error\"\r\n    *ngIf=\"!hidden && errors.required\"\r\n    i18n=\"Mensagem de erro de campo obrigatório\"\r\n  >\r\n    Campo obrigatório\r\n  </span>\r\n  <span\r\n    class=\"po-sm-12 po-font-text-small error\"\r\n    *ngIf=\"!hidden && errors.cpf\"\r\n    i18n=\"Mensagem de erro de CPF inválido\"\r\n  >\r\n    CPF Inválido\r\n  </span>\r\n  <span\r\n    class=\"po-sm-12 po-font-text-small error\"\r\n    *ngIf=\"!hidden && errors.cpfTaken\"\r\n    i18n=\"Mensagem de erro de CPF já cadastrado\"\r\n  >\r\n    CPF já cadastrado\r\n  </span>\r\n  <span\r\n    class=\"po-sm-12 po-font-text-small error\"\r\n    *ngIf=\"!hidden && errors.emailTaken\"\r\n    i18n=\"Mensagem de erro de E-mail já cadastrado\"\r\n  >\r\n    E-mail já cadastrado\r\n  </span>\r\n  <span\r\n    class=\"po-sm-12 po-font-text-small error\"\r\n    *ngIf=\"!hidden && errors.maxLength\"\r\n    i18n=\"Mensagem de erro de campo com limite de caracteres\"\r\n  >\r\n    Tamanho máximo {errors.maxLength, plural, =1 {caracter} other {caracteres}}\r\n  </span>\r\n  <span\r\n    class=\"po-sm-12 po-font-text-small error\"\r\n    *ngIf=\"!hidden && errors.lookup\"\r\n    i18n=\"Mensagem de erro de busca de registro em campos do tipo Lookup\"\r\n  >\r\n    {{ errors.lookup }}\r\n  </span>\r\n</ng-template>\r\n\r\n<span class=\"po-sm-12 po-font-text-small\" *ngIf=\"hasError; else errorsTemplate\">\r\n  &nbsp;\r\n</span>\r\n\r\n<ng-template #errorsTemplate>\r\n  <div *ngIf=\"singleError; multiErrorsTemplate\">\r\n    <ng-container *ngTemplateOutlet=\"messagesTemplate\"></ng-container>\r\n  </div>\r\n  <ng-template #multiErrorsTemplate>\r\n    <span #multiErrorsRef class=\"po-sm-12 po-font-text-small error\">\r\n      {{ errorsCount }} erros de validação\r\n    </span>\r\n    <po-popup #errorPopup [p-target]=\"multiErrorsRef\">\r\n      <ng-container *ngTemplateOutlet=\"messagesTemplate\"></ng-container>\r\n    </po-popup>\r\n  </ng-template>\r\n</ng-template>\r\n"
        },
        {
            "name": "LoadingIndicatorComponent",
            "id": "component-LoadingIndicatorComponent-2cbb8de81d5858c7877d35752fbe7761",
            "file": "src/app/shared/components/loading-indicator/loading-indicator.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-loading-indicator",
            "styleUrls": [
                "./loading-indicator.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./loading-indicator.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "loading",
                    "defaultValue": "true",
                    "line": 12
                },
                {
                    "name": "text",
                    "defaultValue": "$localize`:Texto padrão \"Processando...\" que aparece no indicador de atividade, que indica que alguma informação está sendo carregada ou processada:Processando...`",
                    "line": 15
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-loading-indicator',\r\n  templateUrl: './loading-indicator.component.html',\r\n  styleUrls: ['./loading-indicator.component.css'],\r\n})\r\nexport class LoadingIndicatorComponent {\r\n  constructor() {}\r\n\r\n  @Input()\r\n  loading = true;\r\n\r\n  @Input()\r\n  text = $localize`:Texto padrão \"Processando...\" que aparece no indicador de atividade, que indica que alguma informação está sendo carregada ou processada:Processando...`;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".loading-indicator {\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column-reverse;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 5px 0;\r\n}\r\n\r\n.loading-indicator-text {\r\n  margin: 10px 0;\r\n}\r\n",
                    "styleUrl": "./loading-indicator.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "templateData": "<div class=\"loading-indicator\" *ngIf=\"loading\">\r\n  <span class=\"loading-indicator-text\">\r\n    {{ text }}\r\n  </span>\r\n  <po-loading-icon></po-loading-icon>\r\n</div>\r\n"
        },
        {
            "name": "ProfessorFormComponent",
            "id": "component-ProfessorFormComponent-6aadfa69f464293647a039d2e7e091cb",
            "file": "src/app/domain/pessoa/professor/professor-form/professor-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-professor-form",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./professor-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cpfNotTaken",
                    "line": 36,
                    "type": "NotTakenService"
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 33
                },
                {
                    "name": "emailNotTaken",
                    "line": 39,
                    "type": "NotTakenService"
                },
                {
                    "name": "professor",
                    "defaultValue": "new Professor()",
                    "line": 30,
                    "type": "Professor"
                }
            ],
            "outputsClass": [
                {
                    "name": "submitForm",
                    "defaultValue": "new EventEmitter<Professor>()",
                    "line": 42,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "formSubscription",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "titulacaoOptions",
                    "defaultValue": "[\r\n    {\r\n      label: $localize`:Rótulo da opção \"PHD\" do campo \"Titulação\" do formulário de professor:PHD`,\r\n      value: Titulacao.PHD,\r\n    },\r\n    {\r\n      label: $localize`:Rótulo da opção \"Doutor\" do campo \"Titulação\" do formulário de professor:Doutor`,\r\n      value: Titulacao.DOUTOR,\r\n    },\r\n    {\r\n      label: $localize`:Rótulo da opção \"Mestre\" do campo \"Titulação\" do formulário de professor:Mestre`,\r\n      value: Titulacao.MESTRE,\r\n    },\r\n  ]",
                    "type": "PoSelectOption[]",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "titulacaoRef",
                    "type": "PoSelectComponent",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'titulacaoRef', {static: true}"
                        }
                    ]
                },
                {
                    "name": "mounted",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "mountSubject",
                    "defaultValue": "new BehaviorSubject(true)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "criarForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81
                },
                {
                    "name": "handleEnterPressed",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94
                },
                {
                    "name": "handleSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "takeWhileMounted",
                    "args": [],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 24,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewChild,\r\n  SimpleChanges,\r\n  OnInit,\r\n  OnChanges,\r\n} from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { BaseComponent } from 'app/shared/base/base.component';\r\nimport { Professor, Titulacao } from '../professor';\r\nimport { PoSelectComponent, PoSelectOption } from '@po-ui/ng-components';\r\nimport { Subscription } from 'rxjs';\r\nimport { NotTakenService } from 'app/shared/validators';\r\n\r\n@Component({\r\n  selector: 'app-professor-form',\r\n  templateUrl: './professor-form.component.html',\r\n})\r\nexport class ProfessorFormComponent\r\n  extends BaseComponent\r\n  implements OnInit, OnChanges {\r\n  constructor(private formBuilder: FormBuilder) {\r\n    super();\r\n  }\r\n\r\n  @Input()\r\n  professor = new Professor();\r\n\r\n  @Input()\r\n  disabled = false;\r\n\r\n  @Input()\r\n  cpfNotTaken: NotTakenService;\r\n\r\n  @Input()\r\n  emailNotTaken: NotTakenService;\r\n\r\n  @Output()\r\n  submitForm = new EventEmitter<Professor>();\r\n\r\n  @ViewChild('titulacaoRef', { static: true })\r\n  titulacaoRef: PoSelectComponent;\r\n\r\n  formSubscription: Subscription;\r\n\r\n  form: FormGroup;\r\n\r\n  titulacaoOptions: PoSelectOption[] = [\r\n    {\r\n      label: $localize`:Rótulo da opção \"PHD\" do campo \"Titulação\" do formulário de professor:PHD`,\r\n      value: Titulacao.PHD,\r\n    },\r\n    {\r\n      label: $localize`:Rótulo da opção \"Doutor\" do campo \"Titulação\" do formulário de professor:Doutor`,\r\n      value: Titulacao.DOUTOR,\r\n    },\r\n    {\r\n      label: $localize`:Rótulo da opção \"Mestre\" do campo \"Titulação\" do formulário de professor:Mestre`,\r\n      value: Titulacao.MESTRE,\r\n    },\r\n  ];\r\n\r\n  get canSubmit(): boolean {\r\n    return (\r\n      this.form && this.form.valid && this.form.dirty && !this.form.pending\r\n    );\r\n  }\r\n\r\n  ngOnChanges({ professor }: SimpleChanges): void {\r\n    if (professor) this.criarForm();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    super.ngOnInit();\r\n    this.criarForm();\r\n  }\r\n\r\n  criarForm(): void {\r\n    this.formSubscription?.unsubscribe();\r\n    this.form = this.professor.criarForm(\r\n      this.formBuilder,\r\n      this.emailNotTaken,\r\n      this.cpfNotTaken\r\n    );\r\n    this.formSubscription = this.professor.subscribeFormChanges(\r\n      this.form,\r\n      this.takeWhileMounted()\r\n    );\r\n  }\r\n\r\n  handleEnterPressed(): void {\r\n    if (this.titulacaoRef.open) this.titulacaoRef.toggleButton();\r\n    this.handleSubmit();\r\n  }\r\n\r\n  handleSubmit(): void {\r\n    if (this.canSubmit) this.submitForm.emit(this.professor);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "accessors": {
                "canSubmit": {
                    "name": "canSubmit",
                    "getSignature": {
                        "name": "canSubmit",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 66
                    }
                }
            },
            "templateData": "<form class=\"po-row\" [formGroup]=\"form\" (submit)=\"handleSubmit()\">\r\n  <div class=\"po-md-6 po-sm-12\">\r\n    <po-input\r\n      class=\"po-12\"\r\n      p-icon=\"po-icon po-icon-user\"\r\n      i18n-p-label=\"Rótulo do campo 'Nome' do formulário de professor\"\r\n      i18n-aria-label=\"\r\n        Acessibilidade: rótulo do campo 'Nome' do formulário de professor\r\n      \"\r\n      p-label=\"Nome\"\r\n      name=\"nome\"\r\n      [p-disabled]=\"disabled\"\r\n      formControlName=\"nome\"\r\n      aria-label=\"Campo nome\"\r\n      p-required\r\n    ></po-input>\r\n    <app-field-messages [control]=\"form.get('nome')\"></app-field-messages>\r\n  </div>\r\n  <div class=\"po-md-6 po-sm-12\">\r\n    <po-email\r\n      class=\"po-12\"\r\n      i18n-p-label=\"Rótulo do campo 'E-mail' do formulário de professor\"\r\n      i18n-aria-label=\"\r\n        Acessibilidade: rótulo do campo 'E-mail' do formulário de professor\r\n      \"\r\n      p-label=\"E-mail\"\r\n      name=\"email\"\r\n      [p-disabled]=\"disabled\"\r\n      formControlName=\"email\"\r\n      aria-label=\"Campo E-mail\"\r\n      p-required\r\n    ></po-email>\r\n    <app-field-messages [control]=\"form.get('email')\"></app-field-messages>\r\n  </div>\r\n  <div class=\"po-md-6 po-sm-12\">\r\n    <po-input\r\n      class=\"po-12\"\r\n      i18n-p-label=\"Rótulo do campo 'CPF' do formulário de professor\"\r\n      i18n-aria-label=\"\r\n        Acessibilidade: rótulo do campo 'CPF' do formulário de professor\r\n      \"\r\n      p-label=\"CPF\"\r\n      name=\"cpf\"\r\n      [p-disabled]=\"disabled\"\r\n      formControlName=\"cpf\"\r\n      aria-label=\"Campo CPF\"\r\n      p-mask=\"999.999.999-99\"\r\n      (keyup.enter)=\"handleSubmit()\"\r\n      p-required\r\n    ></po-input>\r\n    <app-field-messages [control]=\"form.get('cpf')\"></app-field-messages>\r\n  </div>\r\n  <div class=\"po-md-6 po-sm-12\">\r\n    <po-select\r\n      #titulacaoRef\r\n      class=\"po-12\"\r\n      i18n-p-label=\"Rótulo do campo 'Titulação' do formulário de professor\"\r\n      i18n-aria-label=\"\r\n        Acessibilidade: rótulo do campo 'Titulação' do formulário de professor\r\n      \"\r\n      p-label=\"Titulação\"\r\n      name=\"titulacao\"\r\n      [p-disabled]=\"disabled\"\r\n      formControlName=\"titulacao\"\r\n      aria-label=\"Campo forma de ingresso\"\r\n      (keyup.enter)=\"handleEnterPressed()\"\r\n      [p-options]=\"titulacaoOptions\"\r\n      p-required\r\n    ></po-select>\r\n    <app-field-messages [control]=\"form.get('titulacao')\"></app-field-messages>\r\n  </div>\r\n  <button hidden type=\"submit\"></button>\r\n</form>\r\n"
        },
        {
            "name": "ProfessorFormRouteComponent",
            "id": "component-ProfessorFormRouteComponent-5605942eb5974d8f8bbdab07a059424c",
            "file": "src/app/domain/pessoa/professor/routes/professor-form-route/professor-form-route.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-professor-form-route",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./professor-form-route.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formRef",
                    "type": "ProfessorFormComponent",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'formRef', {static: true}"
                        }
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "modalRef",
                    "type": "PoModalComponent",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "PoModalComponent, {static: true}"
                        }
                    ]
                },
                {
                    "name": "podeCancelar",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "processando",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "professor",
                    "defaultValue": "new Professor()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "mounted",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "mountSubject",
                    "defaultValue": "new BehaviorSubject(true)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "cancelar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111
                },
                {
                    "name": "cpfNotTaken",
                    "args": [
                        {
                            "name": "cpf",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 97,
                    "jsdoctags": [
                        {
                            "name": "cpf",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emailNotTaken",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 104,
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68
                },
                {
                    "name": "retornar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "salvar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "takeWhileMounted",
                    "args": [],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 24,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ViewChild, OnInit, OnDestroy } from '@angular/core';\r\nimport {\r\n  PoModalComponent,\r\n  PoNotificationService,\r\n  PoModalAction,\r\n} from '@po-ui/ng-components';\r\nimport { BaseComponent } from 'app/shared/base/base.component';\r\nimport { ProfessorService } from '../../professor.service';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { ProfessorFormComponent } from '../../professor-form/professor-form.component';\r\nimport { Professor } from '../../professor';\r\nimport { filter, map, tap, switchMap } from 'rxjs/operators';\r\nimport { Observable } from 'rxjs';\r\n\r\ninterface Actions {\r\n  salvar: PoModalAction;\r\n  cancelar: PoModalAction;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-professor-form-route',\r\n  templateUrl: './professor-form-route.component.html',\r\n})\r\nexport class ProfessorFormRouteComponent\r\n  extends BaseComponent\r\n  implements OnInit, OnDestroy {\r\n  constructor(\r\n    private professorService: ProfessorService,\r\n    private notificationService: PoNotificationService,\r\n    private router: Router,\r\n    private activatedRoute: ActivatedRoute\r\n  ) {\r\n    super();\r\n    this.cpfNotTaken = this.cpfNotTaken.bind(this);\r\n    this.emailNotTaken = this.emailNotTaken.bind(this);\r\n  }\r\n\r\n  @ViewChild(PoModalComponent, { static: true })\r\n  modalRef: PoModalComponent;\r\n\r\n  @ViewChild('formRef', { static: true })\r\n  formRef: ProfessorFormComponent;\r\n\r\n  get actions(): Actions {\r\n    return {\r\n      salvar: {\r\n        label: $localize`:Texto do botão \"Salvar\" da modal (janela) de formulário de professor:Salvar`,\r\n        action: () => this.salvar(),\r\n        loading: this.loading || this.processando,\r\n        disabled: !this.formRef.canSubmit,\r\n      },\r\n      cancelar: {\r\n        label: $localize`:Texto do botão \"Cancelar\" da modal (janela) de formulário de professor:Cancelar`,\r\n        action: () => this.cancelar(),\r\n        disabled: !this.podeCancelar,\r\n      },\r\n    };\r\n  }\r\n\r\n  processando = false;\r\n\r\n  professor = new Professor();\r\n\r\n  podeCancelar = true;\r\n\r\n  loading = false;\r\n\r\n  ngOnInit(): void {\r\n    super.ngOnInit();\r\n    this.activatedRoute.data\r\n      .pipe(\r\n        this.takeWhileMounted(),\r\n        filter((data) => data.loadFromParam),\r\n        map((data) => data.loadFromParam),\r\n        tap(() => (this.loading = true)),\r\n        switchMap((param) =>\r\n          this.activatedRoute.params.pipe(\r\n            filter((params) => params[param]),\r\n            map((params) => params[param])\r\n          )\r\n        ),\r\n        switchMap((id) => this.professorService.recuperarPorId(id))\r\n      )\r\n      .subscribe((professor) => {\r\n        this.loading = false;\r\n        this.professor = professor;\r\n      });\r\n\r\n    this.modalRef.open();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    super.ngOnDestroy();\r\n    this.modalRef.close();\r\n  }\r\n\r\n  cpfNotTaken(cpf: string): Observable<boolean> {\r\n    return this.professorService.cpfNotTaken({\r\n      cpf: cpf?.replace(/(\\.|\\-)/g, ''),\r\n      id: this.professor.id ?? '',\r\n    });\r\n  }\r\n\r\n  emailNotTaken(email: string): Observable<boolean> {\r\n    return this.professorService.emailNotTaken({\r\n      email,\r\n      id: this.professor.id ?? '',\r\n    });\r\n  }\r\n\r\n  cancelar(): void {\r\n    this.retornar();\r\n  }\r\n\r\n  salvar(): void {\r\n    this.processando = true;\r\n    this.podeCancelar = false;\r\n    this.professorService\r\n      .salvar(this.professor)\r\n      .pipe(this.takeWhileMounted())\r\n      .subscribe(\r\n        () => {\r\n          this.notificationService.success(this.mensagemSucesso);\r\n          this.retornar();\r\n        },\r\n        (error) => {\r\n          this.processando = false;\r\n          this.podeCancelar = true;\r\n          console.error(error);\r\n        }\r\n      );\r\n  }\r\n\r\n  private retornar(): void {\r\n    this.router.navigate(this.urlRetorno);\r\n  }\r\n\r\n  private get urlRetorno(): string[] {\r\n    return this.activatedRoute.snapshot.data.urlRetorno(this.activatedRoute);\r\n  }\r\n\r\n  private get mensagemSucesso(): string {\r\n    return this.activatedRoute.snapshot.data.mensagemSucesso();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "professorService",
                        "type": "ProfessorService"
                    },
                    {
                        "name": "notificationService",
                        "type": "PoNotificationService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "professorService",
                        "type": "ProfessorService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "PoNotificationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "actions": {
                    "name": "actions",
                    "getSignature": {
                        "name": "actions",
                        "type": "",
                        "returnType": "Actions",
                        "line": 44
                    }
                },
                "urlRetorno": {
                    "name": "urlRetorno",
                    "getSignature": {
                        "name": "urlRetorno",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 138
                    }
                },
                "mensagemSucesso": {
                    "name": "mensagemSucesso",
                    "getSignature": {
                        "name": "mensagemSucesso",
                        "type": "string",
                        "returnType": "string",
                        "line": 142
                    }
                }
            },
            "templateData": "<po-modal\r\n  #modelRef\r\n  [p-click-out]=\"false\"\r\n  [p-hide-close]=\"true\"\r\n  [p-primary-action]=\"actions.salvar\"\r\n  [p-secondary-action]=\"actions.cancelar\"\r\n  p-size=\"auto\"\r\n  p-title=\"Formulário de professor\"\r\n  i18n-p-title=\"\r\n    Título do formulário de cadastro ou edição dos dados de um professor\r\n  \"\r\n>\r\n  <app-professor-form\r\n    #formRef\r\n    [professor]=\"professor\"\r\n    [disabled]=\"loading || processando\"\r\n    [cpfNotTaken]=\"cpfNotTaken\"\r\n    [emailNotTaken]=\"emailNotTaken\"\r\n    (submitForm)=\"salvar()\"\r\n  ></app-professor-form>\r\n  <app-loading-indicator\r\n    [loading]=\"loading\"\r\n    i18n-text=\"\r\n      Texto 'Carregando...' que aparece na janela de formulário de professor\r\n      quando os dados de um professor existente estão sendo carregados\r\n    \"\r\n    text=\"Carregando...\"\r\n  ></app-loading-indicator>\r\n</po-modal>\r\n"
        },
        {
            "name": "ProfessorListComponent",
            "id": "component-ProfessorListComponent-58aeb5d10b2b2d79b77304d6ef3b3e7a",
            "file": "src/app/domain/pessoa/professor/professor-list/professor-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-professor-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./professor-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "carregando",
                    "defaultValue": "false",
                    "line": 38
                },
                {
                    "name": "ordenar",
                    "line": 41,
                    "type": "Sort<ProfessorSortFields>"
                },
                {
                    "name": "podeCarregarMais",
                    "defaultValue": "false",
                    "line": 35
                },
                {
                    "name": "professores",
                    "defaultValue": "[]",
                    "line": 32,
                    "type": "Professor[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "carregarMais",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 44,
                    "type": "EventEmitter"
                },
                {
                    "name": "editar",
                    "defaultValue": "new EventEmitter<Professor>()",
                    "line": 50,
                    "type": "EventEmitter"
                },
                {
                    "name": "ordenarChange",
                    "defaultValue": "new EventEmitter<Sort<ProfessorSortFields>>()",
                    "line": 47,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "actions",
                    "defaultValue": "[\r\n    {\r\n      label: $localize`:Texto do botão \"Editar\" na tabela de professores:Editar`,\r\n      action: (item: Professor) => this.editar.emit(item),\r\n      icon: 'po-icon-edit',\r\n    },\r\n  ]",
                    "type": "PoTableAction[]",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "carregandoMais",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "columns",
                    "defaultValue": "[\r\n    {\r\n      property: 'nome',\r\n      label: $localize`:Cabeçalho da coluna \"Nome\" da tabela de professores:Nome`,\r\n    },\r\n    {\r\n      property: 'email',\r\n      label: $localize`:Cabeçalho da coluna \"E-mail\" da tabela de professores:E-mail`,\r\n    },\r\n    {\r\n      property: 'cpfFormatado',\r\n      label: $localize`:Cabeçalho da coluna \"CPF\" da tabela de professores:CPF`,\r\n      width: '140px',\r\n    },\r\n    {\r\n      property: 'titulacao',\r\n      type: 'label',\r\n      label: $localize`:Cabeçalho da coluna \"Titulação\" da tabela de professores:Titulação`,\r\n      width: '140px',\r\n      labels: [\r\n        {\r\n          value: Titulacao.PHD,\r\n          color: 'color-05',\r\n          label: $localize`:Valor \"PHD\" da coluna \"Titulação\" da tabela de professores:PHD`,\r\n        },\r\n        {\r\n          value: Titulacao.DOUTOR,\r\n          color: 'color-10',\r\n          label: $localize`:Valor \"Doutor\" da coluna \"Titulação\" da tabela de professores:Doutor`,\r\n        },\r\n        {\r\n          value: Titulacao.MESTRE,\r\n          color: 'color-01',\r\n          label: $localize`:Valor \"Mestre\" da coluna \"Titulação\" da tabela de professores:Mestre`,\r\n        },\r\n      ],\r\n    },\r\n  ]",
                    "type": "PoTableColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "literals",
                    "defaultValue": "CustomLiterals.forTable()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "poTable",
                    "type": "PoTableComponent",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'tableRef', {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handleCarregarMais",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103
                },
                {
                    "name": "onOrdenar",
                    "args": [
                        {
                            "name": "change",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "jsdoctags": [
                        {
                            "name": "change",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  OnInit,\r\n  ViewChild,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  SimpleChanges,\r\n  OnChanges,\r\n} from '@angular/core';\r\nimport {\r\n  PoTableComponent,\r\n  PoTableAction,\r\n  PoTableColumn,\r\n  PoTableColumnSortType,\r\n} from '@po-ui/ng-components';\r\nimport { Professor, ProfessorSortFields, Titulacao } from '../professor';\r\nimport { Sort } from 'app/shared/util/service.util';\r\nimport { CustomLiterals } from 'app/shared/literals';\r\n\r\n@Component({\r\n  selector: 'app-professor-list',\r\n  templateUrl: './professor-list.component.html',\r\n})\r\nexport class ProfessorListComponent implements OnInit, OnChanges {\r\n  constructor() {}\r\n\r\n  @ViewChild('tableRef', { static: true })\r\n  poTable: PoTableComponent;\r\n\r\n  @Input()\r\n  professores: Professor[] = [];\r\n\r\n  @Input()\r\n  podeCarregarMais = false;\r\n\r\n  @Input()\r\n  carregando = false;\r\n\r\n  @Input()\r\n  ordenar: Sort<ProfessorSortFields>;\r\n\r\n  @Output()\r\n  carregarMais = new EventEmitter<void>();\r\n\r\n  @Output()\r\n  ordenarChange = new EventEmitter<Sort<ProfessorSortFields>>();\r\n\r\n  @Output()\r\n  editar = new EventEmitter<Professor>();\r\n\r\n  carregandoMais = false;\r\n\r\n  literals = CustomLiterals.forTable();\r\n\r\n  actions: PoTableAction[] = [\r\n    {\r\n      label: $localize`:Texto do botão \"Editar\" na tabela de professores:Editar`,\r\n      action: (item: Professor) => this.editar.emit(item),\r\n      icon: 'po-icon-edit',\r\n    },\r\n  ];\r\n\r\n  columns: PoTableColumn[] = [\r\n    {\r\n      property: 'nome',\r\n      label: $localize`:Cabeçalho da coluna \"Nome\" da tabela de professores:Nome`,\r\n    },\r\n    {\r\n      property: 'email',\r\n      label: $localize`:Cabeçalho da coluna \"E-mail\" da tabela de professores:E-mail`,\r\n    },\r\n    {\r\n      property: 'cpfFormatado',\r\n      label: $localize`:Cabeçalho da coluna \"CPF\" da tabela de professores:CPF`,\r\n      width: '140px',\r\n    },\r\n    {\r\n      property: 'titulacao',\r\n      type: 'label',\r\n      label: $localize`:Cabeçalho da coluna \"Titulação\" da tabela de professores:Titulação`,\r\n      width: '140px',\r\n      labels: [\r\n        {\r\n          value: Titulacao.PHD,\r\n          color: 'color-05',\r\n          label: $localize`:Valor \"PHD\" da coluna \"Titulação\" da tabela de professores:PHD`,\r\n        },\r\n        {\r\n          value: Titulacao.DOUTOR,\r\n          color: 'color-10',\r\n          label: $localize`:Valor \"Doutor\" da coluna \"Titulação\" da tabela de professores:Doutor`,\r\n        },\r\n        {\r\n          value: Titulacao.MESTRE,\r\n          color: 'color-01',\r\n          label: $localize`:Valor \"Mestre\" da coluna \"Titulação\" da tabela de professores:Mestre`,\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  ngOnInit(): void {\r\n    if (this.ordenar)\r\n      this.poTable.sortedColumn = {\r\n        property: this.columns.find(\r\n          (column) => column.property === this.ordenar.field\r\n        ),\r\n        ascending: this.ordenar.ascending,\r\n      };\r\n  }\r\n\r\n  onOrdenar(change: {\r\n    column: PoTableColumn;\r\n    type: PoTableColumnSortType;\r\n  }): void {\r\n    this.ordenarChange.emit(\r\n      Sort.fromOrderChange<ProfessorSortFields>(change, { cpfFormatado: 'cpf' })\r\n    );\r\n  }\r\n\r\n  ngOnChanges({ professores }: SimpleChanges): void {\r\n    if (professores && this.carregandoMais) this.carregandoMais = false;\r\n  }\r\n\r\n  handleCarregarMais(): void {\r\n    if (this.podeCarregarMais) {\r\n      this.carregandoMais = true;\r\n      this.carregarMais.emit();\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 25
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<po-table\r\n  #tableRef\r\n  [p-actions]=\"actions\"\r\n  [p-columns]=\"columns\"\r\n  [p-items]=\"professores\"\r\n  [p-literals]=\"literals\"\r\n  [p-loading]=\"carregando && !carregandoMais\"\r\n  [p-loading-show-more]=\"carregando && carregandoMais\"\r\n  [p-show-more-disabled]=\"!podeCarregarMais\"\r\n  [p-sort]=\"true\"\r\n  (p-sort-by)=\"onOrdenar($event)\"\r\n  (p-show-more)=\"handleCarregarMais()\"\r\n  p-striped=\"true\"\r\n  p-hide-text-overflow\r\n></po-table>\r\n"
        },
        {
            "name": "ProfessorListRouteComponent",
            "id": "component-ProfessorListRouteComponent-ff0ffa07eb9fff18bdf3971bbc764de9",
            "file": "src/app/domain/pessoa/professor/routes/professor-list-route/professor-list-route.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-professor-list-route",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./professor-list-route.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "acoes",
                    "defaultValue": "[\r\n    {\r\n      icon: 'po-icon po-icon-plus',\r\n      label: $localize`:Texto do botão \"Novo professor\" para cadastrar um novo professor, presente na página \"Professores cadastrados\":Novo professor`,\r\n      action: () =>\r\n        this.router.navigate(['new'], { relativeTo: this.activatedRoute }),\r\n    },\r\n  ]",
                    "type": "PoPageAction[]",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "filtro",
                    "defaultValue": "{\r\n    placeholder: $localize`:Placeholder do campo de busca da página \"Professores cadastrados\":Buscar professores`,\r\n    action: (query: string) => this.handleFilterChange(query),\r\n  }",
                    "type": "PoPageFilter",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "pageState$",
                    "type": "Observable<PageState<Professor, ProfessorSortFields>>",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "pageStateSubject",
                    "type": "PageStateSubject<Professor | ProfessorSortFields>",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "mounted",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "mountSubject",
                    "defaultValue": "new BehaviorSubject(true)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "handleCarregarMais",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82
                },
                {
                    "name": "handleEditarClick",
                    "args": [
                        {
                            "name": "item",
                            "type": "Professor"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Professor",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleFilterChange",
                    "args": [
                        {
                            "name": "query",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleOrdenacaoChange",
                    "args": [
                        {
                            "name": "sort",
                            "type": "Sort<ProfessorSortFields>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "jsdoctags": [
                        {
                            "name": "sort",
                            "type": "Sort<ProfessorSortFields>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "takeWhileMounted",
                    "args": [],
                    "optional": false,
                    "returnType": "MonoTypeOperatorFunction<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 24,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport {\r\n  Professor,\r\n  ProfessorSortFields,\r\n  ProfessorEvent,\r\n} from '../../professor';\r\nimport { BaseComponent } from 'app/shared/base/base.component';\r\nimport { ProfessorService } from '../../professor.service';\r\nimport { EventService } from 'app/shared/event/event.service';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport {\r\n  PageStateSubject,\r\n  PageState,\r\n  Sort,\r\n} from 'app/shared/util/service.util';\r\nimport { PoPageFilter, PoPageAction } from '@po-ui/ng-components';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-professor-list-route',\r\n  templateUrl: './professor-list-route.component.html',\r\n})\r\nexport class ProfessorListRouteComponent\r\n  extends BaseComponent\r\n  implements OnInit {\r\n  constructor(\r\n    private professorService: ProfessorService,\r\n    private eventService: EventService,\r\n    private router: Router,\r\n    private activatedRoute: ActivatedRoute\r\n  ) {\r\n    super();\r\n    this.pageStateSubject = new PageStateSubject(\r\n      (pageable, query, sort) =>\r\n        this.professorService.filtrar(pageable, query, sort),\r\n      () => this.takeWhileMounted()\r\n    );\r\n    this.pageState$ = this.pageStateSubject.asObservable();\r\n  }\r\n\r\n  filtro: PoPageFilter = {\r\n    placeholder: $localize`:Placeholder do campo de busca da página \"Professores cadastrados\":Buscar professores`,\r\n    action: (query: string) => this.handleFilterChange(query),\r\n  };\r\n\r\n  acoes: PoPageAction[] = [\r\n    {\r\n      icon: 'po-icon po-icon-plus',\r\n      label: $localize`:Texto do botão \"Novo professor\" para cadastrar um novo professor, presente na página \"Professores cadastrados\":Novo professor`,\r\n      action: () =>\r\n        this.router.navigate(['new'], { relativeTo: this.activatedRoute }),\r\n    },\r\n  ];\r\n\r\n  pageState$: Observable<PageState<Professor, ProfessorSortFields>>;\r\n\r\n  private pageStateSubject: PageStateSubject<Professor, ProfessorSortFields>;\r\n\r\n  ngOnInit(): void {\r\n    super.ngOnInit();\r\n    this.pageStateSubject.load();\r\n    this.eventService.bus$\r\n      .pipe(\r\n        this.takeWhileMounted(),\r\n        filter((e) => e instanceof ProfessorEvent),\r\n        map((e) => e as ProfessorEvent)\r\n      )\r\n      .subscribe(() => this.pageStateSubject.load(true));\r\n  }\r\n\r\n  handleEditarClick(item: Professor): void {\r\n    this.router.navigate([item.id, 'edit'], {\r\n      relativeTo: this.activatedRoute,\r\n    });\r\n  }\r\n\r\n  handleOrdenacaoChange(sort: Sort<ProfessorSortFields>): void {\r\n    this.pageStateSubject.setSort(sort);\r\n  }\r\n\r\n  handleCarregarMais(): void {\r\n    this.pageStateSubject.nextPage();\r\n  }\r\n\r\n  handleFilterChange(query: string): void {\r\n    this.pageStateSubject.setFilter(query);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "professorService",
                        "type": "ProfessorService"
                    },
                    {
                        "name": "eventService",
                        "type": "EventService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "professorService",
                        "type": "ProfessorService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventService",
                        "type": "EventService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<po-page-list\r\n  *ngIf=\"pageState$ | async as pageState\"\r\n  p-title=\"Professores cadastrados\"\r\n  i18n-p-title=\"Título da página 'Professores cadastrados'\"\r\n  [p-filter]=\"filtro\"\r\n  [p-actions]=\"acoes\"\r\n>\r\n  <app-professor-list\r\n    [professores]=\"pageState.items\"\r\n    [podeCarregarMais]=\"pageState.hasNext\"\r\n    [carregando]=\"pageState.loading\"\r\n    [(ordenar)]=\"pageState.sort\"\r\n    (ordenarChange)=\"handleOrdenacaoChange($event)\"\r\n    (carregarMais)=\"handleCarregarMais()\"\r\n    (editar)=\"handleEditarClick($event)\"\r\n  ></app-professor-list>\r\n</po-page-list>\r\n<router-outlet></router-outlet>\r\n"
        },
        {
            "name": "TurmaComponent",
            "id": "component-TurmaComponent-446c3cd4b54db5fb3d79e22cb7ef08a4",
            "file": "src/app/domain/turma/turma.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-turma",
            "styleUrls": [
                "./turma.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./turma.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-turma',\n  templateUrl: './turma.component.html',\n  styleUrls: ['./turma.component.css']\n})\nexport class TurmaComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./turma.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>\n  turma works!\n</p>\n"
        }
    ],
    "modules": [
        {
            "name": "AlunoDetailModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AlunoDetailComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AlunoDetailComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AlunoFormModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AlunoFormComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FieldMessagesModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AlunoFormComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AlunoFormRouteModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AlunoFormRouteComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AlunoFormModule"
                        },
                        {
                            "name": "AlunoModule"
                        },
                        {
                            "name": "LoadingIndicatorModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AlunoListModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AlunoListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AlunoListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AlunoListRouteModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AlunoListRouteComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AlunoListModule"
                        },
                        {
                            "name": "AlunoModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AlunoModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AlunoService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppBackendModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AlunoRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AlunoFormRouteModule"
                        },
                        {
                            "name": "AlunoListRouteModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppBackendModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppBackendModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppBackendModule"
                        },
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ProfessorListModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DisciplinaFormModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DisciplinaFormComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FieldContainerModule"
                        },
                        {
                            "name": "FieldMessagesModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DisciplinaFormComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DisciplinaFormRouteModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DisciplinaFormRouteComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DisciplinaFormModule"
                        },
                        {
                            "name": "DisciplinaModule"
                        },
                        {
                            "name": "LoadingIndicatorModule"
                        },
                        {
                            "name": "ProfessorModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DisciplinaListModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DisciplinaListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DisciplinaListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DisciplinaListRouteModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DisciplinaListRouteComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DisciplinaListModule"
                        },
                        {
                            "name": "DisciplinaModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DisciplinaModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "DisciplinaService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppBackendModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DisciplinaRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DisciplinaFormRouteModule"
                        },
                        {
                            "name": "DisciplinaListRouteModule"
                        },
                        {
                            "name": "ProfessorFormRouteModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FieldContainerModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FieldContainerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FieldContainerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FieldMessagesModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FieldMessagesComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FieldMessagesComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LoadingIndicatorModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LoadingIndicatorComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LoadingIndicatorComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProfessorFormModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ProfessorFormComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FieldMessagesModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ProfessorFormComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProfessorFormRouteModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ProfessorFormRouteComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LoadingIndicatorModule"
                        },
                        {
                            "name": "ProfessorFormModule"
                        },
                        {
                            "name": "ProfessorModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProfessorListModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ProfessorListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ProfessorListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProfessorListRouteModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ProfessorListRouteComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ProfessorListModule"
                        },
                        {
                            "name": "ProfessorModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProfessorModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ProfessorService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppBackendModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProfessorRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ProfessorFormRouteModule"
                        },
                        {
                            "name": "ProfessorListRouteModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TurmaModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TurmaComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "alunosMock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/domain/pessoa/aluno/aluno.mock.ts",
                "type": "[]",
                "defaultValue": "[...data]"
            },
            {
                "name": "api",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/endpoints.ts",
                "type": "string",
                "defaultValue": "'api'"
            },
            {
                "name": "backend",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/main-dev.ts",
                "type": "",
                "defaultValue": "require.context('./backend/', true, /\\.data\\.ts$/)"
            },
            {
                "name": "backend",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./backend/', true, /\\.data\\.ts$/)"
            },
            {
                "name": "backendConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/backend/config.ts",
                "type": "BackendConfigArgs",
                "defaultValue": "{\r\n  strategyId: 'uuid',\r\n  host: `${schema}://${host}:${port}`,\r\n  apiBase: '',\r\n  passThruUnknownUrl: true,\r\n}"
            },
            {
                "name": "collectionName",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/backend/domain/disciplina/disciplina.data.ts",
                "type": "string",
                "defaultValue": "'disciplina'"
            },
            {
                "name": "collectionName",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/backend/domain/pessoa/aluno/aluno.data.ts",
                "type": "string",
                "defaultValue": "'aluno'"
            },
            {
                "name": "collectionName",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/backend/domain/pessoa/professor/professor.data.ts",
                "type": "string",
                "defaultValue": "'professor'"
            },
            {
                "name": "core",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/endpoints.ts",
                "type": "string",
                "defaultValue": "'core'"
            },
            {
                "name": "DEFAULT_NOT_TAKEN_SERVICE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/domain/pessoa/pessoa.ts",
                "type": "NotTakenService",
                "defaultValue": "() => of(true)"
            },
            {
                "name": "disciplinas",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/backend/domain/disciplina/disciplina.data.ts",
                "type": "[]",
                "defaultValue": "[...json]"
            },
            {
                "name": "endpoints",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/endpoints.ts",
                "type": "object",
                "defaultValue": "{\r\n  core: {\r\n    v1: {\r\n      alunos: new Endpoint(`/${api}/${core}/${v1}/alunos`),\r\n      professores: new Endpoint(`/${api}/${core}/${v1}/professores`),\r\n      disciplinas: new Endpoint(`/${api}/${core}/${v1}/disciplinas`),\r\n    },\r\n  },\r\n  query: {\r\n    v1: {\r\n      alunos: new Endpoint(`/${api}/${query}/${v1}/alunos`),\r\n      professores: new Endpoint(`/${api}/${query}/${v1}/professores`),\r\n      disciplinas: new Endpoint(`/${api}/${query}/${v1}/disciplinas`),\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  delaySimulado: [400, 2500],\r\n  backend: {\r\n    schema: 'http',\r\n    host: 'localhost',\r\n    port: 4201,\r\n  },\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: true,\r\n  delaySimulado: null,\r\n}"
            },
            {
                "name": "injectionToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/domain/pessoa/aluno/aluno.mock.ts",
                "type": "",
                "defaultValue": "new InjectionToken<AlunosMock>('app.mocks.aluno')"
            },
            {
                "name": "New",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/domain/disciplina/disciplina-form/disciplina-form.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: DisciplinaFormComponent,\r\n})"
            },
            {
                "name": "professoresMock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/domain/pessoa/professor/professor.mock.ts",
                "type": "[]",
                "defaultValue": "[...data]"
            },
            {
                "name": "query",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/endpoints.ts",
                "type": "string",
                "defaultValue": "'query'"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/main-dev.ts",
                "type": "any"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/backend/config.ts",
                "type": "",
                "defaultValue": "environment.backend"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/endpoints.ts",
                "type": "",
                "defaultValue": "environment.backend"
            },
            {
                "name": "v1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/endpoints.ts",
                "type": "string",
                "defaultValue": "'v1'"
            }
        ],
        "functions": [
            {
                "name": "clearData",
                "file": "src/backend/domain/disciplina/disciplina.data.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [],
                "returnType": "Promise<void>"
            },
            {
                "name": "clearData",
                "file": "src/backend/domain/pessoa/professor/professor.data.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [],
                "returnType": "Promise<void>"
            },
            {
                "name": "createNotTakenInterceptor",
                "file": "src/backend/interceptors.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "collectionName"
                    },
                    {
                        "name": "endpoint"
                    },
                    {
                        "name": "field"
                    }
                ],
                "returnType": "IRequestInterceptor",
                "jsdoctags": [
                    {
                        "name": "collectionName",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "endpoint",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "field",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createSearchRequestInterceptor",
                "file": "src/backend/interceptors.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "collectionName"
                    },
                    {
                        "name": "path"
                    },
                    {
                        "name": "filterPredicate"
                    },
                    {
                        "name": "transformer"
                    },
                    {
                        "name": "extractors"
                    }
                ],
                "returnType": "IRequestInterceptor",
                "jsdoctags": [
                    {
                        "name": "collectionName",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "path",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "filterPredicate",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "transformer",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "extractors",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "filtrar",
                "file": "src/app/shared/util/service.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "values"
                    },
                    {
                        "name": "page"
                    },
                    {
                        "name": "sort"
                    },
                    {
                        "name": "predicate"
                    },
                    {
                        "name": "deserializer"
                    }
                ],
                "returnType": "Page<R>",
                "jsdoctags": [
                    {
                        "name": "values",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "page",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sort",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "predicate",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "deserializer",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getAll",
                "file": "src/backend/domain/disciplina/disciplina.data.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [],
                "returnType": "Promise<DisciplinaJson[]>"
            },
            {
                "name": "getAll",
                "file": "src/backend/domain/pessoa/aluno/aluno.data.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [],
                "returnType": "Promise<AlunoJson[]>"
            },
            {
                "name": "insertInitialData",
                "file": "src/backend/domain/disciplina/disciplina.data.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": ""
                    }
                ],
                "returnType": "Promise<DisciplinaJson[]>",
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "insertInitialData",
                "file": "src/backend/domain/pessoa/aluno/aluno.data.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": ""
                    }
                ],
                "returnType": "Promise<AlunoJson[]>",
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "insertInitialData",
                "file": "src/backend/domain/pessoa/professor/professor.data.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": ""
                    }
                ],
                "returnType": "Promise<ProfessorJson[]>",
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "joinToOne",
                "file": "src/backend/interceptors.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "collectionName"
                    },
                    {
                        "name": "joinField"
                    },
                    {
                        "name": "joinTarget"
                    }
                ],
                "returnType": "FilterTransformer<T>",
                "jsdoctags": [
                    {
                        "name": "collectionName",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "joinField",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "joinTarget",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "parseQueryString",
                "file": "src/backend/interceptors.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "url"
                    }
                ],
                "returnType": "Map<string, string[]>",
                "jsdoctags": [
                    {
                        "name": "url",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "searchOneOf",
                "file": "src/app/shared/util/service.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "filter",
                        "type": "string"
                    },
                    {
                        "name": "values"
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "filter",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "values",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "searchString",
                "file": "src/app/shared/util/service.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "value",
                        "optional": true
                    },
                    {
                        "name": "filter",
                        "type": "string"
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "value",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "filter",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "setup",
                "file": "src/backend/domain/disciplina/disciplina.data.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": ""
                    }
                ],
                "returnType": "void",
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "setup",
                "file": "src/backend/domain/pessoa/aluno/aluno.data.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": ""
                    }
                ],
                "returnType": "void",
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "setup",
                "file": "src/backend/domain/pessoa/professor/professor.data.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "type": ""
                    }
                ],
                "returnType": "void",
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "simularDelay",
                "file": "src/app/shared/util/service.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "result"
                    }
                ],
                "returnType": "Observable<T>",
                "jsdoctags": [
                    {
                        "name": "result",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "tryMapToUniqueResult",
                "file": "src/app/shared/util/service.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "errors"
                    },
                    {
                        "name": "predicate"
                    }
                ],
                "returnType": "OperatorFunction<T[], T>",
                "jsdoctags": [
                    {
                        "name": "errors",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "predicate",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "AlunoSortFields",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "PessoaSortFields | \"formaIngresso\" | \"matricula\"",
                "file": "src/app/domain/pessoa/aluno/aluno.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "DisciplinaSortFields",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"descricao\" | \"sigla\" | \"cargaHoraria\"",
                "file": "src/app/domain/disciplina/disciplina.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "EntidadeEventSource",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"client\" | \"server\"",
                "file": "src/app/domain/entidade.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "EntidadeEventType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"cadastrado\" | \"atualizado\" | \"removido\"",
                "file": "src/app/domain/entidade.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "FilterPredicate",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "src/backend/interceptors.ts",
                "description": "",
                "kind": 162
            },
            {
                "name": "FilterTransformer",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "src/backend/interceptors.ts",
                "description": "",
                "kind": 162
            },
            {
                "name": "Id",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "string | null",
                "file": "src/app/domain/entidade.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "NotTakenService",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "src/app/shared/validators.ts",
                "description": "",
                "kind": 162
            },
            {
                "name": "PessoaSortFields",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"nome\" | \"email\" | \"cpf\"",
                "file": "src/app/domain/pessoa/pessoa.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "ProfessorSortFields",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "PessoaSortFields | \"titulacao\"",
                "file": "src/app/domain/pessoa/professor/professor.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "SortFieldsExtractor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/util/service.util.ts",
                "description": "",
                "kind": 165
            }
        ],
        "enumerations": [
            {
                "name": "FormaIngresso",
                "childs": [
                    {
                        "name": "ENADE",
                        "value": "ENADE"
                    },
                    {
                        "name": "VESTIBULAR",
                        "value": "Vestibular"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/domain/pessoa/aluno/aluno.ts"
            },
            {
                "name": "Titulacao",
                "childs": [
                    {
                        "name": "MESTRE",
                        "value": "Mestre"
                    },
                    {
                        "name": "DOUTOR",
                        "value": "Doutor"
                    },
                    {
                        "name": "PHD",
                        "value": "PHD"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/domain/pessoa/professor/professor.ts"
            }
        ],
        "groupedVariables": {
            "src/app/domain/pessoa/aluno/aluno.mock.ts": [
                {
                    "name": "alunosMock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/domain/pessoa/aluno/aluno.mock.ts",
                    "type": "[]",
                    "defaultValue": "[...data]"
                },
                {
                    "name": "injectionToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/domain/pessoa/aluno/aluno.mock.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<AlunosMock>('app.mocks.aluno')"
                }
            ],
            "src/app/shared/endpoints.ts": [
                {
                    "name": "api",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/endpoints.ts",
                    "type": "string",
                    "defaultValue": "'api'"
                },
                {
                    "name": "core",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/endpoints.ts",
                    "type": "string",
                    "defaultValue": "'core'"
                },
                {
                    "name": "endpoints",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/endpoints.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  core: {\r\n    v1: {\r\n      alunos: new Endpoint(`/${api}/${core}/${v1}/alunos`),\r\n      professores: new Endpoint(`/${api}/${core}/${v1}/professores`),\r\n      disciplinas: new Endpoint(`/${api}/${core}/${v1}/disciplinas`),\r\n    },\r\n  },\r\n  query: {\r\n    v1: {\r\n      alunos: new Endpoint(`/${api}/${query}/${v1}/alunos`),\r\n      professores: new Endpoint(`/${api}/${query}/${v1}/professores`),\r\n      disciplinas: new Endpoint(`/${api}/${query}/${v1}/disciplinas`),\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "query",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/endpoints.ts",
                    "type": "string",
                    "defaultValue": "'query'"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/endpoints.ts",
                    "type": "",
                    "defaultValue": "environment.backend"
                },
                {
                    "name": "v1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/endpoints.ts",
                    "type": "string",
                    "defaultValue": "'v1'"
                }
            ],
            "src/main-dev.ts": [
                {
                    "name": "backend",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/main-dev.ts",
                    "type": "",
                    "defaultValue": "require.context('./backend/', true, /\\.data\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/main-dev.ts",
                    "type": "any"
                }
            ],
            "src/test.ts": [
                {
                    "name": "backend",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./backend/', true, /\\.data\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/backend/config.ts": [
                {
                    "name": "backendConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/backend/config.ts",
                    "type": "BackendConfigArgs",
                    "defaultValue": "{\r\n  strategyId: 'uuid',\r\n  host: `${schema}://${host}:${port}`,\r\n  apiBase: '',\r\n  passThruUnknownUrl: true,\r\n}"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/backend/config.ts",
                    "type": "",
                    "defaultValue": "environment.backend"
                }
            ],
            "src/backend/domain/disciplina/disciplina.data.ts": [
                {
                    "name": "collectionName",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/backend/domain/disciplina/disciplina.data.ts",
                    "type": "string",
                    "defaultValue": "'disciplina'"
                },
                {
                    "name": "disciplinas",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/backend/domain/disciplina/disciplina.data.ts",
                    "type": "[]",
                    "defaultValue": "[...json]"
                }
            ],
            "src/backend/domain/pessoa/aluno/aluno.data.ts": [
                {
                    "name": "collectionName",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/backend/domain/pessoa/aluno/aluno.data.ts",
                    "type": "string",
                    "defaultValue": "'aluno'"
                }
            ],
            "src/backend/domain/pessoa/professor/professor.data.ts": [
                {
                    "name": "collectionName",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/backend/domain/pessoa/professor/professor.data.ts",
                    "type": "string",
                    "defaultValue": "'professor'"
                }
            ],
            "src/app/domain/pessoa/pessoa.ts": [
                {
                    "name": "DEFAULT_NOT_TAKEN_SERVICE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/domain/pessoa/pessoa.ts",
                    "type": "NotTakenService",
                    "defaultValue": "() => of(true)"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  delaySimulado: [400, 2500],\r\n  backend: {\r\n    schema: 'http',\r\n    host: 'localhost',\r\n    port: 4201,\r\n  },\r\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true,\r\n  delaySimulado: null,\r\n}"
                }
            ],
            "src/app/domain/disciplina/disciplina-form/disciplina-form.stories.ts": [
                {
                    "name": "New",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/domain/disciplina/disciplina-form/disciplina-form.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: DisciplinaFormComponent,\r\n})"
                }
            ],
            "src/app/domain/pessoa/professor/professor.mock.ts": [
                {
                    "name": "professoresMock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/domain/pessoa/professor/professor.mock.ts",
                    "type": "[]",
                    "defaultValue": "[...data]"
                }
            ]
        },
        "groupedFunctions": {
            "src/backend/domain/disciplina/disciplina.data.ts": [
                {
                    "name": "clearData",
                    "file": "src/backend/domain/disciplina/disciplina.data.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [],
                    "returnType": "Promise<void>"
                },
                {
                    "name": "getAll",
                    "file": "src/backend/domain/disciplina/disciplina.data.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [],
                    "returnType": "Promise<DisciplinaJson[]>"
                },
                {
                    "name": "insertInitialData",
                    "file": "src/backend/domain/disciplina/disciplina.data.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "returnType": "Promise<DisciplinaJson[]>",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setup",
                    "file": "src/backend/domain/disciplina/disciplina.data.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "returnType": "void",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/backend/domain/pessoa/professor/professor.data.ts": [
                {
                    "name": "clearData",
                    "file": "src/backend/domain/pessoa/professor/professor.data.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [],
                    "returnType": "Promise<void>"
                },
                {
                    "name": "insertInitialData",
                    "file": "src/backend/domain/pessoa/professor/professor.data.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "returnType": "Promise<ProfessorJson[]>",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setup",
                    "file": "src/backend/domain/pessoa/professor/professor.data.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "returnType": "void",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/backend/interceptors.ts": [
                {
                    "name": "createNotTakenInterceptor",
                    "file": "src/backend/interceptors.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "collectionName"
                        },
                        {
                            "name": "endpoint"
                        },
                        {
                            "name": "field"
                        }
                    ],
                    "returnType": "IRequestInterceptor",
                    "jsdoctags": [
                        {
                            "name": "collectionName",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "endpoint",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "field",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createSearchRequestInterceptor",
                    "file": "src/backend/interceptors.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "collectionName"
                        },
                        {
                            "name": "path"
                        },
                        {
                            "name": "filterPredicate"
                        },
                        {
                            "name": "transformer"
                        },
                        {
                            "name": "extractors"
                        }
                    ],
                    "returnType": "IRequestInterceptor",
                    "jsdoctags": [
                        {
                            "name": "collectionName",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filterPredicate",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "transformer",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "extractors",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "joinToOne",
                    "file": "src/backend/interceptors.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "collectionName"
                        },
                        {
                            "name": "joinField"
                        },
                        {
                            "name": "joinTarget"
                        }
                    ],
                    "returnType": "FilterTransformer<T>",
                    "jsdoctags": [
                        {
                            "name": "collectionName",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "joinField",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "joinTarget",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parseQueryString",
                    "file": "src/backend/interceptors.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "url"
                        }
                    ],
                    "returnType": "Map<string, string[]>",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/util/service.util.ts": [
                {
                    "name": "filtrar",
                    "file": "src/app/shared/util/service.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "values"
                        },
                        {
                            "name": "page"
                        },
                        {
                            "name": "sort"
                        },
                        {
                            "name": "predicate"
                        },
                        {
                            "name": "deserializer"
                        }
                    ],
                    "returnType": "Page<R>",
                    "jsdoctags": [
                        {
                            "name": "values",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sort",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "predicate",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "deserializer",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "searchOneOf",
                    "file": "src/app/shared/util/service.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "filter",
                            "type": "string"
                        },
                        {
                            "name": "values"
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "values",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "searchString",
                    "file": "src/app/shared/util/service.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "value",
                            "optional": true
                        },
                        {
                            "name": "filter",
                            "type": "string"
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filter",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "simularDelay",
                    "file": "src/app/shared/util/service.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "result"
                        }
                    ],
                    "returnType": "Observable<T>",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "tryMapToUniqueResult",
                    "file": "src/app/shared/util/service.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "errors"
                        },
                        {
                            "name": "predicate"
                        }
                    ],
                    "returnType": "OperatorFunction<T[], T>",
                    "jsdoctags": [
                        {
                            "name": "errors",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "predicate",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/backend/domain/pessoa/aluno/aluno.data.ts": [
                {
                    "name": "getAll",
                    "file": "src/backend/domain/pessoa/aluno/aluno.data.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [],
                    "returnType": "Promise<AlunoJson[]>"
                },
                {
                    "name": "insertInitialData",
                    "file": "src/backend/domain/pessoa/aluno/aluno.data.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "returnType": "Promise<AlunoJson[]>",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setup",
                    "file": "src/backend/domain/pessoa/aluno/aluno.data.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "returnType": "void",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/domain/pessoa/aluno/aluno.ts": [
                {
                    "name": "FormaIngresso",
                    "childs": [
                        {
                            "name": "ENADE",
                            "value": "ENADE"
                        },
                        {
                            "name": "VESTIBULAR",
                            "value": "Vestibular"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/domain/pessoa/aluno/aluno.ts"
                }
            ],
            "src/app/domain/pessoa/professor/professor.ts": [
                {
                    "name": "Titulacao",
                    "childs": [
                        {
                            "name": "MESTRE",
                            "value": "Mestre"
                        },
                        {
                            "name": "DOUTOR",
                            "value": "Doutor"
                        },
                        {
                            "name": "PHD",
                            "value": "PHD"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/domain/pessoa/professor/professor.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/domain/pessoa/aluno/aluno.ts": [
                {
                    "name": "AlunoSortFields",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "PessoaSortFields | \"formaIngresso\" | \"matricula\"",
                    "file": "src/app/domain/pessoa/aluno/aluno.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/domain/disciplina/disciplina.ts": [
                {
                    "name": "DisciplinaSortFields",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"descricao\" | \"sigla\" | \"cargaHoraria\"",
                    "file": "src/app/domain/disciplina/disciplina.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/domain/entidade.ts": [
                {
                    "name": "EntidadeEventSource",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"client\" | \"server\"",
                    "file": "src/app/domain/entidade.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "EntidadeEventType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"cadastrado\" | \"atualizado\" | \"removido\"",
                    "file": "src/app/domain/entidade.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "Id",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "string | null",
                    "file": "src/app/domain/entidade.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/backend/interceptors.ts": [
                {
                    "name": "FilterPredicate",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "src/backend/interceptors.ts",
                    "description": "",
                    "kind": 162
                },
                {
                    "name": "FilterTransformer",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "src/backend/interceptors.ts",
                    "description": "",
                    "kind": 162
                }
            ],
            "src/app/shared/validators.ts": [
                {
                    "name": "NotTakenService",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "src/app/shared/validators.ts",
                    "description": "",
                    "kind": 162
                }
            ],
            "src/app/domain/pessoa/pessoa.ts": [
                {
                    "name": "PessoaSortFields",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"nome\" | \"email\" | \"cpf\"",
                    "file": "src/app/domain/pessoa/pessoa.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/domain/pessoa/professor/professor.ts": [
                {
                    "name": "ProfessorSortFields",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "PessoaSortFields | \"titulacao\"",
                    "file": "src/app/domain/pessoa/professor/professor.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/shared/util/service.util.ts": [
                {
                    "name": "SortFieldsExtractor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/util/service.util.ts",
                    "description": "",
                    "kind": 165
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/disciplina/disciplina-form/disciplina-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DisciplinaFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/disciplina/disciplina-form/disciplina-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "New",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/disciplina/disciplina-list/disciplina-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DisciplinaListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/disciplina/disciplina.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DisciplinaService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/disciplina/disciplina.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Disciplina",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/disciplina/disciplina.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DisciplinaEvent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/disciplina/disciplina.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DisciplinaJson",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/disciplina/routes/disciplina-form-route/disciplina-form-route.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DisciplinaFormRouteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/disciplina/routes/disciplina-form-route/disciplina-form-route.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Actions",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/disciplina/routes/disciplina-list-route/disciplina-list-route.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DisciplinaListRouteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/entidade.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "EntidadeService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/entidade.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Endpoints",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/entidade.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Entidade",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/entidade.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EntidadeEvent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/entidade.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EntidadeJson",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/pessoa/aluno/aluno-detail/aluno-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlunoDetailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/pessoa/aluno/aluno-form/aluno-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlunoFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/pessoa/aluno/aluno-list/aluno-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlunoListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/pessoa/aluno/aluno.mock.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AlunosMock",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/pessoa/aluno/aluno.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "alunosMock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/pessoa/aluno/aluno.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "injectionToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/pessoa/aluno/aluno.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AlunoService",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/pessoa/aluno/aluno.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Aluno",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/pessoa/aluno/aluno.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AlunoEvent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/pessoa/aluno/aluno.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AlunoJson",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/pessoa/aluno/routes/aluno-form-route/aluno-form-route.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlunoFormRouteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/pessoa/aluno/routes/aluno-form-route/aluno-form-route.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Actions",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/pessoa/aluno/routes/aluno-list-route/aluno-list-route.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlunoListRouteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/pessoa/pessoa.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PessoaService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/pessoa/pessoa.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Pessoa",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/pessoa/pessoa.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CpfNotTakenJson",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/pessoa/pessoa.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EmailNotTakenJson",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/pessoa/pessoa.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PessoaJson",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/pessoa/pessoa.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_NOT_TAKEN_SERVICE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/pessoa/professor/professor-form/professor-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfessorFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/pessoa/professor/professor-list/professor-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfessorListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/pessoa/professor/professor.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "professoresMock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/pessoa/professor/professor.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProfessorService",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/pessoa/professor/professor.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Professor",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/pessoa/professor/professor.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProfessorEvent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/pessoa/professor/professor.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProfessorJson",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/pessoa/professor/routes/professor-form-route/professor-form-route.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfessorFormRouteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/pessoa/professor/routes/professor-form-route/professor-form-route.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Actions",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/pessoa/professor/routes/professor-list-route/professor-list-route.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfessorListRouteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/turma/turma.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TurmaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/domain/turma/turma.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Turma",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/base/base.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BaseComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/field-container/field-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FieldContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/field-messages/field-messages.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FieldMessagesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/loading-indicator/loading-indicator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoadingIndicatorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/endpoints.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Endpoint",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/endpoints.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "api",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/endpoints.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "core",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/endpoints.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "endpoints",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/endpoints.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "query",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/endpoints.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/endpoints.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "v1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/event/event.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AbstractEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/event/event.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "EventService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/literals.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CustomLiterals",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/util/router.util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RouterUtil",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/util/service.util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Pageable",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/util/service.util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PageStateSubject",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/util/service.util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Sort",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/util/service.util.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LookupErrorsMessages",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/util/service.util.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Page",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/util/service.util.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PageState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/util/service.util.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PoTableColumnSort",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/util/service.util.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SortFieldsOverride",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/util/service.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "filtrar",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/util/service.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "searchOneOf",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/util/service.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "searchString",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/util/service.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "simularDelay",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/util/service.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "tryMapToUniqueResult",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/validators.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CustomValidators",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/backend/config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "backendConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/backend/config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/backend/domain/disciplina/disciplina.data.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "clearData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/backend/domain/disciplina/disciplina.data.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getAll",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/backend/domain/disciplina/disciplina.data.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "insertInitialData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/backend/domain/disciplina/disciplina.data.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "setup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/backend/domain/disciplina/disciplina.data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "collectionName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/backend/domain/disciplina/disciplina.data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "disciplinas",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/backend/domain/pessoa/aluno/aluno.data.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getAll",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/backend/domain/pessoa/aluno/aluno.data.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "insertInitialData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/backend/domain/pessoa/aluno/aluno.data.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "setup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/backend/domain/pessoa/aluno/aluno.data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "collectionName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/backend/domain/pessoa/professor/professor.data.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "clearData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/backend/domain/pessoa/professor/professor.data.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "insertInitialData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/backend/domain/pessoa/professor/professor.data.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "setup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/backend/domain/pessoa/professor/professor.data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "collectionName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/backend/interceptors.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "createNotTakenInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/backend/interceptors.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "createSearchRequestInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/backend/interceptors.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "joinToOne",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/backend/interceptors.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "parseQueryString",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/main-dev.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "backend",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/main-dev.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "backend",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}